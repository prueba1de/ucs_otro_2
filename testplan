!!!!    4    0    1 1708404373   0000                                         
! Testplan for Superfuzz_AC_73-102931-01  Mon Mar 21 22:14:31 2022
!Autofile # 2500
! 73-102931-01_C0
!execute "title Superfuzz_AC_73-102931-01_C0"
! Fixture_220, 255, 256
!=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=!
!                          _                       _                        !
!                         | |                     | |                       !
!                         | |                     | |                       !
!                    _    | |    _           _    | |    _                  !
!                   | |   | |   | |         | |   | |   | |                 !
!              _    | |   | |   | |    _    | |   | |   | |    _            !
!             | |   | |   | |   | |   | |   | |   | |   | |   | |           !
!             |_|   |_|   | |   |_|   |_|   |_|   | |   |_|   |_|           !
!                         |_|                     |_|                       !
!                                                                           !
!                    CCC    IIII     SSS      CCC      OOO                  !
!                   C        II     S        C        O   O                 !
!                   C        II      SS      C        O   O                 !
!                   C        II        S     C        O   O                 !
!                    CCC    IIII    SSS       CCC      OOO                  !
!                                                                           !
!                                                            Ver. 05/29/07  !
!=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=!
!                                                                           !
!                 File Name         : nombre de testplan                            !
!                 Assembly Name     : Superfuzz_AC                          !
!                 Board Name        : Superfuzz_AC                          !
!                 Assembly P/N      : 800-xxxxx-xx Rev xx                   !
!                 Fab               : 28-102746-01 Rev 03                   !
!                 Bom# 1            : 73-102931-01 Rev 05                   !
!                 Bom# 2            : 73-102898-01 Rev 03
!                 Schematic         : 92-105229-01 Rev A0                   !
!                 PCA Map           : 61-xxxx-xx   Rev xx                   !
!                 Test Engineer     : Kai Peng                              !
!                 Last Update       : 22/05/21                              !
!                                                                           !
!---------------------------------------------------------------------------!
!                                                                           !
!                 ICT board S/N     : FDO26100JV0                           !
!                 CIP #             :                                       !
!                 Fixture Asset Tag : 028D0B6                               !
!                 Installation Date : 22/05/21                              !
!                 CM                :                                       !
!                                                                           !
!=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=!


!=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=!
!         F I X T U R E    C U S T O M    R E Q U I R E M E N T S           !
!=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=!
!Items                      | Installed | Wiring Instructions | Comments    !
!                           | (Y/N)     | File Name           |             !
!---------------------------+-----------+---------------------+-------------!
!Present Switch             | Y         | PRESENCE_SWITCH_WIRING            !
!---------------------------+-----------+---------------------+-------------!
!LED Testing                | N         |                     |             !
!   SmartFinn               |           |                     |             !
!   Ledcheck                |           |                     |             !
!---------------------------+-----------+---------------------+-------------!
!Other LED Testing          | N         |                     |             !
!---------------------------+-----------+---------------------+-------------!
!Clock Divider Board*       | Y         | clock_divider_wire.xlsx           !
!   PECL Clock Divider      |           |                     |             !
!   700MHz CLK Divider      |           |                     |             !
!---------------------------+-----------+---------------------+-------------!
!Termination Resistor       | N         |                     |             !
!---------------------------+-----------+---------------------+-------------!
!Pull-up/down Resistor*     | N         |                     |             !
!---------------------------+-----------+---------------------+-------------!
!Long Probe for Dual Stage* | Y         | LONG_TRAVEL_PROBES_LIST           !
!---------------------------+-----------+---------------------+-------------!
!Probe Removed*             | Y         | cambiar |             !
!---------------------------+-----------+---------------------+-------------!
!Special Probe Style        | N         |                     |             !
!   Focal Probe*            |           |                     |             !
!   X Probe*                |           |                     |             !
!---------------------------+-----------+---------------------+-------------!
!Special Probe Type*        | N         |                     |             !
!---------------------------+-----------+---------------------+-------------!
!Heat Sink                  | Y         |                     |             !
!---------------------------+-----------+---------------------+-------------!
!Cool Gun                   | Y         |                     |             !
!---------------------------+-----------+---------------------+-------------!
!Miscellaneous              | N         |                     |             !
!                           |           |                     |             !
!=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=!
!Reference should be with 1). Node name 2). Probe number 3). PP number


!=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=!
!                   R E L E A S E   C H E C K L I S T                       !
!---------------------------------------------------------------------------!
! No. | Actions                                               | Yes or N/A  !
!-----+-------------------------------------------------------+-------------!
! 01  | Provided all header information in testplan.          | Y           !
!-----+-------------------------------------------------------+-------------!
! 02  | All option flags set up correctly as defined for      | Y           !
!     | production in testplan.                               |             !
!-----+-------------------------------------------------------+-------------!
! 03  | Programmed IDROM according to PCAMAP.                 | Y           !
!-----+-------------------------------------------------------+-------------!
! 04  | Verified IDROM programming with function test,        | N/A         !
!     | including 8-bit vs 16-bit.                            |             !
!     | Name of Function Test engineer who helped verify.     |             !
!-----+-------------------------------------------------------+-------------!
! 05  | If no PCAMAP is used, the IDROM digital test should   | N/A         !
!     | execute the ERASE command to write back all address   |             !
!     | locations with a default value to avoid boot up issue |             !
!     | at function test and diag.                            |             !
!-----+-------------------------------------------------------+-------------!
! 06  | Test options, KGB and BOM match with assembly number. | Y           !
!-----+-------------------------------------------------------+-------------!
! 07  | Updated testplan with devices not tested in section   | Y           !
!     | "parts not tested".                                   |             !
!-----+-------------------------------------------------------+-------------!
! 08  | Moved board directory to "released" directory.        | Y           !
!-----+-------------------------------------------------------+-------------!
! 09  | Moved new or custom test libraries to central         | Y           !
!     | library.                                              |             !
!-----+-------------------------------------------------------+-------------!
! 10  | Assembly options verification.                        | N/A         !
!-----+-------------------------------------------------------+-------------!
! 11  | Plugged all receptacles with probes removed.          | Y           !
!=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=!


!=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=!
!                                  E C O ' S                                !
!---------------------------------------------------------------------------!
!                                                                           !
! Date      ECO #      Status  By  What Changes                             !
! --------  ---------  ------  --  ---------------------------------------- !
! mm/dd/yy  ???        ???     ??                                           !
!                                                                           !
!                                                                           !
!                                                                           !
!=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=!


!=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=!
!                                  N O T E S                                !
!---------------------------------------------------------------------------!
!                                                                           !
! Date      Status  By  Notes                                               !
! --------  ------  --  --------------------------------------------------- !
! mm/dd/yy  ???     ??                                                      !
!                                                                           !
!                                                                           !
!                                                                           !
!=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=!


!=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=!
!          T E S T M A I N     R E V I S I O N     H I S T O R Y            !
!---------------------------------------------------------------------------!
!                                                                           !
! Date      Verified  By  Notes                                             !
! --------  --------  --  ------------------------------------------------- !
! 05/29/07   Yes      DL  Disabled vacuum recycling when running in         !
!                         evaluation mode, a new requirement.               !
!                                                                           !
!                         Updated serial number validation per new document !
!                         number 70106-0000 revision G0. Characters 'I' and !
!                         'O' are now valid to use in location (LLL) and    !
!                         sequential serial ID (SSSS). Location (LLL) is    !
!                         now of base 36, alpha/numeric.                    !
!                                                                           !
! 10/05/06   Yes      DL  Updated with new Cisco logo.                      !
!                                                                           !
!                         Added stop when evalog failed to run.             !
!                                                                           !
! 09/05/06   Yes      DL  Undo "object checking off." This is only done     !
!                         prior to program release.                         !
!                                                                           !
!                         Delete subroutine Tup. Use function looptest      !
!                         instead.                                          !
!                                                                           !
!                         Move TestJet call to after Analog_Tests and       !
!                         remove the "unpowered" after TestJet.             !
!                                                                           !
! 08/09/06   Yes      DL  Turned off object checking as part of Test Time   !
!                         Reduction (TTR).                                  !
!                                                                           !
! 08/29/05   Yes      DL  Changed final report destination from             !
!                         "/dev/rpr"&th$ to btgetenv$("RPR"&th$) for PC     !
!                         compatibility.                                    !
!                                                                           !
! 01/20/05   Yes      DL  Added call to program evalog.                     !
!                                                                           !
! 08/26/04   Yes      DL  Changed default setting for Evaluation_runs to    !
!                         20 per new requirements.                          !
!                                                                           !
! 08/17/04   Yes      DL  Changed codes for Evaluation run data logging.    !
!                                                                           !
! 08/16/04   Yes      DL  Added new checklist item for receptacle plugins.  !
!                                                                           !
!                         Added custom subroutine Check_BD_Present to check !
!                         for board presence prior to testing.              !
!                                                                           !
! 07/08/04   Yes      DL  Added feature to support serial number            !
!                         validation.                                       !
!                                                                           !
! 05/19/04   Yes      DL  Updated sub Regulators and sub CPLDs with         !
!                         parameters for 5.21 and later compatibility.      !
!                                                                           !
! 03/01/04   Yes      DL  Copied Agilent 3070 standard testmain rev 05.30p  !
!                         and migrated custom features from pre 05.30       !
!                         testmain.                                         !
!                                                                           !
!                         Added options to support ICT Aware process        !
!                         (CISCO_ICT_AWARE).                                !
!                                                                           !
!=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=!


!##############################################################################
!   AGILENT 3070 STANDARD TESTMAIN       Revision: "3020 05.30p 0603(full)"
!   STANDARD VERSION
!##############################################################################
!   This "main" program sequences execution of testplan subroutines and
!   assumes that the current working directory is already set to the
!   appropriate board directory.
!   This testmain has included the code to support the following optional
!   features:
!        Data Logging for PushButton QSTATS, QSTATS-II and ART
!        Chek-Point (pin tests)
!        Boundary Scan:  Interconnect Plus & ScanWorks
!   Once the testplan is working, you may selectively enable
!   any combination of the features by changing the 'flag' variables
!   in the subroutine "Set_Custom_Options".  Use the following command:
!         find  "!   Other"&" parameters"  ! takes you to option settings
!
!   Turn learn on and run the testplan on a known good board.  After the
!   learning run is successfully completed, the testplan is ready for
!   customization, debug and production testing.
!   Analog limits are logged by standard testmain if and only if the
!   learn flag is on.  Limits must be logged once each time they change
!   in order for PushButton Q-STATS or Q-STATS II to produce histograms.
!
!   If flash is to be programmed on this board, the testplan needs to have the
!   locations marked !flash! modified or reviewed.  Please review the flash
!   manual for full explanation. Key elements include:
!
!   full disabling of buses and upstream control lines is required for safety
!   use ID check for digital test subroutine to ensure proper part placement
!   Cycle power if required to three-state upstream devices

! EEprom variables Define
! for act2 quack ic programming
dim HDR1(0:127),HDR2(0:127),HDR3(0:127)
dim EE_D1(0:1023),EE_D2(0:1023),EE_D3(0:1023)
dim XSUM1(0:15),XSUM2(0:15),XSUM3(0:15)
dim EE_R1(0:1023),EE_R2(0:1023),EE_R3(0:1023)
dim Mem_Table(0:255)
dim Read_Data(4096)
dim Act2_Vendor$[20]
dim Act2EprPath$[70]

!ir35215

dim IR_USER_CAP_PT_U1_3(32)
dim IR_USER_PROG_PT_U1_3(6)
dim IR_USER_VER_PT_U1_3(6)
dim IR_CONFIG_CAP_PT_U1_3(5)
dim IR_CONFIG_PROG_PT_U1_3(6)
dim IR_CONFIG_VER_PT_U1_3(6)
dim IR_USER_CAP_PT_U1_4(32)
dim IR_USER_PROG_PT_U1_4(6)
dim IR_USER_VER_PT_U1_4(6)
dim IR_CONFIG_CAP_PT_U1_4(5)
dim IR_CONFIG_PROG_PT_U1_4(6)
dim IR_CONFIG_VER_PT_U1_4(6)
dim IR_USER_CAP_PT_U1_5(32)
dim IR_USER_PROG_PT_U1_5(6)
dim IR_USER_VER_PT_U1_5(6)
dim IR_CONFIG_CAP_PT_U1_5(5)
dim IR_CONFIG_PROG_PT_U1_5(6)
dim IR_CONFIG_VER_PT_U1_5(6)
dim IR_USER_CAP_PT_U1_27(32)
dim IR_USER_PROG_PT_U1_27(6)
dim IR_USER_VER_PT_U1_27(6)
dim IR_CONFIG_CAP_PT_U1_27(5)
dim IR_CONFIG_PROG_PT_U1_27(6)
dim IR_CONFIG_VER_PT_U1_27(6)
dim IR_USER_CAP_PT_U1_8(32)
dim IR_USER_PROG_PT_U1_8(6)
dim IR_USER_VER_PT_U1_8(6)
dim IR_CONFIG_CAP_PT_U1_8(5)
dim IR_CONFIG_PROG_PT_U1_8(6)
dim IR_CONFIG_VER_PT_U1_8(6)

! Miscellaneous string variable size declarations:
dim InvOn$[5], InvOff$[4]
dim Testmain_Revision$[70]
dim Batch$[12], Oper$[25], Testplan$[14], Testrev$[8]
dim Board$[24], Board_Rev$[14], Known_Good$[1]
dim Proc_Step$[5], Log_Path$[80]
! The following is used in the power-supply setup routine for parallel
! power supplies.  It holds masks for comparison.
dim Psgroup(1:16)
option bit 32     ! Prevents range error when comparing Psgroup with MSB set

! IYET
dim IYET_Failing_Tests$(0:2047)[40]
dim IYET_Retest_Failing_Devices$(0:8191)[40]
dim IYET_Top_Retests$(0:8191,2)[40]

!add retest without send Flexflow !FGU, 1 to 6
SILDir$ =  "F:/.SIL/"
SIL2Dir$ = "F:/.SIL2/"
SIL = True
SIL2 = True





!       INITIALIZE BREAK AND ERROR TRAPPING

on break recover Break_Trap
on error recover Error_Trap

!       INITIALIZE VARIABLES

call Initializations
!call Header


!       SET UP FAILURE ACKNOWLEDGMENT
acknowledge all failures

!       MAIN LOOP FOR REPEATEDLY TESTING A BOARD
!          (executed only once if "learning")
Flex_Flow_V:
Wait_For_Start:

!!!!!***********************operadores certificados*************************
 call Checa_operador
!!!!!***********************fin rutina de operadores************************

Pass_Fail_Reported = False
Logging_Started = False
Tests_On_This_Board = 0

!-030104S
!print | print Place_Board_Prompt$
if Serializing then
  Try_Again:
  call Get_Version    !! Added by flex
  Serial$ = fn Get_Serial_Num$(Serial_Prompt$)
  call Fixture_Set
     !add retest without send Flexflow !FGU,2 to 6
     SIL  = fn ShouldILog(Serial$)
     SIL2 = fn ShouldILog2(Serial$)
     call FF_Val(Serial$, Flex_Flow)
     if FL then goto Try_Again
  Known_Good$ = "n"
  if Serial$ = Known_Good_Board$ then Known_Good$ = "y"
 if StopLine$ = "1" and Using_Stopline then goto STOPLINED
    call Validation_FF
    if FF_V then goto Try_Again

   STOPLINED:
end if
!############################ END  Flex_Flow #################################

  if Using_AwareTest = True then
    ! remove special characters
    Serial_New$ = fn Remove_Special_Characters$(Serial$)
    Path$ = Serial_Number_Directory$ & Serial_New$ & Serial_Suffix$
    enter Path$,, Err

    !! Added the following code to check for all uppercase or all lowercase
    !! serial numbers.
    if Err then
       Path$ = Serial_Number_Directory$ & upc$(Serial_New$) & Serial_Suffix$
       enter Path$,, Err
       if Err then
          Path$ = Serial_Number_Directory$ & lwc$(Serial_New$) & Serial_Suffix$
          enter Path$,, Err
       end if
    end if

    if Err then
      ! serial number file was not found -- board was not tested on AXI
      if AXI_Tested_Override = False then
        print Not_AXI_Tested$
        goto Wait_For_Start
      else
        ! Add custom code here if serial number is missing and
        ! you do not want to completely skip the PC board test
      end if
  ! end if
  end if
end if
if Using_Multiple_Versions and Version_Prompting = Per_Board then
  call Get_Version_Label
  if nrun = 1 or Version_Inits_Needed then
    call Do_Version_Inits
  end if
end if

 print ""
if Flex_Flow then
   print chr$(27)&"&v2S************* Flex_Flow habilitado ****************"
   else
   print chr$(27)&"&v4S************* Flex_Flow Deshabilitado *************"
end if

print ""

  if not SIL then
        print Green$&" PRIMERA VEZ QUE SE PRUEBA ESTA UNIDAD 1RETRY "
    end if
     if SIL and not SIL2 then
         print Yellow$&" SEGUNDA VEZ QUE SE PRUEBA ESTA UNIDAD 2RETRY "
     end if
       if SIL2 then
          print Magenta$&"TERCERA VEZ QUE SE PRUEBA ESTA UNIDAD 3RETRY "
       end if

print | print Place_Board_Prompt$
call Check_board
wait for start
execute "title "&Assembly$&" "&Model_Type$

!       RE-TEST AFTER PIN-TEST FAILURE

ChekPoint_Retry:

print using "@,/"
if Serializing then print But$; Serial$
Tests_On_This_Board = Tests_On_This_Board + 1
if Tests_On_This_Board > 1 then print Rep_Test$

!       START LOGGING FOR THIS BOARD

 if Evaluation then
   if Aware_fail_report then
      report is Report_Printer$; append
   else
      report is Report_Printer$,window;append
   end if
end if

if Print_to_file then
   if Evaluation then
      if Aware_fail_report then
         report is Report_Printer$; append
      else
         report is Report_Printer$,window; append
      end if
   else
      if Aware_fail_report then
         report is Report_Printer$
      else
         report is Report_Printer$,window;append
      end if
   end if
else
   report is Report_Printer$,window;append
end if
!+030104E

if Logging then call Start_Logging
Logging_Started = True   ! Also used as reporting flag

!       ACTIVATE VACUUM IN PREPARATION FOR TEST

!********************************************
call Check_BD_Present  !081604
!********************************************

if Tests_On_This_Board = 1 then  call Counter | faon 1.5
! Warning: Reducing the value for 'faon' from the default value of 1.5
! can potentially cause testhead damage.
  call Header

!       CHECK FIXTURE CONTACT, THEN
!       LEARN OR TEST (OR RE-TEST) BOARD

!+030104S
if Print_board_msg then
   print using "@"
!! call Print_board_testing_msg
end if
!+030104E

unpowered

if (not learning) and Chek_Point_Mode = Pretest then
!-030104S
! if not fn Chek_Point_OK then goto Cleanup
!-030104E
!+030104S
  if not fn Chek_Point_OK then
    if Continue_after_pins_failed = True then
      beep
      beep
      print
      question ">>> Continue testing (yes/no)?",Cont_ans
      if Cont_ans then
        print "Yes"
        goto Start_test_sections
      else
        goto Cleanup
      end if
    else
        goto Cleanup
    end if
  end if
!+030104E
end if

!+030104S
Start_test_sections:
!+030104E
TestTimeStart = msec
call Test_Sections
TestTimeStop = msec
TestTime =(TesttimeStop - TestTimeStart)/1000

!       IF ANY BOARD FAILED TEST, TRY TO FIX IT BY RUNNING PIN TEST

Cleanup:

!081704
if Evaluation then
   assign @RPT to Eval_Rpt$; write, append
   output @RPT; "{@RUN "; val$(Eval_loop); "|"; datetime$; "|"; fnTest_Status$(boardfailed); "}{@RUN_END}"
   assign @RPT to *
end if
!081704

if boardfailed and Status <> Failed_In_Preshorts then
  if Tests_On_This_Board = 1 and Chek_Point_Mode = Failures then
    unpowered
    if fn Chek_Point_OK then goto ChekPoint_Retry
  end if
end if

!       REMOVE BOARD FROM TESTHEAD AND GENERATE PASS/FAIL MESSAGE
!       THEN TERMINATE LOGGING (IF ENABLED) AND REPORTING
call Counter |faon 1.5|auxdisconnect 5 |unpowered|faoff 1.5 |wait 1

!-030104S
!faoff  !Moved pass if...end if below to avoid lifting up fixture gate
        !in the middle of the program.
!-030104E

!+030104S
!unpowered  !Added for print failures option to avoid unattended power-on UUT.
!+030104E

Pass_Fail_Reported = True

Eject_Ticket: image 13/

if boardfailed then
  if not Using_BtBasic then first pass yield 0, 1 !FPY not Passed and Tested
!@ print "     **  ";Fail_Msg$;"  **"
!@  copy Fail_File$ over "/dev/tty"
  if Status = Failed_Pin_Test then
    print " ** ";Pin_Msg$;" **"
  end if
  if learning then Status = Failed_In_Learn
  if Serializing then report Serial_Nr$ & Serial$
  report using Eject_Ticket
  if Using_Buffered_Reporting then report out
else
    report is window;append
!    report chr$(27)&"&v2S**  ";Pass_Msg$;"  **"
!    report "S/N:"&Serial$
  if not Using_BtBasic then first pass yield 1, 1 !FPY Passed and Tested
!@  print "     **  ";Pass_Msg$;"  **"
!@  copy Pass_File$ over "/dev/tty"
  if Using_AwareTest = True then
    enter Path$,, Err  ! check to see if serial number file exists
                       ! Err = 100009 (File Not Found)
    if not Err then    ! Do not create new serial number files
      enter "date +%Y%m%d%H%M |"; Passed_Datetime$
      assign @SNF,Err to Path$; write, append
      if Err then      ! problems writing to serial number file
        print SNF_Error_Msg$  |   print "    ";errm$
        beep
        ! print | print Stop_Msg$
        ! stop
      else
        output @SNF; "passed3070 = " & Passed_Datetime$
        assign @SNF to *
      end if
    end if
  end if
end if
!report is *
!if Logging then

if not boardfailed then
    Passt = 1
    Vuelta = Vuelta + Passt

     if Vuelta > 4 then
       test monitor
     end if
end if

log board end Status

  log out"C:\LogData\"&System$&"_Autotestlog_"&Serial$[1;11]&"_"&datetime$,Err_Temporal
  log out "F:\Logout\ICT_Utilization\"&Serial$[1;11], Err

if boardfailed then

!#############################################################################

             !add retest without send Flexflow !!3 to 6 !!FLEX FGU
!-----------------   1st. retry  -----------------------------------------
  if Flex_Flow then
     if not SIL then
       SN_File$ = SILDir$&"/"&Serial$[1;11]
       assign @Serial_Numbers_File, Error to SN_File$; write    !!JJSR
       assign @Serial_Numbers_File to *                         !!JJSR
       print chr$(27)&"&v7S FAVOR DE PROBAR LA TARJETA NUEVAMENTE 2 RETRY"
      else
!------------------   2nd. retry  -----------------------------------
        if not SIL2 then
           SN_File$ = SIL2Dir$&"/"&Serial$[1;11]
           assign @Serial_Numbers_File, Error to SN_File$; write    !!JJSR
           assign @Serial_Numbers_File to *                         !!JJSR
           print chr$(27)&"&v7S FAVOR DE PROBAR LA TARJETA NUEVAMENTE 3 RETRY"
        end if
      end if
  end if
!#############################################################################
  if  SIL2 and Flex_Flow then  !add retest without send Flexflow !LV,4 to 6
      log out "F:\CiscoData\Files To Transfer\"&System$&"_Autotestlog_"&Serial$[1;11], Err_Temporal
         !##############################  !!FLEX FGU
         !add retest without send Flexflow !LV,5 to 6
         execute "rm "&SILDir$&Serial$[1;11]&"*"
         execute "rm "&SIL2Dir$&Serial$[1;11]&"*"
         print chr$(28)&"&v1S UNIDAD FALLADA EN FF ENVIAR A DIAGNOSTICO"
         !##############################
  end if

     print "...>>> F A I L E D <<<..."
     copy Fail_File$ over "/dev/tty"

 else
         !##### Clean SIL folder ########## !!FLEX FGU ###
         !add retest without send Flexflow !LV,5 to 6
         if SIL then execute "rm "&SILDir$&Serial$[1;11]&"*"
         if SIL2 then execute "rm "&SIL2Dir$&Serial$[1;11]&"*"
         !####### End Clean SIL folder #################

     print "...>>> P A S S E D <<<..."
     copy Pass_File$ over "/dev/tty"

end if

if not boardfailed then
  BSTATUS$ = "PASS"
else
  BSTATUS$ = "FAIL"
end if

report out "Fail"      !! Send to logfile to File named Fail

if not boardfailed then
  print Green$&"     **  ";Pass_Msg$;"  **"
  report chr$(27)&"&v2S**  ";Pass_Msg$;"  **"
  report chr$(27)&"&v2SS/N:"&Serial$
  report out
 else
   print Red$&"     **  ";Fail_Msg$;"  **"
   report chr$(27)&"&v4S ##########ICT Fail #######"
   report chr$(27)&"&v4S"&Serial$
   report chr$(27)&"&v4S Operator ID: ";Oper$
   if Status = Failed_Pin_Test then
    print " ** ";Pin_Msg$;" **"
   end if
 report out
end if

if Using_LogTime then
 if not boardfailed then

assign @W to "test_time.txt";write,append
output @W;"S/N:"&Serial$

  

 end if
end if

report clear
clear failures
log clear
Logging_Started = False

print
print "Board test time is: "; Testtime; "sec"


!       END PROGRAM IF LEARNING. OTHERWISE RETURN TO MAIN LOOP

if learning then
   learn off
   print | print Learning_Off_Msg$ | print Stop_Msg$
   beep
   stop
end if

!+030104S
!Test_time = (msec - Start_time)/1000
!print "Test time was ";Test_time;" seconds."
!Atimes = Atimes+Test_time  !Add to accummulative test time
!RPT1: image 8a, 2a, 4d, 6x, 18a, 2a, 6d.2d
!print using RPT1;"Runs","= ",Ptimes+Ftimes,"Total Test Time","= ",Atimes/60," min"
!print using RPT1;"Passes","= ",Ptimes,"Average Test Time","= ",Atimes/(Ptimes+Ftimes)," sec"
!print using RPT1;"Fails","= ",Ftimes,"Pass Yield","= ",(Ptimes/(Ptimes+Ftimes))*100," %"
!+030104E
!pause
goto Wait_For_Start

!       END OF MAIN LOOP
!       INTERRUPT HANDLING
! This is the normal entry for Break/Stop detection

Break_Trap:

off break
off error
print "     ";Break_Msg$
unpowered,Err
if Err then print errmlong$
if Logging and Logging_Started then
  log board end Break_Code
    log out"C:\LogData\"&System$&"_Autotestlog_"&Serial$[1;11]&"_"&datetime$,Err_Temporal
!-030104S
! log out Log_Path$ & datetime$ & System$ & th$
!-030104E
!* CISCO_ICT_AWARE - From Here
!@  if Aware_fail_report then
!@     log out "/tmp/fail_log"
!@     execute "AwareFailMap -m "&Aware_bom_map$&"-r /tmp/fail_log", Err; append, nowait
!@     copy "/tmp/fail_log" over Log_Path$ & datetime$ & System$ & th$
!@  else
!@     log out Log_Path$ & datetime$ & System$ & th$
!@  end if
!* CISCO_ICT_AWARE - To Here
  log clear
end if
faoff, Err
if Err then print errmlong$
goto Abort

! This is the normal entry for errors occurring in Basic statements

Error_Trap:
off error
print errmlong$
beep
SaveErrn = errn
unpowered,Err
if Err then print errmlong$

!       IF A BOARD IS PRESENT, FAIL IT
!       THEN TERMINATE LOGGING (IF ENABLED) AND REPORTING

if Logging_Started and not Pass_Fail_Reported then
  fail device
  report Board_Not_Tested$
  print "     **  ";Fail_Msg$;"  **"
  copy Fail_File$ over "/dev/tty"
  if Status = Failed_Pin_Test then
    print " ** ";Pin_Msg$;" **"
  end if
  if Serializing then report Serial_Nr$ & Serial$
  report using Eject_Ticket
  if Using_Buffered_Reporting then report out, Err
 ! report is *, Err
  report clear
end if
if Logging_Started and Logging then
  log using """{@RPT~80|"",80a,""}""" ; errm$(SaveErrn)
  log board end Error_Code, SaveErrn
!-030104S
! log out Log_Path$ & datetime$ & System$ & th$
!-030104E
!* CISCO_ICT_AWARE - From Here
!@  if Aware_fail_report then
!@    log out "/tmp/fail_log"
!@    execute "AwareFailMap -m "&Aware_bom_map$&"-r /tmp/fail_log", Err; append, nowait
!@    copy "/tmp/fail_log" over Log_Path$ & datetime$ & System$ & th$
!@  else
!@     log out Log_Path$ & datetime$ & System$ & th$
!@  end if
!* CISCO_ICT_AWARE - To Here
  log clear
end if
!@log out"C:\ArchSystems\LogAgent\WatchFolder\test_result_" & Dateandtime$ & "_1.txt"; over


output @W;"Pre_short_test_time:",Pre_short_end," sec"
  output @W;"Short_test_time:",Short_end," sec"
  output @W;"Testjet_test_time:",Testjet_end," sec"
  output @W;"Analog_unp_test_time:",Analog_unp_end," sec"
  output @W;"Analog_Prepowered_test_time:",Analog_Prepowered_end," sec"
  output @W;"Setup_power_test_time:",Setup_power_end," sec"
  output @W;"Regulators_Programming_test_time:",Regulators_Programming_end," sec"
  output @W;"Disconnect_Power_test_time:",Disconnect_Power_end," sec"
  output @W;"Setup_power_test_time:",Setup_power_end," sec"
  output @W;"BScan_Powered_Shorts_test_time:",BScan_Powered_Shorts_end," sec"
  output @W;"BScan_Interconnect_test_time:",BScan_Interconnect_end," sec"
  output @W;"Bscan_incircuit_test_time:",Bscan_incircuit_end," sec"
  output @W;"Digital_test_time:",Digital_end," sec"
  output @W;"Analog_functional_test_time:",Analog_functional_end," sec"
  output @W;"Functional_test_time:",Functional_end," sec"
  output @W;"Total_test_time:",Testtime," sec"
  output @W;"!--------------------------------------------"
  assign @W to *


!       REMOVE THE BOARD FROM THE TESTHEAD

faoff, Err
if Err then print errmlong$
if learning or Err then goto Abort
on error recover Error_Trap
goto Wait_For_Start

!       ABORT PROGRAM: UNRECOVERABLE ERROR, LEARN ERROR OR STOP KEY

Abort:

!@log out"C:\ArchSystems\LogAgent\WatchFolder\test_result_" & Dateandtime$ & "_1.txt"; over
off break
off error
!report is *, Err
log is *, Err
beep
if (nrun=1) and not Did_First_Run_Inits then
  print No_Init_Warning$
  clear nrun
else
  if Version_Inits_Needed then
    print No_Version_Init_Warning$
    clear nrun
  end if
end if
print "     ";Stop_Msg$
beep
stop
end

!       END OF ERROR TRAPS

!       Test/Learn Sections
!    [ Assumes unpowered mode. ]
! Note concerning LEARN MODE:  some sections are not truly "learned" but are
! run in learn mode for other reasons.  For example, analog tests may be run
! in learn mode in order to log limits information used by Pushbutton QSTATS,
! and preshorts/shorts are run "just in case" -- to avoid bad learns & damage.
! To keep a section from being run in learn mode, place 'if not learning then'
! just before that section and place 'end if' just after it.
!##############################################################################
sub Test_Sections
global FirstPass
global PreshortsMsg$, ShortsMsg$, PowerMsg$, DigitalMsg$, AnalogMsg$
global DigitalFuncMsg$, AnalogPoweredMsg$, BScanIncktMsg$, BScanIntconMsg$
global Status, Failed_In_Preshorts, Failed_In_Shorts, Failed_In_Functional
global Failed_In_Digital, Failed_In_Power_Supplies, Failed_In_Analog
global Logging, True, False, Passed, DigitalProgMsg$
global Mode$, Failed_In_BScan
global VectorlessTestMsg$, Failed_In_VectorlessTest
global PolarityMsg$, Failed_In_Polarity_Check
global BScanPShortsMsg$, PrePoweredTestMsg$
global ConnectCheckMsg$, Failed_In_ConnectCheck
global Failed_In_Flash, FlashProgMsg$, Programming
global AnalogClusterMsg$, Failed_In_Analog_Cluster
global BScanSiNailsMsg$, Failed_In_BScan_SiNails
global SW_ScanPathVerifyMsg$, Failed_In_SW_Testing
global SW_DrVerifyMsg$, SW_IrVerifyMsg$
global SW_InterconnectMsg$, SW_MemInterconnectMsg$
global SW_ClusterMsg$, SW_MemBistMsg$
global SW_ProgrammingMsg$, Failed_In_SW_Programming
global SW_FlashMsg$, Failed_In_SW_Flash
global Red$, Blue$, Yellow$, Green$, Black$, Cyan$


! IYET
global Using_IYET, Sampling, IYET_Preshorts_Attempts
global IYET_Shorts_Attempts, IYET_Analog_Tests_Attempts, IYET_TestJet_Attempts
global Long_Pin_Msg$,Failed_Long_Pin_Test, IYET_PinLong_Attempts
global Counter_Inc
global Autofile$

!!**************** test time variables ***********************************
global Using_LogTime
global Pre_short_start,Pre_short_end,Short_start,Short_end
global Testjet_start,Testjet_end,Analog_unp_start,Analog_unp_end
global Pre_Powered_start,Pre_Powered_end,Setup_power_Prog_start
global Setup_power_Prog_end,Analog_functional_start,Analog_functional_end
global Pins_Long_start,Pins_Long_end, ACT2_Program_Status_start, ACT2_Program_Status_end
global TPS53678_Prog_start,TPS53678_Prog_end,Setup_power_start,Setup_power_end
global Digital_start,Digital_end,Bscan_incircuit_start
global Bscan_incircuit_end,Bscan_silicon_nail_start,Bscan_silicon_nail_end
global BScan_Interconnect_start,BScan_Interconnect_end
global Functional_start,Functional_end, Disconnect_Power_start, Disconnect_Power_end
global Analog_Cluster_start,Analog_Cluster_end
global Analog_Prepowered_start,Analog_Prepowered_end
global Regulators_Programming_start,Regulators_Programming_end
global BScan_Powered_Shorts_start,BScan_Powered_Shorts_end
!!**************** test time variables ***********************************

!+030104S
global SHO_TEST, PRES_TEST, TJ_TEST, ANA_TEST, POL_TEST
global CCHK_TEST, ANAC_TEST, PWR_TEST, REG_TEST, CPLD_TEST
global DIG_TEST, FUNCT_TEST, ANAF_TEST
global NVRAM_TEST, LED_TEST, PREP_TEST,PPRG_TEST
global BSP_TEST, BSI_TEST, BSC_TEST, BSS_TEST
global SWV_TEST, SWP_TEST, SWI_TEST, SWM_TEST
global SWC_TEST, SWB_TEST, SWD_TEST, SWF_TEST
global Continue_after_shorts_failed

Custom_failed = boardfailed
clear failures
!+030104E

SHO:  if SHO_TEST = 0 then goto SHO_END
    ! goto PWR_JV
Short_start = msec
if Using_IYET then
  call IYET (ShortsMsg$, IYET_Shorts_Attempts)
else
  call Shorts (Failed_In_Shorts, Mode$ & ShortsMsg$)
end if
if boardfailed then subexit
Short_end = (msec-Short_start)/1000
SHO_END:

PRES:  if PRES_TEST = 0 then goto PRES_END
Pre_short_start = msec
if Using_IYET then
   call IYET (PreshortsMsg$, IYET_Preshorts_Attempts)
else
   call Pre_Shorts (Failed_In_Preshorts, Mode$ & PreshortsMsg$)
end if
if boardfailed then subexit
Pre_short_end = (msec-Pre_short_start)/1000
PRES_END:

!!TJ:  if TJ_TEST = 0 then goto TJ_END
Testjet_start = msec
if Using_IYET then
    call IYET (VectorlessTestMsg$, IYET_TestJet_Attempts)
else
    call VectorlessTest (Failed_In_VectorlessTest, Mode$ & VectorlessTestMsg$)
end if
if boardfailed then subexit
Testjet_end = (msec-Testjet_start)/1000

!!TJ_END:
!#####################################################################

ANA:  if ANA_TEST = 0 then goto ANA_END
Analog_unp_start = msec
if Logging or not learning then
  if Using_IYET and not learning then
    call IYET (AnalogMsg$, IYET_Analog_Tests_Attempts)
  else
    call Analog_Tests (Failed_In_Analog, Mode$ & AnalogMsg$)
  end if
  if boardfailed then subexit
end if
Analog_unp_end = (msec-Analog_unp_start)/1000
ANA_END:
!#####################################################################

 PWR_JV:
POL:  if POL_TEST = 0 then goto POL_END
call Polarity_Check (Failed_In_Polarity_Check, Mode$ & PolarityMsg$)
if boardfailed then subexit  !030104
if boardfailed then
  Custom_failed = 1
  clear failures
end if
POL_END:
!#####################################################################


CCHK:  if CCHK_TEST = 0 then goto CCHK_END
call Connect_Check (Failed_In_ConnectCheck, Mode$ & ConnectCheckMsg$)
if boardfailed then subexit  !030104
if boardfailed then
  Custom_failed = 1
  clear failures
end if
CCHK_END:
!#####################################################################


ANAC:  if ANAC_TEST = 0 then goto ANAC_END
  call Analog_Cluster_Tests (Failed_In_Analog_Cluster, Mode$ & AnalogClusterMsg$)
if boardfailed then subexit  !030104
ANAC_END:
!#####################################################################


PREP:  if PREP_TEST = 0 then goto PREP_END
Analog_Prepowered_start = msec
call Analog_Prepowered_Tests(Failed_In_Analog, Mode$ & PrePoweredTestMsg$)
if boardfailed then subexit  !030104
Analog_Prepowered_end = (msec-Analog_Prepowered_start)/1000
PREP_END:
!#####################################################################

PWR:  if PWR_TEST = 0 then goto PWR_END
!        beep
!        print "?????????????????????????????????????????"
!        print "??  Precaution:                        ??"
!        print "??     Are all supplies configured to  ??"
!        print "??     power-up properly?              ??"
!        print "??     SKIPPED POWERED TESTS.          ??"
!        print "?????????????????????????????????????????"
!        beep
!        goto PWR_END
!     end if
call Enter_Second_Stage

!#####################################################################
 if Using_IYET then
    call IYET (Long_Pin_Msg$, IYET_PinLong_Attempts)
 else
    call Long_Pin_Tests (Failed_Long_Pin_Test, Mode$ & Long_Pin_Msg$)
 end if
if boardfailed then subexit
! call Out_Second_Stage
! subexit
! end if
!#####################################################################

powered

PPRG:  if PPRG_TEST = 0 then goto PPRG_END
  Setup_power_Prog_start = msec
   call Setup_Power_Supplies_PreProg (Failed_In_Power_Supplies, PowerMsg$)
if boardfailed then
  call Disconnect_Power_On_Board
  call Out_Second_Stage
  subexit
end if
Setup_power_Prog_end = (msec-Setup_power_Prog_start)/1000

Regulators_Programming_start = msec
   call Regulators_Programming (Failed_In_Functional, Mode$ & DigitalFuncMsg$)   !!habiltar programming
if boardfailed then
  call Disconnect_Power_On_Board
  call Out_Second_Stage
  subexit
end if
Regulators_Programming_end = (msec-Regulators_Programming_start)/1000

call Disconnect_Power_On_Board
PPRG_END:

powered

Setup_power_start = msec
call Setup_Power_Supplies (Failed_In_Power_Supplies, PowerMsg$)

!pause
call Check_Power_Rails (Failed_In_Power_Supplies, PowerMsg$)
if boardfailed then
  call Disconnect_Power_On_Board
  call Out_Second_Stage
  subexit
end if
Setup_power_end = (msec-Setup_power_start)/1000
PWR_END:

!+030104S
REG:  if REG_TEST = 0 then goto REG_END
print tab(5);Mode$;"On Board Power Supplies"
call Regulators (Failed_In_Power_Supplies, PowerMsg$)
if boardfailed then
  report
  report "----------------------------------"
  report "Regulator(s) on board failed.     "
  report
  report "********* TEST INCOMPLETE ********"
  report "**** MUST RETEST AFTER REPAIR ****"
  report
  report "----------------------------------"
  subexit
end if
REG_END:

CPLD:  if CPLD_TEST = 0 then goto CPLD_END
print tab(5);"Programming/Verifying CPLDs"
call CPLDs (Failed_In_Functional, Mode$ & DigitalFuncMsg$)
if boardfailed then
  Custom_failed = 1
  clear failures
end if
CPLD_END:
!+030104E

BSP:  if BSP_TEST = 0 then goto BSP_END
BScan_Powered_Shorts_start = msec
call BScan_Powered_Shorts_Tests (Failed_In_Shorts, Mode$ & BScanPShortsMsg$)
if boardfailed then
  call Disconnect_Power_On_Board
  call Out_Second_Stage
  subexit
  Custom_failed = 1
  clear failures
end if
BScan_Powered_Shorts_end = (msec-BScan_Powered_Shorts_start)/1000
BSP_END:

BSI:  if BSI_TEST = 0 then goto BSI_END
BScan_Interconnect_start = msec
call BScan_Interconnect_Tests (Failed_In_BScan, Mode$ & BScanIntconMsg$)
if boardfailed then
  call Disconnect_Power_On_Board
  call Out_Second_Stage
  subexit
  Custom_failed = 1
  clear failures
end if
BScan_Interconnect_end = (msec-BScan_Interconnect_start)/1000
BSI_END:

!If you:
!       * use both ScanWorks and 3070 InterconnectPlus chain tests
! AND   * comment out any 3070 interconnect tests (e.g. duplicate coverage)
! AND   * those commented tests have unnailed nodes (possible undetected shorts)
!THEN   * Move the following BScan_Incircuit_Tests routine below the ScanWorks
!               Interconnect_Tests call

!Reason: an interconnect test, which finds shorts, should be run on each chain prior to
!the BScan_Incircuit_Tests routine.  The connect tests give precise opens diagnostics,
!but board damage from undetected shorts could occur while they are being run.

BSC:  if BSC_TEST = 0 then goto BSC_END
Bscan_incircuit_start = msec
call BScan_Incircuit_Tests (Failed_In_BScan, Mode$ & BScanIncktMsg$)
if boardfailed then
  call Disconnect_Power_On_Board
  call Out_Second_Stage
  subexit
  Custom_failed = 1
  clear failures
end if
Bscan_incircuit_end = (msec-Bscan_incircuit_start)/1000
BSC_END:

SWI:  if SWI_TEST = 0 then goto SWI_END
call ScanWorks_Interconnect_Tests (Failed_In_SW_Testing, Mode$ & SW_InterconnectMsg$)
if boardfailed then
  call Disconnect_Power_On_Board
  call Out_Second_Stage
  subexit
  Custom_failed = 1
  clear failures
end if
SWI_END:

BSS:  if BSS_TEST = 0 then goto BSS_END
call BScan_Silicon_Nails_Tests (Failed_In_BScan_SiNails, Mode$ & BScanSiNailsMsg$)
if boardfailed then
  call Disconnect_Power_On_Board
  call Out_Second_Stage
  subexit
  Custom_failed = 1
  clear failures
end if
BSS_END:


DIG:  if DIG_TEST = 0 then goto DIG_END
Digital_start = msec
call Digital_Tests (Failed_In_Digital, Mode$ & DigitalMsg$)
if boardfailed then
  call Disconnect_Power_On_Board
  call Out_Second_Stage
  subexit
  Custom_failed = 1
  clear failures
end if
Digital_end = (msec-Digital_start)/1000
DIG_END:

ANAF:  if ANAF_TEST = 0 then goto ANAF_END
Analog_functional_start = msec
call Analog_Functional_Tests (Failed_In_Functional, Mode$ & AnalogPoweredMsg$)
if boardfailed then
  call Disconnect_Power_On_Board
  call Out_Second_Stage
  subexit
  Custom_failed = 1
  clear failures
end if
Analog_functional_end = (msec-Analog_functional_start)/1000
ANAF_END:


FUNCT:  if FUNCT_TEST = 0  then goto FUNCT_END
Functional_start = msec
call Functional_Tests (Failed_In_Functional, Mode$ & DigitalFuncMsg$)
if boardfailed then
  call Disconnect_Power_On_Board
  call Out_Second_Stage
  subexit
  Custom_failed = 1
  clear failures
end if
Functional_end = (msec-Functional_start)/1000
FUNCT_END:

SWV:  if SWV_TEST = 0 then goto SWV_END
call ScanWorks_Scan_Path_Verify_Tests (Failed_In_SW_Testing, Mode$ & SW_ScanPathVerifyMsg$)
if boardfailed then
  call Disconnect_Power_On_Board
  call Out_Second_Stage
  subexit
  Custom_failed = 1
  clear failures
end if
SWV_END:

SWP:  if SWP_TEST = 0 then goto SWP_END
call ScanWorks_Pretest
if boardfailed then
  call Disconnect_Power_On_Board
  call Out_Second_Stage
  subexit
  Custom_failed = 1
  clear failures
end if
SWP_END:

! If you are using Boundary-Scan and you want to cycle power,
! then uncomment the following call.
! call Reset_Board


SWM:  if SWM_TEST = 0 then goto SWM_END
call ScanWorks_Mem_Interconnect_Tests (Failed_In_SW_Testing, Mode$ & SW_MemInterconnectMsg$)
if boardfailed then
  call Disconnect_Power_On_Board
  call Out_Second_Stage
  subexit
  Custom_failed = 1
  clear failures
end if
SWM_END:

SWC:  if SWC_TEST = 0 then goto SWC_END
call ScanWorks_Cluster_Tests (Failed_In_SW_Testing, Mode$ & SW_ClusterMsg$)
if boardfailed then
  call Disconnect_Power_On_Board
  call Out_Second_Stage
  subexit
  Custom_failed = 1
  clear failures
end if
SWC_END:

SWB:  if SWB_TEST = 0 then goto SWB_END
call ScanWorks_Mem_BIST (Failed_In_SW_Testing, Mode$ & SW_MemBistMsg$)
if boardfailed then
  call Disconnect_Power_On_Board
  call Out_Second_Stage
  subexit
  Custom_failed = 1
  clear failures
end if
SWB_END:

! If you are using Boundary-Scan and you want to cycle power,
! then uncomment the following call.
! call Reset_Board

if Programming then
  if learning then subexit

  !----------------------------------------------------------------------------
  ! Only add the following powersupply setup if it is necessary to cycle power.
  ! Perhaps to get FPGAs or other ASICs to a three-state condition.
  !
  !    !flash! unpowered  ! Only if volatile logic exists upstream
  !
  !    !flash!  put any required gprelays here
  !
  !    !flash!  powered    ! if unpowered above, also use the following only if
  !                        ! digital devices aren't interferring
  !    ! call Setup_Power_Supplies (Failed_In_Power_Supplies, PowerMsg$)
  !    ! if boardfailed then
  !    !    call Disconnect_Power_On_Board
  !    !    subexit
  !    ! end if
  !----------------------------------------------------------------------------
  ! Add the device name to be tested in the call to the Program_Flash
  ! subroutine. If multiple devices are installed, duplicate the call line for
  ! each device.  Pass an empty string as the Message$ parameter to supress
  ! printing messages for devices 2 through N.
  !----------------------------------------------------------------------------

  ! call Program_Flash ("", Failed_In_Flash, FlashProgMsg$)
  if boardfailed then
!    call Disconnect_Power_On_Board
!    subexit
    Custom_failed = 1
    clear failures
  end if

SWD:  if SWD_TEST = 0 then goto SWD_END
  call ScanWorks_Device_Programming (Failed_In_SW_Programming, SW_ProgrammingMsg$)
  if boardfailed then
!    call Disconnect_Power_On_Board
!    subexit
    Custom_failed = 1
    clear failures
  end if
SWD_END:

SWF:  if SWF_TEST = 0 then goto SWF_END
  call ScanWorks_Flash_Programming (Failed_In_SW_Flash, SW_FlashMsg$)
  if boardfailed then
!    call Disconnect_Power_On_Board
!    subexit
    Custom_failed = 1
    clear failures
  end if
end if
SWF_END:

NVRAM:  if NVRAM_TEST = 0 then goto NVRAM_END
print tab(5);"Programming IDROM"
!call Program_IDROM_with_KGB_PCAMAP
if boardfailed then
  Custom_failed = 1
  clear failures
end if
NVRAM_END:

Disconnect_Power_start = msec
call Disconnect_Power_On_Board
Disconnect_Power_end = (msec-Disconnect_Power_start)/1000
call Out_Second_Stage

!if Using_IYET then
 !  call IYET (ShortsMsg$, IYET_Shorts_Attempts)
!else
!   call Shorts (Failed_In_Shorts, Mode$ & ShortsMsg$)
!end if
!if boardfailed then subexit

! call Shorts (Failed_In_Shorts, Mode$ & ShortsMsg$)
!if boardfailed then subexit  !030104

TEST_END:  !030104

!-030104S
!Status = Passed
!-030104E
!+030104S
if Custom_failed then
  fail device
  subexit
else
  Status = Passed
end if
!+030104E

subend

!       Pin Test Subroutines

!##############################################################################
def fn Chek_Point_OK
! This is the subroutine for forcing the testing of pin contacts.
! If this routine is called before Test_sections (Chek_Point_Mode = Pretest),
! then the internal status will be set to Passed or Failed_Pin_Test.
! If this routine is called after test (Chek_Point_Mode = Failures), then the
! internal status is modified only if failures occur.
!
! The meaning of the function is slightly different when it is called before
! test versus after test.  If called before test, the function returns True
! if, no matter how many times it was cycled, pin test did finally pass.
! If called after test, the function returns True if pin test failed but
! passed after retry.
!
! Note: fn Pinsfailed is external to testmain.
!
global Pin_Msg$, Passed, Chek_Point_Msg$
global Retry_PinTest$, Recycle_Vacuum$, Status, True, False
global Cycle_Vacuum$, Failed_Pin_Test, Max_Times_To_Fix_Contact
global Logging, Serial$, Known_Good$, Chek_Point_Mode, Pretest, Failures

if learning then return (False)
Attempts = 0
loop
  Contact_Passed = not fn Pinsfailed (Chek_Point_Msg$)
  if not Contact_Passed then
    Status = Failed_Pin_Test
  else
    if Chek_Point_Mode = Pretest then Status = Passed
  end if
  Attempts = Attempts + 1
  exit if Contact_Passed or (Attempts > Max_Times_To_Fix_Contact)
  print Pin_Msg$
!~question Retry_PinTest$, Retry
!~exit if not Retry
!@if Logging and Chek_Point_Mode = Pretest then
!@  if Status = Failed_Pin_Test then log board end Failed_Pin_Test
!@end if
!~question Cycle_Vacuum$, Cycle
!~if Cycle then
    faoff 2.0
!~  question Recycle_Vacuum$
    call Counter | faon 1.5
! Warning: Reducing the value for 'faon' from the default value of 1.5
! can potentially cause testhead damage.
    unpowered
!~end if
  if Chek_Point_Mode = Pretest then
    clear failures
    report clear
    log clear
    call Start_Logging
!@  if Logging then log board start Serial$, Known_Good$
  end if
end loop
if Chek_Point_Mode = Failures then
  if Contact_Passed and Attempts > 1 then
    if Logging then
      log clear for retest
      log board end Failed_Pin_Test
    end if
    clear failures
    report clear
  end if
  return (Contact_Passed and Attempts > 1)
else
  return (Contact_Passed)
end if
fnend

!       Reset_Board Subroutine

!##############################################################################
sub Reset_Board
   !---------------------------------------------------------------------------
   ! This 'pause' section is placed here to remind the test programmer
   ! that some powered tests may depend upon the TCK/TMS signals of
   ! boundary scan chains/devices being held in a stable state.
   ! When the testplan is run, the tests are properly sequenced
   ! to assure that the disabled state is set; however, board level
   ! circuitry may interfere with the persistence of the disabled state.
   ! You may need to take additional measures; for example, you may
   ! place your own pullup/down resistor in the fixture to assure a
   ! stable TMS and/or TCK, or utilize a GP relay to disable some TCK
   ! oscillator, etc.
   ! For further explanation, see the Boundary-Scan Manual for the
   ! section titled 'Maintaining Persistence of Boundary-Scan Disables'.
   !
   !---------------------------------------------------------------------------
   ! When Boundary-Scan tests are complete, you may need to produce
   ! a hard reset on the board-under-test to bring the ICs back into
   ! operational mode.  One way of doing this is to cycle power to the
   ! board using the following call:

   call Cycle_Power_On_Board ! Cycle Power to reset digital state of board
   ! call ScanWorks_Pretest    ! Configure volatile devices, if needed

   ! Power cycling is time consuming and may not be necessary.  Some boards
   ! may not need any resetting.  Others may have a digital reset node
   ! you can toggle with a digital test to reset the board.
   !
   ! When you have evaluated the needs of this board and modified this
   ! section, remove the pause and these comments.  You should take care
   ! to document the action you have taken for future reference.
   !---------------------------------------------------------------------------
subend

!       Backtrace Subroutine

!##############################################################################
sub Backtrace (Test$)
global Confirming$, Confirm_Failed$

find start node Test$     ! get first node to probe
loop
  exit if btdone
  if (external test (btnode$)) then ! perform external test
    call External_Test (BT_Pass, BT_Results)
  else
    test node btnode$   ! perform digital functional test
    BT_Pass = nodepass
    BT_Results = noderesults
    call Print_Results (BT_Pass, BT_Results)
  end if
  find next node btnode$, BT_Pass, BT_Results  ! next node to probe
  if btconfirm then      ! confirm the diagnosis
    find next node btnode$, BT_Pass, BT_Results, confirm
    print Confirming$
  end if
  if btreset then        ! restart from new failing node
    find next node btnode$, BT_Pass, BT_Results, reset
    print Confirm_Failed$ & btnode$ & """"
  end if
end loop
make diagnosis  ! report failed node information
subend

!       Sample External Test Subroutine for Backtracing

!##############################################################################
sub External_Test (BT_Pass, BT_Results)
! Sample external test
! Perform test as needed based on value of BT_Key$
! Set Pass=1 for pass or Pass=0 for fail
! Results must be -150000 for an external test
BT_Key$ = exttest$
BT_Pass = 1
BT_Results = -150000
subend

!       Decode and print backtrace node test results

!##############################################################################
sub Print_Results (BT_Pass, BT_Results)
global BT_Passed$, BT_SR_Fail$, BT_CRC_Fail$, BT_Notest$, BT_Indeter$
global BT_Interm$, BT_Incons$, BT_Open$, BT_NResults$

BT_Node$ = "node """ & btnode$ & """"
if BT_Pass then  ! node passed
  print BT_Node$; tab(23); BT_Passed$
else
  if BT_Results > 0 then  ! node failed SR test
    print BT_Node$; tab(23); BT_SR_Fail$; BT_Results
  else
    if BT_Results <= 0 and BT_Results >= -65535 then ! node failed CRC test
      call Decode_crc ( -BT_Results, BT_Crc$ )
      print BT_Node$; tab(23); BT_CRC_Fail$; BT_Crc$; """"
    else
      if BT_Results = -100000 then  ! node not tested
        print BT_Node$; tab(23); BT_Notest$
      else
        if BT_Results = -160000 then  ! node was indeterminate
          print BT_Node$; tab(23); BT_Indeter$
        else
          if BT_Results = -200005 then  ! node was intermittent
            print BT_Node$; tab(23); BT_Interm$
          else
            if BT_Results = -200006 then  ! node was inconsistent
              print BT_Node$; tab(23); BT_Incons$
            else
              if BT_Results = -200010 then  ! node has an open trace
                print BT_Node$; tab(23); BT_Open$
              else
                print BT_Node$; tab(23); BT_NResults$; BT_Results
              end if ! BT_Results = -200010
            end if ! BT_Results = -200006
          end if ! BT_Results = -200005
        end if ! BT_Results = -160000
      end if ! BT_Results = -100000
    end if ! BT_Results < 1 and BT_Results > -100000
  end if ! BT_Results > 0
end if ! BT_Pass
subend

!       Format a 16 bit crc value to an ASCII CRC

!##############################################################################
sub Decode_crc (BT_Value, BT_Crc$)
option bit 32
BT_Crc$ = "0000"
BT_Temp = binand (BT_Value, hti("0000000F"))
BT_Crc$[4;1] = chr$(fn HexChar(BT_Temp))
BT_Temp = binand (BT_Value, hti("000000F0")) / 16
BT_Crc$[3;1] = chr$(fn HexChar(BT_Temp))
BT_Temp = binand (BT_Value, hti("00000F00")) / 256
BT_Crc$[2;1] = chr$(fn HexChar(BT_Temp))
BT_Temp = binand (BT_Value, hti("0000F000")) / 4096
BT_Crc$[1;1] = chr$(fn HexChar(BT_Temp))
subend

!       Build a hex character

!##############################################################################
def fn HexChar (A)
if A >= 0 and A < 10 then
  return (A + 48)
else
  if A >= 10 and A < 16 then
    return  (A + 87)
  else
    return 63
  end if
end if
fnend

!       Data Logging Subroutines

!##############################################################################
sub Start_Logging
global Analog_Sample_Rate, QSTATS_Mode, Histo, Board$, Tests_On_This_Board
global Sampling, True, False
global Proc_Step$, Batch$, Oper$, Board_Rev$, Testplan$
global Testrev$, Known_Good$, Serial$, Version_Label$
global TSerial1$,TSerial2$,TPart1$,TPart2$, Serialnumber1$, Serialnumber2$
global Partnumber1$,Partnumber2$,PSerial$
global FixID$ ,Fix_Type$, Model_Type$, Rfid$, Serial_golden$


TSerial1$ = Serialnumber1$
TSerial2$ = Serialnumber2$
TPart1$ = Partnumber1$
TPart2$ = Partnumber2$

Sampling = False
if learning then
  log level is all
else
  if rnd < Analog_Sample_Rate * (QSTATS_Mode = Histo) then
   !S log level is analog without nhls, pins
    log level is all
    Sampling = True
  else
   !S log level is indictments without nhls
     log level is all
  end if
end if
print "Log level: ";lli$;";  Report level: ";rli$;";  Board type: ";Board$
PS$ = Proc_Step$
if Tests_On_This_Board = 1 then
log board Board$, PS$, Batch$, Oper$, Board_Rev$, Testplan$, Testrev$, "", "",Rfid$

end if
log board start Serial$, Known_Good$
log "{@PMID|"&Fix_Type$&"}"
log "{@Name|"&Model_Type$&"}"

if Serial_golden$ = "unidad golden" then
log "{@Golden|"&Serial_golden$&"}"
end if

print
subend
!##############################################################################
def fn Get_Serial_Num$(Prompt$)
global Bad_Serial_Image$, Default_Serial_Number$
global Serial_Length, Using_BtBasic
global Black$, Serial_golden$, Cyan$

Denew:
Ciscobar:
Serial_golden$ = ""
print |print
print Black$&"PORFAVOR ESCANEA EL S/N DE LA TARJETA"
Escaneo_start=msec
input OEMSerial$
OEMSerial$ = trim$(upc$(OEMSerial$))



if OEMSerial$ = "GOLDEN" then
print using "@"
Serial_golden$ = "unidad golden"
print tab(24),Black$&"TARJETA EN MODO GOLDEN"
print tab(15),Black$&"ESCANEA EL S/N PARA PROBARLA EN MODO GOLDEN"
input OEMSerial$
OEMSerial$ = trim$(upc$(OEMSerial$))
end if

Escaneo_end=(msec-Escaneo_start)/1000

if Escaneo_end > 5 and Serial_golden$ <> "unidad golden" then
   print ""
   print Black$&"DEMASIADO TIEMPO PONIENDO EL SERIAL, USA EL ESCANER"
   print Cyan$&"TIEMPO:";Escaneo_end,"sec"
   print""
   Escaneo_end = 0
   goto Denew
end if


if OEMSerial$[1;3] <> "FLM" or len(OEMSerial$) <> Serial_Length  then
   print Red_reset$&"NUMERO DE SERIE NO VALIDO, VERIFICA Y ESCANEA DE NUEVO"
   goto Ciscobar
end if

OEMSerial$ = trim$(upc$(OEMSerial$))
Ident$=OEMSerial$
return (Ident$)
fnend
!##############################################################################
!  If the Board name contains any invalid characters, stop processing.
sub Verify_Board_Names
global Stop_Msg$, Bad_Board_Name$, Board$

Found_Bad = 0
if fn IllegalChars_In_Board_Name(Board$) then
  Found_Bad = 1
  print Bad_Board_Name$  |   print "    ";Board$
end if
if Found_Bad then
  print | print Stop_Msg$
  beep
  stop
end if
subend

!##############################################################################
! Check to see if the Board name contains any invalid characters, now only
! check spaces.  Return 1 if yes, and 0 if no.
def fn IllegalChars_In_Board_Name (Board$)
global True, False

if len (Board$) > 0 and pos (Board$, " ") > 0  then
  return True
else
  return False
end if
fnend

!##############################################################################
sub Create_Log_Queue
global Log_Path$, Directory_Exists, Queue_Error_Msg$, Stop_Msg$

create dir Log_Path$, Err
Err = Err and (Err <> Directory_Exists)
if Err then
  print Queue_Error_Msg$  |   print "    ";errm$
  print | print Stop_Msg$
  beep
  stop
end if
subend

!##############################################################################
sub Setup_Logging
global Serial$, Default_Serial_Number$, Testplan$, Batch$
global Known_Good_Board$, Using_ART, Proc_Step$, Oper_Id_Prompt$
global Board$, Oper$, Known_Good_Prompt$
global Serializing,Using_BtBasic

randomize
Proc_Step$             = "btest"
Batch$                 = datetime$ ! Set to a unique identifier so that Q-STATS II can
                                   ! calculate interboard handling and system idle times
Testplan$              = Board$
Default_Serial_Number$ = "default_SN" & th$
Serial$                = Default_Serial_Number$
Known_Good_Board$      = ""
Oper$                  = ""
!@if Using_ART then
!@  print using """"&Oper_Id_Prompt$&""",#"
!@  input "",Oper$
!@end if
!if Serializing then Known_Good_Board$ = fn Get_Serial_Num$(Known_Good_Prompt$)
!@if Serializing then  !070804
!#  Known_Good_Board$ = fn Get_Serial_Num$(Known_Good_Prompt$)
!#   loop
!#      Known_Good_Board$ = fn Get_Serial_Num$(Serial_Prompt$)
!#      Known_Good_Board$ = upc$(Known_Good_Board$)
!#      exit if fn Validate_SN(Known_Good_Board$)
!#      print
!#      print "ERROR: Invalid Serial Number!!!!!"
!#      if len(Known_Good_Board$) = 11 or len(Known_Good_Board$) = 20 then
!#         print "Must be LLLYYWWSSSS, where:"
!#!        print "   LLL is Location, base 34, alpha/numeric, no I and O"
!#         print "   LLL is Location, base 36, alpha/numeric"  !052907
!#         print "   YYWW is Year and Workweek, base 10, numeric"
!#!        print "   SSSS is Serial Id, base 34, alpha/numeric, no I and O"
!#         print "   SSSS is Serial Id, base 36, alpha/numeric"  !052907
!#      else
!#         if len(Known_Good_Board$) = 8 then
!#            print "Must be alpha/numeric ONLY"
!#         end if
!#      end if
!#      print
!#   end loop
!@end if
subend

!       Initialization Subroutines

!##############################################################################
sub Initializations
! IYET
global Using_IYET

global Logging, Using_Buffered_Reporting, Report_Printer$, Using_ART
global Serializing, Logging_Started, First_Run$, Testmain_Revision$
global Did_First_Run_Inits, QSTATS_Mode
global True, False, Off, No_Histo, Histo, Pretest, Failures
global Version_Inits_Needed, Using_Multiple_Versions
global Per_Run, Per_Board, Version_Prompting
global Using_AwareTest
global Red$, Blue$, Yellow$, Green$, Black$, Cyan$
global Using_WPR

global Using_LogTime

!+030104S
global Print_to_file
global Aware_fail_report
!+030104E

Testmain_Revision$="3070 05.30p 0603(full)"
True = 1
False = 0
Off = 0
No_Histo = 1
Histo = 2
Pretest = 1
Failures = 2
Per_Run = 1
Per_Board = 2
Version_Inits_Needed = False

!***************************** add Flex ***************************************!
Esc$         = chr$(27)&chr$(38) !escape &
White$       = Esc$&"v0S"     !selects color white
Red_reset$   = Esc$&"v0m1a1I" !redfines red color pen back to it's default state
Red$         = Esc$&"v1S"     !selects color red
Green_reset$ = Esc$&"v0m1b2I" !redfines green color pen back to default state
Green$       = Esc$&"v2S"     !selects color green
Yellow$      = Esc$&"v3S"     !selects color yellow
Blue$        = Esc$&"v4S"     !selects color blue
Magenta$     = Esc$&"v5S"     !selects color magenta
Cyan$        = Esc$&"v6S"     !selects color cyan
Black$       = Esc$&"v7S"     !selects color black highlighted by yellow
Uline$       = Esc$&"dD"      !selects underline
Invideo$     = Esc$&"dB"      !selects inverse video
Col$         = Esc$&"a"      !column escape sequence---to go to a certain column
                             !use syntax Col$&"10C"---will go to column 10
Row$         = Esc$&"a"      !row escape sequence---to go to a certain row
                             !use syntax Row$&"10Y"---will go to row 10
YesNo$ = "Answer by Pressing  "&Green$&" YES(F2) "&White$&" OR "&Red$&" NO(F3)"
Stat$ = "ICT Workcenter"
!******************************** add Flex ************************************!

call Set_Custom_Options
call Initialize_Board_Constants ! external to testmain
call Initialize_Constants
call Verify_Board_Names
Logging_Started = False
Logging = (QSTATS_Mode <> Off) or Using_ART
if Using_ART then Serializing = True
if Using_AwareTest then Serializing = True

! call Get_Board_Revision        ! to interactively set Board_Rev$

call Print_Startup_Message       ! prints out many variables' values
acknowledge all failures
learn capacitance off
if Using_Buffered_Reporting then
  buffered reporting on
else
  buffered reporting off
end if

!-030104S
!report is Report_Printer$
!-030104E
!+030104S
if Print_to_file then
   if Aware_fail_report then
      report is Report_Printer$
   else
      report is Report_Printer$,window; append
   end if
else
   report is Report_Printer$
end if
!+030104E

printer is *
if Logging then
  call Setup_Logging
! call Create_Log_Queue
else
!Slog level is all  !log level is non  !changed by tool
  log level is all
end if
if Using_ART then
  report level is all
else
  report level is report
end if
if nrun = 1 then
  print First_Run$
  load board

!'object checking on/off' statement goes here. Default is 'on'
  object checking on
end if
if Using_Multiple_Versions and Version_Prompting = Per_Run then
  call Get_Version_Label
end if
if nrun = 1 or Version_Inits_Needed then
  call Do_Version_Inits
  Did_First_Run_Inits=True
end if

! WPR
if Using_WPR then probe report on

! IYET
if Using_IYET then call IYET_Initialize


Using_LogTime = False


subend

!##############################################################################
sub Print_Startup_Message
! IYET
global Using_IYET, IYET_Report_On

global Board$, Board_Rev$, Using_ART, QSTATS_Mode, Histo
global Analog_Sample_Rate, Chek_Point_Mode, Failures
global Report_Printer$, Using_Buffered_Reporting, Testmain_Revision$
global Serializing, Serial_Length

!+030104S
global Print_to_file
global Question_to_print
global Continue_after_pins_failed
global Continue_after_shorts_failed
global Multiple_versions, Version_selected
global Fab$, Bom$
!+030104E

!-030104S
!print using "@,2/"
!-030104E
!+030104S
print using "@,1/"
!@execute "title " & "FAB#  " & Fab$ & "  ---  " & "BOM#  " & Bom$
!+030104E

print "BOARD TYPE"
print "  Name:     ";Board$
print "  Revision: ";Board_Rev$
print "AGILENT 3070 TESTMAIN"
print "  Report Printer: ";Report_Printer$
print "  Revision:       ";Testmain_Revision$
!   Build list of options to be printed
!     O1$ is first line, O2$ is second line
O1$ =  "  Options: "
if Using_ART then O1$=O1$&" PR+"
if QSTATS_Mode then O1$=O1$&" QSTATS"
if Chek_Point_Mode then
  O1$=O1$&" Chek-Point"
  if Chek_Point_Mode = Failures then
    O1$=O1$&"-Failures"
  else
    O1$=O1$&"-Pretest"
  end if
end if
if (O1$="  Options: ") then
  O2$=O1$
else
  print O1$
  O2$= "           "
end if
if Serializing then O2$=O2$&" Serializing("&val$(Serial_Length)&")"
if learning then O2$=O2$&" LEARNING"
if Using_Buffered_Reporting then O2$=O2$&" Buffered-Reporting"
if QSTATS_Mode = Histo then
  O2$=O2$&" Histograms("&val$(Analog_Sample_Rate)&")"
end if
if not (O2$ = "           ") then print O2$

!+030104S
print "CUSTOM RUN SELECTIONS"
if Print_to_file then
   print "  Buffer failures to file               : On"
else
   print "  Buffer failures to file               : Off"
end if
if Question_to_print then
   print "  Prompt to print failures to printer   : On"
else
   print "  Prompt to print failures to printer   : Off"
end if
if Continue_after_pins_failed then
   print "  Prompt to continue after pins failed  : On"
else
   print "  Prompt to continue after pins failed  : Off"
end if
if Continue_after_shorts_failed then
   print "  Prompt to continue after shorts failed: On"
else
   print "  Prompt to continue after shorts failed: Off"
end if

print using "2/"
!+030104E

!-030104S
!print using "3/"
!-030104E
! IYET
O3$=" "
if Using_IYET then
O3$=O3$&" Intelligent Yield Enhancement Test"
end if
print O3$
print using "2/"

subend

!##############################################################################
sub Get_Board_Revision
global Board_Rev$, Board_Rev_Prompt$

if Board_Rev$ = "" then
  print using """" & Board_Rev_Prompt$ & """,#"
  input "",Board_Rev$
end if
subend

!##############################################################################
sub Do_Version_Inits
global Version_Inits_Needed, Chek_Point_Mode, True, False, Off, Logging

unpowered
faoff
call Characterize
if Chek_Point_Mode <> Off then   ! preload pins into testhead memory
  Log_Level_Reset = False
  if lli$ = "all" then
    log level is none !log level is none            ! turn off digital dataloggin  !changed by too  !changed by tool
    Log_Level_Reset = True       ! for 'ignore all failures'
  end if
  ignore all failures
  Err = fn Pinsfailed ("")       ! external to testmain
  acknowledge all failures
  if Log_Level_Reset = True then log level is all  ! reset datalogging
end if
  log level is all
Version_Inits_Needed = False
subend

!##############################################################################
sub Get_Version_Label
global Version_Label$, Version_Prompt$, True, False
global Version_Inits_Needed

Old_Version$ = bvi$
Version_Inits_Needed = True
loop
  Version_Label$ = ""
  print using """" & Version_Prompt$ & """,#"
  input "", Version_Label$
  if Version_Label$ = "" or Version_Label$ = "*" then
    board version is *, Err
  else
    board version is Version_Label$, Err
  end if
  exit if not Err
  print errmlong$
end loop
if bvi$ = Old_Version$ then
  Version_Inits_Needed = False
end if
subend

!##############################################################################
def fn Replace_Character$(Char$)
  Val = num(Char$)
  if Val < 9 then
    String$ = "%00" & val$(Val)
  else
    if Val < 99 then
      String$ = "%0" & val$(Val)
    else
      String$ = "%" & val$(Val)
    end if
  end if
  return(String$)
fnend

def fn Replace_All_Chars$(String$, Char$)
To_Return$ = ""

String_Loop:

String_Loc = pos(String$, Char$)
if String_Loc = 0 then
  To_Return_New$ = To_Return$ & String$
else
  To_Return_New$ = To_Return$ & String$[1;String_Loc - 1] & fn Replace_Character$(Char$)
  String$ = String$[String_Loc + 1]
end if
To_Return$ = To_Return_New$
if String_Loc <> 0 then goto String_Loop
return(To_Return$)
fnend

def fn Remove_Special_Characters$(String$)
! used only with AwareTest.  Replaces all characters that cannot be
! used in an NT filename with their ASCII equivalent.

  To_Replace$ = fn Replace_All_Chars$(String$, "%")
  To_Replace$ = fn Replace_All_Chars$(To_Replace$, "|")
  To_Replace$ = fn Replace_All_Chars$(To_Replace$, "\")
  To_Replace$ = fn Replace_All_Chars$(To_Replace$, "/")
  To_Replace$ = fn Replace_All_Chars$(To_Replace$, "<")
  To_Replace$ = fn Replace_All_Chars$(To_Replace$, ">")
  To_Replace$ = fn Replace_All_Chars$(To_Replace$, "*")
  To_Replace$ = fn Replace_All_Chars$(To_Replace$, "?")
  To_Replace$ = fn Replace_All_Chars$(To_Replace$, ":")
  To_Replace$ = fn Replace_All_Chars$(To_Replace$, " ")
  To_Replace$ = fn Replace_All_Chars$(To_Replace$, """")
  return(To_Replace$)
fnend

!##############################################################################
sub Initialize_Constants
global PreshortsMsg$, ShortsMsg$, PowerMsg$, DigitalMsg$, AnalogMsg$
global DigitalFuncMsg$, AnalogPoweredMsg$
global Break_Detected, Mode$, Board_Not_Tested$
global True, False, InvOn$, InvOff$, First_Run$, Board_Rev_Prompt$
global Pass_Msg$, Fail_Msg$, Pass_File$, Fail_File$, Stop_Msg$, Break_Msg$
global No_Init_Warning$, Rep_Test$, Place_Board_Prompt$, Learning_Off_Msg$
global BT_Passed$, BT_SR_Fail$, BT_CRC_Fail$, BT_Notest$, BT_Indeter$
global BT_Interm$, BT_Incons$, BT_Open$, BT_NResults$
global Confirming$, Confirm_Failed$
global Failed_In_Learn, Failed_Pin_Test, Failed_In_Preshorts, Failed_In_Shorts
global Failed_In_Analog, Failed_In_Power_Supplies, Failed_In_Digital
global Failed_In_Functional, Failed_In_BScan, Passed, Failed
global Directory_Exists, Log_Path$, System$, Queue_Error_Msg$, Board$
global Break_Code, Error_Code
global But$, Serial_Prompt$, Bad_Serial_Image$, Oper_Id_Prompt$
global Known_Good_Prompt$, Serial_Nr$
global Retry_PinTest$, Cycle_Vacuum$, Recycle_Vacuum$
global Pin_Msg$, Max_Times_To_Fix_Contact
global BScanIntconMsg$, BScanIncktMsg$, Chek_Point_Msg$
global TestJetMsg$, Failed_In_TestJet
global PolarityMsg$, Failed_In_Polarity_Check
global BScanPShortsMsg$, No_Version_Init_Warning$
global Version_Label$, Version_Prompt$, PrePoweredTestMsg$
global ConnectCheckMsg$, Failed_In_ConnectCheck
global Failed_In_Flash, FlashProgMsg$
global Serial_Number_Directory$, Not_AXI_Tested$, Serial_Suffix$
global AnalogClusterMsg$, Failed_In_Analog_Cluster
global BScanSiNailsMsg$, Failed_In_BScan_SiNails
global SW_ScanPathVerifyMsg$, Failed_In_SW_Testing
global SW_DrVerifyMsg$, SW_IrVerifyMsg$
global SW_InterconnectMsg$, SW_MemInterconnectMsg$
global SW_ClusterMsg$, SW_MemBistMsg$
global SW_ProgrammingMsg$, Failed_In_SW_Programming
global SW_FlashMsg$, Failed_In_SW_Flash
global Bad_Board_Name$
global VectorlessTestMsg$, Failed_In_VectorlessTest
global Long_Pin_Msg$,Failed_Long_Pin_Test, IYET_PinLong_Attempts

!+030104S
global Aware_fail_report
!+030104E
!#######################################################################
global Ten$, Twenty$, Thirty$, Fourty$, Fifty$, ProgFailMsg$
global Sixty$, Seventy$, Eighty$, Ninety$, Hundred$, Zero$
global Esc$, Uline$, Invideo$, Col$, Row$, YesNo$, White$, Stat$
global Red$, Green$, Yellow$, Blue$, Magenta$, Cyan$, Black$
global Red_reset$, Green_reset$


Esc$         = chr$(27)&chr$(38) !escape &
White$       = Esc$&"v0S"     !selects color white
Red_reset$   = Esc$&"v0m1a1I" !redfines red color pen back to it's default state
Red$         = Esc$&"v1S"     !selects color red
Green_reset$ = Esc$&"v0m1b2I" !redfines green color pen back to default state
Green$       = Esc$&"v2S"     !selects color green
Yellow$      = Esc$&"v3S"     !selects color yellow
Blue$        = Esc$&"v4S"     !selects color blue
Magenta$     = Esc$&"v5S"     !selects color magenta
Cyan$        = Esc$&"v6S"     !selects color cyan
Black$       = Esc$&"v7S"     !selects color black highlighted by yellow
Uline$       = Esc$&"dD"      !selects underline
Invideo$     = Esc$&"dB"      !selects inverse video
Col$         = Esc$&"a"      !column escape sequence---to go to a certain column
                             !use syntax Col$&"10C"---will go to column 10
Row$         = Esc$&"a"      !row escape sequence---to go to a certain row
                             !use syntax Row$&"10Y"---will go to row 10
Zero$        = "[                    ]  0%"
Ten$         = "[||                  ] 10%"
Twenty$      = "[||||                ] 20%"
Thirty$      = "[||||||              ] 30%"
Fourty$      = "[||||||||            ] 40%"
Fifty$       = "[||||||||||          ] 50%"
Sixty$       = "[||||||||||||        ] 60%"
Seventy$     = "[||||||||||||||      ] 70%"
Eighty$      = "[||||||||||||||||    ] 80%"
Ninety$      = "[||||||||||||||||||  ] 90%"
Hundred$     = "[||||||||||||||||||||] 100%"

Using_BtBasic = True
if localizable then Using_BtBasic = False

if Using_BtBasic then
  InvOn$                 = chr$(27)&"&dB"&chr$(7)  ! chr$(7) rings bell
  InvOff$                = chr$(27)&"&d@"
else
  InvOn$                 = "<FONT COLOR=blue SIZE=+2><B>"
  InvOff$                = "</B></FONT>"
end if

!#######################################################################
Break_Detected           = False
InvOn$                   = chr$(27)&"&dB"&chr$(7)  ! chr$(7) rings bell
InvOff$                  = chr$(27)&"&d@"
Passed                   = 0
Failed                   = 1
Failed_Pin_Test          = 2
Failed_Long_Pin_Test     = 22
Failed_In_Learn          = 3
Failed_In_Shorts         = 4
Failed_In_Analog         = 6
Failed_In_Power_Supplies = 7
Failed_In_Digital        = 8
Failed_In_Functional     = 9
Failed_In_Preshorts      = 10
! Status codes 11, 12 reserved for use by EFS
Failed_In_BScan          = 8      ! Equate to Failed_In_Digital
Failed_In_TestJet        = 14
Failed_In_VectorlessTest = 14
Failed_In_Polarity_Check = 15
Failed_In_ConnectCheck   = 16
Failed_In_Analog_Cluster = 17
Failed_In_Flash          = 18
Failed_In_BScan_SiNails  = 19
Failed_In_SW_Testing     = 8      ! Equate to Failed_In_Digital
Failed_In_SW_Programming = 20
Failed_In_SW_Flash       = 21
Error_Code               = 80
Break_Code               = 82
Directory_Exists         = 100312
Log_Path$                ="Z:\"
!@Log_Path$                = btgetenv$("AGILENT3070_ROOT")&"/qm/logdata/testerq/"&Board$&"/"
enter "uname -n |";System$              ! gets hostname (without domain)
System$ = lwc$(System$)
Max_Times_To_Fix_Contact = 4            ! MUST BE >= 1
Pin_Msg$                 = "FIXTURE CONTACT PROBLEM"
O$                       = InvOn$&"Press YES"&InvOff$
O$                       = O$&" to retry Pins Test, "&InvOn$&"NO"&InvOff$
Retry_PinTest$           = O$&" to test a new board."
O$                       = InvOn$&"Press YES"&InvOff$&" to cycle vacuum, "
Cycle_Vacuum$            = O$&InvOn$&"NO"&InvOff$&" Otherwise."
O$                       = InvOn$&"Press YES"&InvOff$
Recycle_Vacuum$          = O$&" to turn vacuum on and continue testing."
Queue_Error_Msg$         = "Cannot create directory to queue up log data.  Error is:"
But$                     = "Board Under Test: "
Serial_Prompt$           = InvOn$&"Enter"&InvOff$&" Board Identifier: "
O$                       = "/,""Identifier has wrong length ("",dd,""), must be "
Bad_Serial_Image$        = O$&""",dd,""."",/"
Oper_Id_Prompt$          = InvOn$&"Enter"&InvOff$&" Operator Identifier: "
Known_Good_Prompt$       = InvOn$&"Enter"&InvOff$&" Verification Board Identifier: "
Rep_Test$                = "Repeating test of this board!"
First_Run$               = "Please stand by -- doing first-run initializations"
No_Init_Warning$         = "** WARNING: FIRST RUN INITIALIZATIONS NOT COMPLETED --"
No_Init_Warning$         = No_Init_Warning$ & " CLEARING NRUN **"
O$                       = "** WARNING: VERSION CHANGE INITIALIZATIONS NOT"
No_Version_Init_Warning$ = O$ & " COMPLETED -- CLEARING NRUN **"
Pass_File$               = btgetenv$("AGILENT3070_ROOT")
Fail_File$               = btgetenv$("AGILENT3070_ROOT")
if Pass_File$ = "" then Pass_File$ = btgetenv$("I3070_ICT_ROOT")
if Fail_File$ = "" then Fail_File$ = btgetenv$("I3070_ICT_ROOT")
Pass_File$               = Pass_File$ & "/util/pass"
Fail_File$               = Fail_File$ & "/util/fail"
Board_Not_Tested$        = "Board not tested."
Pass_Msg$                = "P A S S E D"
Fail_Msg$                = "F A I L E D"
Stop_Msg$                = "P R O G R A M   S T O P P E D"
Break_Msg$               = "Break/Stop detected."
Place_Board_Prompt$      = "Place board on fixture and "&InvOn$&"press START"
Board_Rev_Prompt$        = InvOn$&"Enter"&InvOff$&" Board Revision: "
Confirming$              = "Confirming diagnosis..."
Confirm_Failed$          = "Confirm failed; restarting at node """
Learning_Off_Msg$        = "Learning turned off"
if learning then
  Mode$                  = "Learning "
else
  Mode$                  = "Testing "
end if
Long_Pin_Msg$            = "Long Pin Contact"
PreshortsMsg$            = "Preshorts"
ShortsMsg$               = "Shorts"
PowerMsg$                = "Setting Up Power Supplies"
DigitalMsg$              = "Digital Incircuit"
AnalogMsg$               = "Analog Unpowered"
AnalogClusterMsg$        = "Analog Cluster"
PrePoweredTestMsg$       = "Pre Powered Analog"
TestJetMsg$              = "TestJet"
VectorlessTestMsg$       = "VectorlessTest"
PolarityMsg$             = "Polarity Check"
ConnectCheckMsg$         = "Connect Check"
DigitalFuncMsg$          = "Digital Functional"
AnalogPoweredMsg$        = "Analog Powered and Mixed"
BScanIntconMsg$          = "Boundary Scan Interconnect"
BScanIncktMsg$           = "Boundary Scan Incircuit"
BScanPShortsMsg$         = "Boundary Scan Powered Shorts"
BScanSiNailsMsg$         = "Boundary Scan Silicon Nails"
FlashProgMsg$            = "Programming Flash"
SW_ScanPathVerifyMsg$    = "Scan Path Verify with ScanWorks"
SW_DrVerifyMsg$          = "DR Verify with ScanWorks"
SW_IrVerifyMsg$          = "IR Verify with ScanWorks"
SW_InterconnectMsg$      = "Interconnect with ScanWorks"
SW_MemInterconnectMsg$   = "Memory Interconnect with ScanWorks"
SW_ClusterMsg$           = "Cluster with ScanWorks"
SW_MemBistMsg$           = "Memory BIST with ScanWorks"
SW_ProgrammingMsg$       = "Programming Devices with ScanWorks"
SW_FlashMsg$             = "Programming Flash with ScanWorks"
Serial_Nr$               = "Serial #: "
BT_Passed$               = "passed"
BT_SR_Fail$              = "failed vector "
BT_CRC_Fail$             = "failed CRC is """
BT_Notest$               = "was not tested"
BT_Indeter$              = "was indeterminate"
BT_Interm$               = "was intermittent"
BT_Incons$               = "was inconsistent"
BT_Open$                 = "has an open trace"
BT_NResults$             = "noderesults= "
Chek_Point_Msg$          = "Testing Pin Contact"
Version_Label$           = ""
Version_Prompt$          = InvOn$&"Enter"&InvOff$&" Version Label: "
Serial_Number_Directory$ = "AXI_passed_boards/"
Serial_Suffix$           = ".SNF"
Not_AXI_Tested$          = "Board did not pass AXI; cannot test on Agilent 3070."
SNF_Error_Msg$           = "Error accessing serial number file. Error is: "
Bad_Board_Name$          = "Board name contains space, cannot proceed:"
Msg1$                    = "Flex Flow disable"
Msg2$                    = "Usuario no valido o password equivocado"
Msg_A$                   = "No puede probar"&" sin flujo"
Testt$                   = "GOL"&"DEN"


!+030104S
call Custom_Init
!+030104E

subend

!##############################################################################
sub Set_Custom_Options
global FirstPass ! Bill ! 1's pass board setting

! IYET
global Using_IYET, IYET_Shorts_Attempts, IYET_Analog_Tests_Attempts
global IYET_Report_On, IYET_TestJet_Attempts, IYET_Preshorts_Attempts
global IYET_PinLong_Attempts
global IYET_Polarity_Check_Attempts

!  All variables likely to need to be changed are initialized here.
!  The Usage flag(s) can be set True or False to selectively enable or
!  disable the code needed for each indicated subsystem or feature.
global Using_ART, QSTATS_Mode, Testrev$
global Analog_Sample_Rate
global Serializing, Serial_Length
global Chek_Point_Mode
global Report_Printer$, True, False, Using_Buffered_Reporting
global Off, Pretest, Failures, No_Histo, Histo
global Per_Run, Per_Board, Version_Prompting
global Programming, AXI_Tested_Override
global Autofile$, Using_WPR, Using_Stopline, Using_LogTime


!+030104S
global Print_to_file
!+030104E

!   Usage flag(s)

QSTATS_Mode               = Histo       ! Choose {Off, No_Histo, Histo}
!-030104S
Chek_Point_Mode           = Pretest     ! Choose {Off, Pretest, Failures}
!+030104E
Using_ART                 = True        ! Agilent Repair Tool.
Serializing               = True        ! Will get set True if Using_ART.
!-030104S
!sing_Buffered_Reporting  = True        ! Report failures during board handling
!-030104E
!+030104S
Using_Buffered_Reporting  = True        ! Report failures during board handling
!+030104E
Programming               = True        ! Execute Flash and device programming.

Using_IYET                = True        ! Agilent Intelligent Yield Enhancement
                                        ! Test (IYET)
IYET_Report_On            = False       !   Create & display report on breaks
IYET_Preshorts_Attempts   = 5           !   Preshorts re-test attempts
IYET_Shorts_Attempts      = 5           !   Shorts re-test attempts
IYET_Analog_Tests_Attempts= 5          !   Analog unp. re-test attempts
IYET_TestJet_Attempts     = 5           !   TestJet re-test attempts
IYET_Polarity_Check_Attempts = 1        !   Polarity re-test attempts
IYET_PinLong_Attempts     = 4           !   Long probe re-test attempts
Using_WPR                 = True     ! Agilent Worse Probe Report (WPR)
Using_Stopline            = False
Using_LogTime             = False

!   Other parameters

!!Report_Printer$           = btgetenv$("RPR"&th$) ! Final report destination
!Report_Printer$           = "/dev/tty"  ! Send reports to the screen
Testrev$                  = "RevA"      ! Update this faithfully
Analog_Sample_Rate        = .10         ! Meaningful if QSTATS_Mode = Histo
Serial_Length             = 11          ! Board Id Length (0 = no checking)
Version_Prompting         = Per_Board   ! Choose {Per_Board, Per_Run}
                                        ! Used only on multiple version board
AXI_Tested_Override       = False       ! Choose {True, False}
                                        ! Used only on AwareTest board
Autofile$                 = val$(autofile)   ! Fixture autofile


call Verify_Autofile

subend

!##############################################################################
sub Cleanup_Flash
global Logging, Report_level$

if Report_level$ = "all" then report level is all
if Report_level$ = "none" then report level is none
if Report_level$ = "log" then report level is log
if Report_level$ = "report" then report level is report
if Logging then
  call Set_Log_Level
end if
subend

!       Data Logging Subroutines

!##############################################################################
sub Set_Log_Level
global Sampling

if learning then
  log level is all
else
  if Sampling then
  !S log level is analog without nhls, pins
     log level is all
  else
  !S  log level is indictments without nhls
     log level is all
  end if
end if
subend

!##############################################################################
sub Custom_Init  !030104
global Fab$, Bom$, Board$, Board_Rev$, Board_Name$
global True,False
global Print_to_file
global Question_to_print
global Continue_after_pins_failed
global Continue_after_shorts_failed
global Print_board_msg
global Print_pass_ticket
global Report_Printer$
global SHO_TEST, PRES_TEST, TJ_TEST, ANA_TEST, POL_TEST
global CCHK_TEST, ANAC_TEST, PWR_TEST, REG_TEST, CPLD_TEST
global DIG_TEST, FUNCT_TEST, ANAF_TEST
global NVRAM_TEST, LED_TEST, PREP_TEST, PPRG_TEST
global BSP_TEST, BSI_TEST, BSC_TEST, BSS_TEST
global SWV_TEST, SWP_TEST, SWI_TEST, SWM_TEST
global SWC_TEST, SWB_TEST, SWD_TEST, SWF_TEST
global Fixture_size$
global Evaluation, Evaluation_runs
global Multiple_versions,Version_selected
global Aware_fail_report, Aware_bom_map$  !* CISCO_ICT_AWARE
global Act2EprPath$

!081704
global Bdg_Data_Dir$, Directory_Exists, Queue_Error_Msg$, Stop_Msg$, Eval_Rpt$
!081704

!------------------------------------------------------------------
! Set global board name and part numbers.
!------------------------------------------------------------------
!Board$      = "73-102931-01"
!Board_Rev$  = "C0"
Board_Name$ = "Superfuzz_AC"
Fab$        = "28-102746-01 Rev 03"
Bom$        = "73-102931-03 Rev 05"
!------------------------------------------------------------------
Act2EprPath$ = "F:\FRU_data\73-102931-XX"
!@Act2EprPath$ = "W:\ACT2_RECORD\" & Board_Name$ & "_" &  Board$ & "_" & Board_Rev$

!------------------------------------------------------------------
! Set test/debug options.
!------------------------------------------------------------------
Print_to_file                = False   !True=print to file.        !Debug
                                       !False=print to printer.    !Production
Question_to_print            = False   !True=prompt for printing.  !Debug
                                       !False=always print.        !Production
Continue_after_pins_failed   = False   !True=question to continue. !Debug
                                       !False=stop.                !Production
Continue_after_shorts_failed = False   !True=question to continue. !Debug
                                       !False=stop.                !Production
Print_board_msg              = True    !True=print.
                                       !False=don't print.
Print_pass_ticket            = False   !True=print.
                                       !False=don't print.
Evaluation                   = True    !True=evaluation run.
                                       !False=production run.
Evaluation_runs              = 10      !Number of test runs.
Fixture_size$                = "FULL"  !Choose {FULL, BANK2}
Multiple_versions            = False   !False=single verion.
                                       !True=mutiple versions.

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!Must set this variable to True for ICT Aware Testing...
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Aware_fail_report            = False   !True=print pn for refdes
                                       !False=print as normal
!------------------------------------------------------------------


!------------------------------------------------------------------
! Set global board name and part numbers for multiple versions.
!------------------------------------------------------------------
if Multiple_versions then
   call Select_version
   if Version_selected = 1111 then
      Bom$        = "73-1111-xx Rev xx"
      if Aware_fail_report then
         Aware_bom_map$ = ".73-1111-xx.AWAREBOMMAP"  !* CISCO_ICT_AWARE
      end if
   end if
   if Version_selected = 2222 then
      Bom$        = "73-2222-xx Rev xx"
      if Aware_fail_report then
         Aware_bom_map$ = ".73-2222-xx.AWAREBOMMAP"  !* CISCO_ICT_AWARE
      end if
   end if
end if
!------------------------------------------------------------------


!------------------------------------------------------------------
! Set report to printer or file.
!------------------------------------------------------------------
!if Evaluation then Print_to_file = True
if Evaluation then
   Print_to_file                = True
   Question_to_print            = False
   Continue_after_pins_failed   = False
   Continue_after_shorts_failed = False

!081704
   Print_board_msg              = False
   Bdg_Data_Dir$ = "bdg_data"
   create dir Bdg_Data_Dir$, Err
   Err = Err and (Err <> Directory_Exists)
   if Err then
      print Queue_Error_Msg$  |   print "    ";errm$
      print | print Stop_Msg$
      beep
      stop
   end if
   Eval_Rpt$ = Bdg_Data_Dir$ & "/stability.rpt"
!081704
end if

if Print_to_file then
   Report_Printer$           = "debug/report" ! Final report destination.
else
!#!Report_Printer$           = "/dev/rpr"&th$ ! Final report destination.
!082905 - For PC Compatibility.
!@   Report_Printer$           = btgetenv$("RPR"&th$) ! Final report destination
    Report_Printer$           = "/dev/tty"
end if
!------------------------------------------------------------------


!------------------------------------------------------------------
! For Debug - 0 for notest (branch around) and 1 for test.
!------------------------------------------------------------------
SHO_TEST    = 1  !Shorts
PRES_TEST   = 1  !Pre_Shorts
TJ_TEST     = 1  !TestJet
ANA_TEST    = 1  !Analog_Tests
PREP_TEST   = 1  !Pre-Powered Analog_Tests
PPRG_TEST   = 1  !PowerManagementIC_Programming
POL_TEST    = 1  !Polarity_Check !!NA
CCHK_TEST   = 1  !Connect_Check  !!NA
ANAC_TEST   = 1  !Analog_Cluster_Tests  !!NA
LED_TEST    = 1  !Led_Tests    !! NA
BSP_TEST    = 0  !BScan_Powered_Shorts_Tests
BSI_TEST    = 1  !BScan_Interconnect_Tests
BSC_TEST    = 1  !BScan_Incircuit_Tests
BSS_TEST    = 0  !BScan_Silicon_Nails_Tests
SWV_TEST    = 0  !ScanWorks_Scan_Path_Verify_Tests
SWP_TEST    = 0  !ScanWorks_Pretest
SWI_TEST    = 0  !ScanWorks_Interconnect_Tests
SWM_TEST    = 0  !ScanWorks_Mem_Interconnect_Tests
SWC_TEST    = 0  !ScanWorks_Cluster_Tests
SWB_TEST    = 0  !ScanWorks_Mem_BIST
SWD_TEST    = 0  !ScanWorks_Device_Programming
SWF_TEST    = 0  !ScanWorks_Flash_Programming
PWR_TEST    = 1  !Setup_Power_Supplies
REG_TEST    = 1  !Regulators
CPLD_TEST   = 0  !CPLDs
DIG_TEST    = 1  !Digital_Tests
FUNCT_TEST  = 1  !Functional_Tests
ANAF_TEST   = 1  !Analog_Functional_Tests
NVRAM_TEST  = 0  !Cookie_Tests
!------------------------------------------------------------------

subend


sub Print_board_testing_msg
global Fab$, Bom$, Board$, Board_Rev$, Board_Name$

!#!Color          a/x    b/y   c/z
!#!----------     ---    ---   ---
!#!Black           0      0     0
!#!Blue            0      0     1
!#!Green           0      1     0
!#!Cyan            0      1     1
!#!Red             1      0     0
!#!Magenta         1      0     1
!#!Yellow          1      1     0
!#!White           1      1     1
!#!
!#!a,b,c: foreground
!#!x,y,z: background
!#!#I: pen number (0-7); try NOT to use pen #0
!#
!#!print chr$(27)&"&v1a1b1c1x0y1z7I"
!#!print chr$(27)&"&v1a1b1c0x0y1z7I"
!#!print chr$(27)&"&v1a1b1c.7x0y.4z7I"
!#
!#PEN_6:  !# blue on yellow
!#print chr$(27)&"&v0a0b1c1x1y0z6I"
!#
!#PEN_7:
!#print chr$(27)&"&v1a1b1c.9x0y.5z7I"
!#print tab(5);chr$(27)&"&v7S"&BoardMsg$

print chr$(27)&"&v0m0a1b1c0x0.6y0.6z5I"
print chr$(27)&"&v0m1a0b0c0x0.6y0.6z6I"
print tab(5);chr$(27)&"&v6S                                                   "
print tab(5);chr$(27)&"&v6S             C i s c o   S y s t e m s             "
print tab(5);chr$(27)&"&v5S               |                   |               "
print tab(5);chr$(27)&"&v5S             .|||.               .|||.             "
print tab(5);chr$(27)&"&v5S             |||||               |||||             "
print tab(5);chr$(27)&"&v5S           .|||||||.           .|||||||.           "
print tab(5);chr$(27)&"&v5S           |||||||||           |||||||||           "
print tab(5);chr$(27)&"&v5S         .|||||||||||.       .|||||||||||.         "
print tab(5);chr$(27)&"&v5S   ....:|||||||||||||||:...:|||||||||||||||:....   "
print tab(5);chr$(27)&"&v5S                                                   "
print"                                                                        "
print tab(5);chr$(27)&"&v2S  ------------------------------------------------ "
print tab(5);chr$(27)&"&v3S   Program Developed by BrightMachines             "
print tab(5);chr$(27)&"&v2S  ------------------------------------------------ "
print"                                                                        "
print tab(5);chr$(27)&"&v7S  ------------------------------------------------ "
print tab(5);chr$(27)&"&v7S  TESTING "&Board_Name$&"                             "
print tab(5);chr$(27)&"&v7S  FAB "&Fab$&" * BOM "&Bom$
print tab(5);chr$(27)&"&v7S  ------------------------------------------------ "
print"                                                                        "

subend


sub Msgtest(This_test$)
    print tab(8);"Testing ";This_test$
    test This_test$
subend

!

sub Print_all_supplies
global Fixture_size$

 Supply_form: image 6d, 6d.3d, 6d.3d

 if Fixture_size$ = "BANK2" then
   print
   print "ALL SUPPLIES:"
   print "------------ "
   for I = 1 to 8|rps I,VIN,AIN|print using Supply_form; I, VIN, AIN|next I
   print
 end if

 if Fixture_size$ = "FULL" then
   print
   print "ALL SUPPLIES:"
   print "------------ "
   for I = 1 to 16|rps I,VIN,AIN|print using Supply_form; I, VIN, AIN|next I
   print
 end if
subend


sub Operator_debug
!   operator "OpDebug"
!      !
!      ! Softkey prompt strings
!      !
!
!      for I = 1 to 8
!         softkey I, "t", "", ""
!      next I
!
!      softkey 1,"r", "start","run"
!      softkey 2,"r", "probe   mod","digital probe"
!      softkey 3,"r", "find    pins","find pins"
!      softkey 4,"r", "graphics","board graphics"
!      softkey 5,"r", "faon","faon"
!      softkey 6,"r", "faoff","faoff"
!      softkey 7,"r", "stop","stop"
!      softkey 8,"r", "TestJet","verify testjet"
!
!     Prompt_First_Level$  = "  Press Desired Softkey Or Touch Pad:"&chr$(27)&"A"
!   Op_Debug:
!     print Prompt_First_Level$ | input User_Key$
!   !print User_Key$
!   if User_Key$ = "board graphics" then
!   if User_Key$ = "board graphics" then
!       board graphics,ERROR
!        if ERROR then board graphics end
!       goto Op_Debug
!   end if
!   if User_Key$ = "faoff" then
!       faoff
!       goto Op_Debug
!   end if
!   if User_Key$ = "faon" then
!       faon
!       goto Op_Debug
!   end if
!   if User_Key$ = "find pins" then
!      question "Do you want vacuum?",Vac
!       if Vac then faon
!       find pins
!       faoff
!       goto Op_Debug
!   end if
!   if User_Key$ = "digital probe" then
!       input "What device do you want to probe?",Device$
!       faon
!       unpowered
!       probe Device$,Err
!       faoff
!       goto Op_Debug
!   end if
!   if User_Key$ = "verify testjet" then
!       print "vacuum may need to be on to have the transfer pins make contact"
!       print "in some fixtures!"
!       question "Do you want vacuum?",Vac
!        if Vac then faon
!       question "Do you want to test the mux card?",Mux
!        if Mux then verify all mux cards
!       input "What TestJet pad do you want to test (type all for all)",TJet$
!       if upc$(TJet$) = "ALL" then
!         verify all testjet probes
!       else
!         verify testjet probes lwc$(TJet$)
!       end if
!       question "Press yes to continue",Mux
!       if Vac then faoff
!       operator "OpDebug"
!       goto Op_Debug
!   end if
!   if User_Key$ = "123321" then  program monitor
!      for I = 1 to 8
!         softkey I, "t", "", ""
!      next I
!   !operator "TM_Standard"
!   softkeys clear   !# Resets redefined softkeys
!   operator "standard"  !! restore standard softkeys
subend


sub Select_version
global Version_selected

print using "@"
print
print

beep
Ask_oper: Version_selected = 0
beep

operator "BOARD_NAME"  ! Must match in .hp3070 file.

!#===== Append following lines to .hp3070 file ========================#
!
!BOARD_NAME.Boxes:         2
!BOARD_NAME.X:             25
!BOARD_NAME.Y:             3
!BOARD_NAME.Columns:       2
!
!BOARD_NAME.Label1:        73-1111-xx Rev xx
!BOARD_NAME.Label2:        73-2222-xx Rev xx
!
!BOARD_NAME.Command1:      1111
!BOARD_NAME.Command2:      2222
!
!#===== Append above lines to .hp3070 file ========================#

   print
   input ">>>>> Click on Softkeys to select Board Version <<<<<", Version_selected
operator off

if Version_selected = 0  then goto Ask_oper

operator "standard"   !Restore the standard Softkey

subend


!Copy voltage regulator tests here, if applicable.
sub Regulators (Status_Code, Message$)
global Status

   if Message$ <> "" then  print tab(5);Message$
   Status = Status_Code

subend


!Copy PLD tests here, if applicable.
sub CPLDs (Status_Code, Message$)
global Status

   if Message$ <> "" then  print tab(5);Message$
   Status = Status_Code

subend


def fn Validate_SN (SN$)
   print
   print "All Uppercase = "; SN$
   print

   if len(SN$) = 11 or len(SN$) = 20 then  !Newer products and CAT6K
      !Format LLLYYWWWSSSS (3.4 - Cisco Doc. 701806-0000 Rev E0)
!     LLL  = 1  !Location (base 34, alpha, excluding I and O)
      LLL  = 1  !Location (base 36, alpha/numeric)  !052907
      YYWW = 1  !Year, Workweek (base 10, numeric)
!     SSSS = 1  !Sequential serial ID (base 34, alpha/numeric, excluding I and O)
      SSSS = 1  !Sequential serial ID (base 36, alpha/numeric)  !052907
      for I = 1 to 3
!        if not fn Exclusive_Alpha(SN$[I;1]) then
         if not fn Alpha_Numeric(SN$[I;1]) then  !052907
            print "Illegal character at location"; I; "("; SN$[I;1]; ")"
            LLL = 0
         end if
      next I

      for I = 4 to 7
         if not fn Numeric(SN$[I;1]) then
            print "Illegal character at location"; I; "("; SN$[I;1]; ")"
            YYWW = 0
         end if
      next I

      for I = 8 to 11
!        if not fn Exclusive_Alpha_Numeric(SN$[I;1]) then
         if not fn Alpha_Numeric(SN$[I;1]) then  !052907
            print "Illegal character at location"; I; "("; SN$[I;1]; ")"
            SSSS = 0
         end if
      next I

      if len(SN$) = 20 then  !CAT6K Only
         for I = 12 to 20
            if SN$[I;1] <> "\" then
               print "Illegal character at location"; I; "("; SN$[I;1]; ")"
               SSSS = 0
            end if
         next I
      end if

      return binand(binand(LLL, YYWW), SSSS)
   else
      if len(SN$) = 8 then  !Older products
         SSSSSSSS = 1
         for I = 1 to 8
!           if not fn Exclusive_Alpha_Numeric(SN$[I;1]) then
            if not fn Alpha_Numeric(SN$[I;1]) then  !052907
               print "Illegal character at location"; I; "("; SN$[I;1]; ")"
               SSSSSSSS = 0
            end if
         next I

         return SSSSSSSS
      else
         print "Illegal serial number length"; len(SN$)
         return 0
      end if
   end if
fnend

def fn Alpha_Numeric (Char$)  !Base 36, alpha/numeric
   if (num(Char$) < num("0") or (num(Char$) > num("9") and num(Char$) < num("A")) or num(Char$) > num("Z")) then
      return 0
   else
      return 1
   end if
fnend

def fn Alpha (Char$)  !Base 26, alpha
   if (num(Char$) < num("A") or num(Char$) > num("Z")) then
      return 0
   else
      return 1
   end if
fnend

def fn Exclusive_Alpha_Numeric (Char$)  !Base 34, alpha/numeric, excluding I and O
   if (num(Char$) < num("0") or (num(Char$) > num("9") and num(Char$) < num("A")) or num(Char$) > num("Z") or num(Char$) = num("I") or num(Char$) = num("O")) then
      return 0
   else
      return 1
   end if
fnend

def fn Exclusive_Alpha (Char$)  !Base 24, alpha, excluding I and O
   if (num(Char$) < num("A") or num(Char$) > num("Z") or num(Char$) = num("I") or num(Char$) = num("O")) then
      return 0
   else
      return 1
   end if
fnend

def fn Numeric (Char$)  !Base 10, numeric
   if (num(Char$) < num("0") or num(Char$) > num("9")) then
      return 0
   else
      return 1
   end if
fnend

! This custom subroutine is to check for board presence prior to testing.
sub Check_BD_Present  !081604

   print tab(10),Yellow$&"Checking for board presence..."
   Check_again:
      powered ,Error
      if Error=800096 then
         print "Board-Under-Test is not present!!!"
         print "Please load a board and close the lid."
         BACK: question "Press Yes to continue",Stat
            if Stat=0 then
               goto BACK
            else
               goto Check_again
            end if
      end if
      unpowered
subend

!081704
def fn Test_Status$(BFailed)

   if BFailed = 0 then
      return "PASSED"
   else
      return "FAILED"
   end if
fnend
!081704

!##############################################################################
!                          END OF TESTMAIN
!##############################################################################

sub Initialize_Board_Constants
global Board$,Board_Rev$
global Using_Multiple_Versions, True, False
global Using_AwareTest

   Board$ = "73-10293-01"
   Board_Rev$ = "05"

! 'vacuum well' statement goes here (if required)
   vacuum well a is 0,1,2,3
   Using_Multiple_Versions = False
   Using_AwareTest = False
subend

sub Setup_FXT_Power_Supplies (Status_Code, Message$)
subend

sub Setup_CET_FXT_Power_Supplies (Status_Code, Message$)
subend

sub Disconnect_FXT_Power_Supplies
subend

sub Characterize
global Status, Failed_In_Learn

   Status = Failed_In_Learn
   learn capacitance on
   test "analog/c05_5"
   test "analog/c05_rtv1"
   test "analog/c05_rtv2"
   test "analog/c06_5"
   test "analog/c06_rtv1"
   test "analog/c06_rtv2"
 ! test "analog/c110"
   test "analog/c408"
   test "analog/c1815"
   test "analog/c1816"
!# test "analog/c13_1v2s"   ! No-Stuff
!# test "analog/c69_3v3"    ! No-Stuff
!@ test "analog/c13_sf0"    !22p
!@ test "analog/c13_sf1"    !22p
!@ test "analog/c219_5v"    !22p
   test "analog/c23_pm"     ! Parallel
!  test "analog/c76"                ! Verify
   test "analog/c3061"
!@ test "analog/c87"  !6.8p
!@ test "analog/c88"  !6.8p
   test "analog/c389"
   test "analog/c401"
   learn capacitance off
subend

sub Long_Pin_Tests (Status_Code, Message$)
global Status

   if Message$ <> "" then  print tab(5);Message$
   Status = Status_Code
   unpowered
   auxconnect 5 |wait 1 |faoff |wait 2 |unpowered
 ! test "short_stroke"
   test "pins_long"    !detect long probe

subend


sub Pre_Shorts (Status_Code, Message$)
global Status
global Red$, Blue$, Yellow$, Green$, Black$, Cyan$

   if Message$ <> "" then  print tab(5);Message$
   Status = Status_Code
   print tab(10),Cyan$&"Testing Connectors (presence)..."
   test "analog/j1%presence"
   test "analog/j19%presence"
   test "analog/p3%presence"
   test "analog/p4%presence"
   test "analog/p5%presence"
   test "analog/qsfp_q0%presence"
   test "analog/qsfp_q1%presence"
   test "analog/qsfp_q2%presence"
   test "analog/sfp_s0%presence"
   test "analog/sfp_s1%presence"
subend

sub Shorts (Status_Code, Message$)
global Status

   if Message$ <> "" then  print tab(5);Message$
   Status = Status_Code
   test "shorts"
subend

sub Analog_Tests (Status_Code, Message$)
global Status
global Red$, Blue$, Yellow$, Green$, Black$, Cyan$

   if Message$ <> "" then  print tab(5);Message$
   Status = Status_Code

    test "analog/r1_1v2s"    !102898 nostuff ,102931 stuff
    test "analog/r1_sf0"     !102898 nostuff ,102931 stuff
    test "analog/r1_sf1"     !102898 nostuff ,102931 stuff
    test "analog/r875_5v"    !102898 nostuff ,102931 stuff
    test "analog/r877_3v3"   !102898 nostuff ,102931 stuff
print tab(10),Cyan$&"Testing Capacitors..."
   test "analog/c2868"                          ! Parallel w/ > 5 devices
   test "analog/c9_6"                           ! Parallel
   test "analog/c8_6"                           ! Parallel
   test "analog/c13_91_rtv1"                    ! Parallel w/ > 5 devices
!! test "analog/c13_91_rtv2"    !!!validar      ! Parallel w/ > 5 devices
   test "analog/c228_3v3"                       ! Parallel w/ > 5 devices
   test "analog/c13_98_rtv1"                    ! Parallel w/ > 5 devices
   test "analog/c13_98_rtv2"                    ! Parallel w/ > 5 devices
   test "analog/c13_98_5"                       ! Parallel w/ > 5 devices
   test "analog/c419_3"                         ! Parallel w/ > 5 devices
   test "analog/c19_1v2s"                       ! Parallel w/ > 5 devices
   test "analog/c23_a"                          ! Parallel w/ > 5 devices
   test "analog/c7_q0"  ! test commented in testorder
   test "analog/c7_q1"  ! test commented in testorder
   test "analog/c7_q2"  ! test commented in testorder
   test "analog/c8_q0"  ! test commented in testorder
   test "analog/c8_q1"  ! test commented in testorder
   test "analog/c8_q2"  ! test commented in testorder
   test "analog/c221_5v"                        ! Parallel w/ > 5 devices
   test "analog/c3_a"                           ! Parallel w/ > 5 devices
   test "analog/c186"
   test "analog/c30"                            ! Parallel w/ > 5 devices
   test "analog/c1_q0"                          ! Parallel w/ > 5 devices
   test "analog/c1_q1"                          ! Parallel w/ > 5 devices
   test "analog/c1_q2"                          ! Parallel w/ > 5 devices
   test "analog/c2_q0"                          ! Parallel w/ > 5 devices
   test "analog/c2_q1"                          ! Parallel w/ > 5 devices
   test "analog/c2_q2"                          ! Parallel w/ > 5 devices
   test "analog/c19_sf1"                        ! Parallel w/ > 5 devices
   test "analog/c529"                           ! Parallel w/ > 5 devices
   test "analog/c19_sf0"                        ! Parallel w/ > 5 devices
   test "analog/c78"                            ! Parallel w/ > 5 devices
   test "analog/c90_rt1_2"                      ! Parallel w/ > 5 devices
!  test "analog/c13_91_5"                       ! Parallel w/ > 5 devices
!# test "analog/c703_3" ! Parallel with capacitors in P1V8 and GND
!# test "analog/c705_3" ! Parallel with capacitors in P1V8 and GND
!# test "analog/c707_3" ! Parallel with capacitors in P1V8 and GND
!# test "analog/c709_3" ! Parallel with capacitors in P1V8 and GND
   test "analog/c03_5"                          ! Parallel
   test "analog/c03_rtv1"                       ! Parallel
   test "analog/c03_rtv2"                       ! Parallel
   test "analog/c04_5"  ! test commented in testorder   ! Parallel
   test "analog/c04_rtv1"  ! test commented in testorder ! Parallel
   test "analog/c04_rtv2"  ! test commented in testorder ! Parallel
   test "analog/c10_5"                          ! Parallel
   test "analog/c10_rtv1"                       ! Parallel
   test "analog/c10_rtv2"                       ! Parallel
   test "analog/c72"
   test "analog/c3057"
   test "analog/c2_6"
   test "analog/c2_a"
   test "analog/c5_6"
   test "analog/c5_a"
   test "analog/c09_5"                          ! Parallel
   test "analog/c09_rtv1"                       ! Parallel
   test "analog/c09_rtv2"                       ! Parallel
   test "analog/c11"
   test "analog/c21_pm"                         ! Parallel
   test "analog/c24_pm"                         ! Parallel
   test "analog/c75"
   test "analog/c165"                           ! Parallel
   test "analog/c3060"
!# test "analog/c01_5" !* Capacitor can't be tested that parallel with low impedance.
   test "analog/c33"
   test "analog/c22_a"
   test "analog/c146"
!# test "analog/c147" ! Probe removed
   test "analog/c171"
   test "analog/c172"
   test "analog/c173"
   test "analog/c174"
   test "analog/c175"
   test "analog/c176"
   test "analog/c177"
   test "analog/c178"
   test "analog/c179"
   test "analog/c180"
   test "analog/c181"
   test "analog/c182"
!# test "analog/c359" ! Probe removed
!# test "analog/c360" ! Probe removed
   test "analog/c578"                           ! Parallel
   test "analog/c727"
   test "analog/c728"
   test "analog/c1242"
   test "analog/c1243"
!# test "analog/r1023" ! Probe removed
!# test "analog/r1024" ! Probe removed
   test "analog/c6_1v2s"                        ! Parallel
   test "analog/c6_sf0"                         ! Parallel
   test "analog/c6_sf1"                         ! Parallel
   test "analog/c214_5v"                        ! Parallel
   test "analog/c224_3v3"                       ! Parallel
   test "analog/c05_5"
   test "analog/c05_rtv1"
   test "analog/c05_rtv2"
   test "analog/c06_5"
   test "analog/c06_rtv1"
   test "analog/c06_rtv2"
 ! test "analog/c110"
   test "analog/c06_91_5"
   test "analog/c06_91_rtv1"
   test "analog/c06_91_rtv2"
   test "analog/c06_92_5"
   test "analog/c06_93_5"
   test "analog/c06_94_5"
   test "analog/c06_95_5"
   test "analog/c06_96_5"
   test "analog/c06_98_5"
   test "analog/c06_98_rtv1"
   test "analog/c06_98_rtv2"
   test "analog/c7_6"
   test "analog/c7_a"
   test "analog/c18_a"
   test "analog/c10_1v2s"
   test "analog/c10_sf0"
   test "analog/c10_sf1"
   test "analog/c24_a"                          ! Parallel
   test "analog/c58_5v"
   test "analog/c189_3v3"
!# test "analog/c11_1v2s" ! No-Stuff
!# test "analog/c64_3v3"  ! No-Stuff
!# test "analog/c11_sf0"  ! No-Stuff
!# test "analog/c11_sf1"  ! No-Stuff
!# test "analog/c14_sf0"  ! No-Stuff
!# test "analog/c14_sf1"  ! No-Stuff
!# test "analog/c217_5v"  ! No-Stuff
!# test "analog/c220_5v"  ! No-Stuff
   test "analog/c408"
   test "analog/c1815"
   test "analog/c1816"
!# test "analog/c13_1v2s" ! No-Stuff
!# test "analog/c69_3v3"  ! No-Stuff
!@ test "analog/c13_sf0"    !22p
!@ test "analog/c13_sf1"    !22p
!@ test "analog/c219_5v"    !22p
!# test "analog/c14_1v2s"   ! No-Stuff
!# test "analog/c70_3v3"    ! No-Stuff
   test "analog/c23_pm"                         ! Parallel
!  test "analog/c76"     !verify
   test "analog/c3061"
   test "analog/c77"
   test "analog/c3062"
!@ test "analog/c87"  !6.8p
!@ test "analog/c88"  !6.8p
!  test "analog/c389"
!@ test "analog/c401"                           !TPM
  print tab(10),Cyan$&"Testing Resistors ..."
   test "analog/r1_6"
   test "analog/r1_a"
   test "analog/r3_a"
   test "analog/r16_a"
   test "analog/r22_5"
   test "analog/r22_rtv1"
   test "analog/r22_rtv2"
   test "analog/r23_5"
   test "analog/r23_rtv1"
   test "analog/r23_rtv2"
   test "analog/r38"
   test "analog/r100"
   test "analog/r102"
   test "analog/r535"
   test "analog/r536"
   test "analog/r545"
   test "analog/r549"
   test "analog/r551"
   test "analog/r553"
   test "analog/r600"
   test "analog/r601"
   test "analog/r687"
   test "analog/r688"
   test "analog/r738"
   test "analog/r1844"
   test "analog/r1845"
   test "analog/r1_pm"
   test "analog/r2_pm"
   test "analog/r72"
   test "analog/r201_pm"
   test "analog/r432"
   test "analog/r577"
   test "analog/r2_a"
   test "analog/r2_rt1_2"
   test "analog/r2_rt3_4"
   test "analog/r2_rt5_6"
   test "analog/r2_rt7_8"
   test "analog/r2_rt9"
   test "analog/r9_rt1_2"
   test "analog/r9_rt3_4"
   test "analog/r9_rt5_6"
   test "analog/r9_rt7_8"
   test "analog/r9_rt9"
   test "analog/r13_rt1_2"
   test "analog/r13_rt3_4"
   test "analog/r13_rt5_6"
   test "analog/r13_rt7_8"
   test "analog/r14_rt1_2"
   test "analog/r14_rt3_4"
   test "analog/r14_rt5_6"
   test "analog/r14_rt7_8"
   test "analog/r15_pm"
   test "analog/r144"
   test "analog/r145"
   test "analog/r155"
!# test "analog/r245" ! Probe removed
!# test "analog/r984" ! Shorted on sample board
!# test "analog/r985" ! Shorted on sample board
!# test "analog/r1015" ! Probe removed
!# test "analog/r1016" ! Probe removed
   test "analog/r2_s0"
   test "analog/r2_s1"
   test "analog/r4_s0"
   test "analog/r4_s1"
   test "analog/r6_q0"
   test "analog/r6_q1"
   test "analog/r6_q2"
   test "analog/r6_s0"
   test "analog/r6_s1"
   test "analog/r8_q0"
   test "analog/r8_q1"
   test "analog/r8_q2"
   test "analog/r8_s0"
   test "analog/r8_s1"
   test "analog/r10_s0"
   test "analog/r10_s1"
   test "analog/r12_s0"
   test "analog/r12_s1"
   test "analog/r14_s0"
   test "analog/r14_s1"
   test "analog/r16_s0"
   test "analog/r16_s1"
   test "analog/r18_s0"
   test "analog/r18_s1"
   test "analog/r20_s0"
   test "analog/r20_s1"
   test "analog/r22_s0"
   test "analog/r22_s1"
   test "analog/r24_s0"
   test "analog/r24_s1"
   test "analog/r26_s0"
   test "analog/r26_s1"
   test "analog/r28_s0"
   test "analog/r28_s1"
   test "analog/r30_s0"
   test "analog/r30_s1"
   test "analog/r32_s0"
   test "analog/r32_s1"
   test "analog/r34_s0"
   test "analog/r34_s1"
   test "analog/r36_s0"
   test "analog/r36_s1"
   test "analog/r38_s0"
   test "analog/r38_s1"
   test "analog/r40_s0"
   test "analog/r40_s1"
   test "analog/r50_s0"
   test "analog/r50_s1"
   test "analog/r52_s0"
   test "analog/r52_s1"
   test "analog/r54_s0"
   test "analog/r54_s1"
   test "analog/r56_s0"
   test "analog/r56_s1"
   test "analog/r479"
   test "analog/r480"
   test "analog/r1077"
   test "analog/r3_3"
   test "analog/r4_3"
!# test "analog/r150" ! Probe removed
!# test "analog/r151" ! Probe removed
!# test "analog/r181" ! Probe removed
!# test "analog/r182" ! Probe removed
!# test "analog/r183" ! Probe removed
!# test "analog/r184" ! Probe removed
!# test "analog/r186" ! Probe removed
!# test "analog/r187" ! Probe removed
!# test "analog/r188" ! Probe removed
!# test "analog/r212" ! Probe removed
!# test "analog/r356" ! Probe removed
!# test "analog/r357" ! Probe removed
!# test "analog/r359" ! Probe removed
!# test "analog/r361" ! Probe removed
!# test "analog/r362" ! Probe removed
!# test "analog/r363" ! Probe removed
!# test "analog/r364" ! Probe removed
!# test "analog/r368" ! Probe removed
!# test "analog/r369" ! Probe removed
!# test "analog/r370" ! Probe removed
!# test "analog/r371" ! Probe removed
!# test "analog/r372" ! Probe removed
!# test "analog/r373" ! Probe removed
!# test "analog/r374" ! Probe removed
!# test "analog/r375" ! Probe removed
!# test "analog/r376" ! Probe removed
!# test "analog/r379" ! Probe removed
!# test "analog/r380" ! Probe removed
!# test "analog/r381" ! Probe removed
!# test "analog/r382" ! Probe removed
!# test "analog/r383" ! Probe removed
!# test "analog/r384" ! Probe removed
!# test "analog/r502" ! Probe removed
!# test "analog/r503" ! Probe removed
!# test "analog/r504" ! Probe removed
!# test "analog/r505" ! Probe removed
   test "analog/r3_6"
   test "analog/r3_q0"
   test "analog/r3_q1"
   test "analog/r3_q2"
   test "analog/r3_rt1_2"
   test "analog/r3_rt3_4"
   test "analog/r3_rt5_6"
   test "analog/r3_rt7_8"
   test "analog/r3_rt9"
   test "analog/r4_q0"
   test "analog/r4_q1"
   test "analog/r4_q2"
   test "analog/r5_q0"
   test "analog/r5_q1"
   test "analog/r5_q2"
   test "analog/r09_5"
   test "analog/r09_rtv1"
   test "analog/r09_rtv2"
   test "analog/r12_a"
   test "analog/r16_rt1_2"
   test "analog/r16_rt3_4"
   test "analog/r16_rt5_6"
   test "analog/r16_rt7_8"
   test "analog/r26"
   test "analog/r27"
   test "analog/r28"
   test "analog/r30"
   test "analog/r30_3"
   test "analog/r31"
   test "analog/r33"
   test "analog/r34"
   test "analog/r44"
   test "analog/r51"
   test "analog/r58_3"
   test "analog/r59_3"
   test "analog/r62_3"
   test "analog/r74"
   test "analog/r75"
   test "analog/r88"
   test "analog/r96"
   test "analog/r105"
   test "analog/r107"
   test "analog/r112"
   test "analog/r115"
   test "analog/r300"
   test "analog/r321"
   test "analog/r371_3"
   test "analog/r373_3"
   test "analog/r384_3"
   test "analog/r385_3"
   test "analog/r403"
   test "analog/r412"
   test "analog/r414"
   test "analog/r464"
   test "analog/r465"
   test "analog/r564"
   test "analog/r589"
   test "analog/r595"
   test "analog/r685"
   test "analog/r731"
   test "analog/r742"
   test "analog/r755"
   test "analog/r1099"
   test "analog/r1156"
   test "analog/r1256"
   test "analog/r2427"
   test "analog/r2428"
   test "analog/r2429"
   print tab(10),Cyan$&"Testing Resistors Packages..."
   test "analog/rn38_s0%pin_1_8"
   test "analog/rn38_s0%pin_2_7"
   test "analog/rn38_s0%pin_3_6"
   test "analog/rn38_s0%pin_4_5"
   test "analog/rn38_s1%pin_1_8"
   test "analog/rn38_s1%pin_2_7"
   test "analog/rn38_s1%pin_3_6"
   test "analog/rn38_s1%pin_4_5"
   test "analog/rn48_s0%pin_1_8"
   test "analog/rn48_s0%pin_2_7"
   test "analog/rn48_s0%pin_3_6"
   test "analog/rn48_s0%pin_4_5"
   test "analog/rn48_s1%pin_1_8"
   test "analog/rn48_s1%pin_2_7"
   test "analog/rn48_s1%pin_3_6"
   test "analog/rn48_s1%pin_4_5"
   test "analog/rn49_s0%pin_1_8"
   test "analog/rn49_s0%pin_2_7"
   test "analog/rn49_s0%pin_3_6"
   test "analog/rn49_s0%pin_4_5"
   test "analog/rn49_s1%pin_1_8"
   test "analog/rn49_s1%pin_2_7"
   test "analog/rn49_s1%pin_3_6"
   test "analog/rn49_s1%pin_4_5"
   test "analog/rn50_s0%pin_1_8"
   test "analog/rn50_s0%pin_2_7"
   test "analog/rn50_s0%pin_3_6"
   test "analog/rn50_s0%pin_4_5"
   test "analog/rn50_s1%pin_1_8"
   test "analog/rn50_s1%pin_2_7"
   test "analog/rn50_s1%pin_3_6"
   test "analog/rn50_s1%pin_4_5"
   test "analog/rn58_s0%pin_1_8"
   test "analog/rn58_s0%pin_2_7"
   test "analog/rn58_s0%pin_3_6"
   test "analog/rn58_s0%pin_4_5"
   test "analog/rn58_s1%pin_1_8"
   test "analog/rn58_s1%pin_2_7"
   test "analog/rn58_s1%pin_3_6"
   test "analog/rn58_s1%pin_4_5"
   test "analog/rn59_s0%pin_1_8"
   test "analog/rn59_s0%pin_2_7"
   test "analog/rn59_s0%pin_3_6"
   test "analog/rn59_s0%pin_4_5"
   test "analog/rn59_s1%pin_1_8"
   test "analog/rn59_s1%pin_2_7"
   test "analog/rn59_s1%pin_3_6"
   test "analog/rn59_s1%pin_4_5"
   test "analog/rn60_s0%pin_1_8"
   test "analog/rn60_s0%pin_2_7"
   test "analog/rn60_s0%pin_3_6"
   test "analog/rn60_s0%pin_4_5"
   test "analog/rn60_s1%pin_1_8"
   test "analog/rn60_s1%pin_2_7"
   test "analog/rn60_s1%pin_3_6"
   test "analog/rn60_s1%pin_4_5"
   test "analog/rn68_s0%pin_1_8"
   test "analog/rn68_s0%pin_2_7"
   test "analog/rn68_s0%pin_3_6"
   test "analog/rn68_s0%pin_4_5"
   test "analog/rn68_s1%pin_1_8"
   test "analog/rn68_s1%pin_2_7"
   test "analog/rn68_s1%pin_3_6"
   test "analog/rn68_s1%pin_4_5"
   test "analog/rn103_s0%pin_1_8"
   test "analog/rn103_s0%pin_2_7"
   test "analog/rn103_s0%pin_3_6"
   test "analog/rn103_s0%pin_4_5"
   test "analog/rn103_s1%pin_1_8"
   test "analog/rn103_s1%pin_2_7"
   test "analog/rn103_s1%pin_3_6"
   test "analog/rn103_s1%pin_4_5"
   test "analog/rn104_s0%pin_1_8"
   test "analog/rn104_s0%pin_2_7"
   test "analog/rn104_s0%pin_3_6"
   test "analog/rn104_s0%pin_4_5"
   test "analog/rn104_s1%pin_1_8"
   test "analog/rn104_s1%pin_2_7"
   test "analog/rn104_s1%pin_3_6"
   test "analog/rn104_s1%pin_4_5"
   test "analog/rn107_s0%pin_1_8"
   test "analog/rn107_s0%pin_2_7"
   test "analog/rn107_s0%pin_3_6"
   test "analog/rn107_s0%pin_4_5"
   test "analog/rn107_s1%pin_1_8"
   test "analog/rn107_s1%pin_2_7"
   test "analog/rn107_s1%pin_3_6"
   test "analog/rn107_s1%pin_4_5"
   test "analog/rn108_s0%pin_1_8"
   test "analog/rn108_s0%pin_2_7"
   test "analog/rn108_s0%pin_3_6"
   test "analog/rn108_s0%pin_4_5"
   test "analog/rn108_s1%pin_1_8"
   test "analog/rn108_s1%pin_2_7"
   test "analog/rn108_s1%pin_3_6"
   test "analog/rn108_s1%pin_4_5"
   print tab(10),Cyan$&"Testing Resistors 2nd section ..."
   test "analog/r4_6"
   test "analog/r4_a"
   test "analog/r5_6"
   test "analog/r6"
   test "analog/r7_3"
   test "analog/r8_3"
   test "analog/r9_3"
   test "analog/r10_3"
   test "analog/r11_3"
   test "analog/r12"
   test "analog/r13_3"
   test "analog/r14_3"
   test "analog/r18"
   test "analog/r21_3"
   test "analog/r22_3"
   test "analog/r32"
   test "analog/r53_3"
   test "analog/r56_3"
   test "analog/r57_3"
   test "analog/r60_3"
   test "analog/r77"
   test "analog/r81"
   test "analog/r93"
   test "analog/r129"
   test "analog/r132"
   test "analog/r134"
   test "analog/r156"
   test "analog/r157"
   test "analog/r164"
   test "analog/r165"
   test "analog/r202_pm"
   test "analog/r203"
   test "analog/r205"
   test "analog/r206"
   test "analog/r207"
   test "analog/r219"
   test "analog/r223"
   test "analog/r232"
   test "analog/r234"
   test "analog/r243"
   test "analog/r249"
   test "analog/r254"
   test "analog/r262"
   test "analog/r266"
   test "analog/r274"
   test "analog/r283"
!# test "analog/r293" !Resistor parallel between P3_3VA and GND, can't cover it.
   test "analog/r294"
   test "analog/r295"
   test "analog/r297"
   test "analog/r327"
   test "analog/r344"
   test "analog/r402"
   test "analog/r450"
   test "analog/r539"
   test "analog/r541"
   test "analog/r542"
   test "analog/r543"
   test "analog/r563"
   test "analog/r582"
   test "analog/r583"
   test "analog/r584"
   test "analog/r585"
   test "analog/r613"
   test "analog/r657"
   test "analog/r658"
   test "analog/r659"
   test "analog/r660"
   test "analog/r664"
   test "analog/r686"
   test "analog/r690"
   test "analog/r759"
   test "analog/r760"
   test "analog/r775"
   test "analog/r778"
   test "analog/r779"
   test "analog/r793"
   test "analog/r794"
   test "analog/r929"
   test "analog/r1027"
   test "analog/r1028"
   test "analog/r1029"
   test "analog/r1101"
   test "analog/r1154"
   test "analog/r1198"
   test "analog/r1199"
   test "analog/r1200"
   test "analog/r1201"
   test "analog/r1202"
   test "analog/r1582"
   test "analog/r1583"
   test "analog/r1767"
   test "analog/r1768"
   test "analog/r1855_3"
   test "analog/r1856_3"
   test "analog/r1951"
   test "analog/r1952"
   test "analog/r3780"
   test "analog/rn1%pin_2_7"
   test "analog/rn1%pin_3_6"
   test "analog/rn1%pin_4_5"
   test "analog/r7_a"
   test "analog/r8"
!# test "analog/r8_1v2s" ! No-Stuff
!# test "analog/r952_3v3" ! No-Stuff
!# test "analog/r10_1v2s" ! No-Stuff
!# test "analog/r10_sf0" ! No-Stuff
!# test "analog/r10_sf1" ! No-Stuff
!# test "analog/r938_5v" ! No-Stuff
!# test "analog/r970_3v3" ! No-Stuff
   test "analog/r8_a"
   test "analog/r10_5"
   test "analog/r10_rtv1"
   test "analog/r10_rtv2"
   test "analog/r25_5"
   test "analog/r25_rtv1"
   test "analog/r25_rtv2"
   test "analog/r10_pm"
   test "analog/r174_pm"
   test "analog/r390"
   test "analog/r11_a"
!# test "analog/r12_1v2s" ! No-Stuff
!# test "analog/r971_3v3" ! No-Stuff
   test "analog/r12_3"
!# test "analog/r12_sf0"  ! No-Stuff
!# test "analog/r12_sf1"  ! No-Stuff
!# test "analog/r948_5v"  ! No-Stuff
   test "analog/r14_a"
   test "analog/r15_3"
   test "analog/r606"
   test "analog/r607"
   test "analog/r608"
   test "analog/r609"
   test "analog/r612"
   test "analog/r615"
   test "analog/r616"
   test "analog/r617"
   test "analog/r618"
   test "analog/r619"
   test "analog/r620"
   test "analog/r624"
   test "analog/r626"
   test "analog/r15_a"
   test "analog/r306"
   test "analog/r16"
   test "analog/r40"
   test "analog/r41"
   test "analog/r45"
!# test "analog/r89" ! Probe removed
   test "analog/r103"
   test "analog/r118"
   test "analog/r125"
   test "analog/r135"
   test "analog/r136"
   test "analog/r137"
   test "analog/r140"
!# test "analog/r162" ! Probe removed
   test "analog/r200"
   test "analog/r202"
   test "analog/r322"
   test "analog/r324"
   test "analog/r325"
   test "analog/r326"
   test "analog/r544"
   test "analog/r546"
   test "analog/r547"
   test "analog/r548"
   test "analog/r554"
   test "analog/r587"
!# test "analog/r610" ! Probe removed
!# test "analog/r611" ! Probe removed
   test "analog/r649"
   test "analog/r2439"
   test "analog/r19"
   test "analog/r20_5"
   test "analog/r21_5"
   test "analog/r21_rtv1"
   test "analog/r21_rtv2"
   test "analog/r29_5"
   test "analog/r29_rtv1"
   test "analog/r29_rtv2"
   test "analog/r126"
   test "analog/r21"
   test "analog/r67"
   test "analog/r159"
   test "analog/r160"
   test "analog/r189"
   test "analog/r190"
   test "analog/r191"
   test "analog/r192"
   test "analog/r193"
   test "analog/r194"
   test "analog/r195"
   test "analog/r196"
!# test "analog/r247" ! Probe removed
!# test "analog/r250" ! Probe removed
   test "analog/r377"
   test "analog/r378"
   test "analog/r387"
   test "analog/r388"
   test "analog/r389"
   test "analog/r391"
   test "analog/r392"
   test "analog/r393"
   test "analog/r394"
   test "analog/r395"
   test "analog/r396"
   test "analog/r398"
   test "analog/r400"
   test "analog/r401"
   test "analog/r436"
   test "analog/r439"
   test "analog/r440"
   test "analog/r441"
   test "analog/r442"
   test "analog/r443"
   test "analog/r444"
   test "analog/r445"
   test "analog/r523"
   test "analog/r524"
   test "analog/r525"
   test "analog/r526"
   test "analog/r1019"
   test "analog/r1020"
   test "analog/r1021"
   test "analog/r1022"
   test "analog/rn1_q0%pin_1_8"
   test "analog/rn1_q0%pin_2_7"
   test "analog/rn1_q0%pin_3_6"
   test "analog/rn1_q0%pin_4_5"
   test "analog/rn1_q1%pin_1_8"
   test "analog/rn1_q1%pin_2_7"
   test "analog/rn1_q1%pin_3_6"
   test "analog/rn1_q1%pin_4_5"
   test "analog/rn1_q2%pin_1_8"
   test "analog/rn1_q2%pin_2_7"
   test "analog/rn1_q2%pin_3_6"
   test "analog/rn1_q2%pin_4_5"
   test "analog/rn31_s0%pin_1_8"
   test "analog/rn31_s0%pin_2_7"
   test "analog/rn31_s0%pin_3_6"
   test "analog/rn31_s0%pin_4_5"
   test "analog/rn31_s1%pin_1_8"
   test "analog/rn31_s1%pin_2_7"
   test "analog/rn31_s1%pin_3_6"
   test "analog/rn31_s1%pin_4_5"
   test "analog/rn32_s0%pin_1_8"
   test "analog/rn32_s0%pin_2_7"
   test "analog/rn32_s0%pin_3_6"
   test "analog/rn32_s0%pin_4_5"
   test "analog/rn32_s1%pin_1_8"
   test "analog/rn32_s1%pin_2_7"
   test "analog/rn32_s1%pin_3_6"
   test "analog/rn32_s1%pin_4_5"
   test "analog/rn41_s0%pin_1_8"
   test "analog/rn41_s0%pin_2_7"
   test "analog/rn41_s0%pin_3_6"
   test "analog/rn41_s0%pin_4_5"
   test "analog/rn41_s1%pin_1_8"
   test "analog/rn41_s1%pin_2_7"
   test "analog/rn41_s1%pin_3_6"
   test "analog/rn41_s1%pin_4_5"
   test "analog/rn42_s0%pin_1_8"
   test "analog/rn42_s0%pin_2_7"
   test "analog/rn42_s0%pin_3_6"
   test "analog/rn42_s0%pin_4_5"
   test "analog/rn42_s1%pin_1_8"
   test "analog/rn42_s1%pin_2_7"
   test "analog/rn42_s1%pin_3_6"
   test "analog/rn42_s1%pin_4_5"
   test "analog/rn51_s0%pin_1_8"
   test "analog/rn51_s0%pin_2_7"
   test "analog/rn51_s0%pin_3_6"
   test "analog/rn51_s0%pin_4_5"
   test "analog/rn51_s1%pin_1_8"
   test "analog/rn51_s1%pin_2_7"
   test "analog/rn51_s1%pin_3_6"
   test "analog/rn51_s1%pin_4_5"
   test "analog/rn52_s0%pin_1_8"
   test "analog/rn52_s0%pin_2_7"
   test "analog/rn52_s0%pin_3_6"
   test "analog/rn52_s0%pin_4_5"
   test "analog/rn52_s1%pin_1_8"
   test "analog/rn52_s1%pin_2_7"
   test "analog/rn52_s1%pin_3_6"
   test "analog/rn52_s1%pin_4_5"
   test "analog/rn61_s0%pin_1_8"
   test "analog/rn61_s0%pin_2_7"
   test "analog/rn61_s0%pin_3_6"
   test "analog/rn61_s0%pin_4_5"
   test "analog/rn61_s1%pin_1_8"
   test "analog/rn61_s1%pin_2_7"
   test "analog/rn61_s1%pin_3_6"
   test "analog/rn61_s1%pin_4_5"
   test "analog/rn62_s0%pin_1_8"
   test "analog/rn62_s0%pin_2_7"
   test "analog/rn62_s0%pin_3_6"
   test "analog/rn62_s0%pin_4_5"
   test "analog/rn62_s1%pin_1_8"
   test "analog/rn62_s1%pin_2_7"
   test "analog/rn62_s1%pin_3_6"
   test "analog/rn62_s1%pin_4_5"
   test "analog/rn80_s0%pin_1_8"
   test "analog/rn80_s0%pin_2_7"
   test "analog/rn80_s0%pin_3_6"
   test "analog/rn80_s0%pin_4_5"
   test "analog/rn80_s1%pin_1_8"
   test "analog/rn80_s1%pin_2_7"
   test "analog/rn80_s1%pin_3_6"
   test "analog/rn80_s1%pin_4_5"
   test "analog/rn89_s0%pin_1_8"
   test "analog/rn89_s0%pin_2_7"
   test "analog/rn89_s0%pin_3_6"
   test "analog/rn89_s0%pin_4_5"
   test "analog/rn89_s1%pin_1_8"
   test "analog/rn89_s1%pin_2_7"
   test "analog/rn89_s1%pin_3_6"
   test "analog/rn89_s1%pin_4_5"
   test "analog/rn92_s0%pin_1_8"
   test "analog/rn92_s0%pin_2_7"
   test "analog/rn92_s0%pin_3_6"
   test "analog/rn92_s0%pin_4_5"
   test "analog/rn92_s1%pin_1_8"
   test "analog/rn92_s1%pin_2_7"
   test "analog/rn92_s1%pin_3_6"
   test "analog/rn92_s1%pin_4_5"
   test "analog/rn93_s0%pin_1_8"
   test "analog/rn93_s0%pin_2_7"
   test "analog/rn93_s0%pin_3_6"
   test "analog/rn93_s0%pin_4_5"
   test "analog/rn93_s1%pin_1_8"
   test "analog/rn93_s1%pin_2_7"
   test "analog/rn93_s1%pin_3_6"
   test "analog/rn93_s1%pin_4_5"
   test "analog/r23_3"
   test "analog/r25_3"
   test "analog/r1665"
   test "analog/r24_5"
   test "analog/r24_rtv1"
   test "analog/r24_rtv2"
   test "analog/r32_3"
   test "analog/r33_3"
   test "analog/r34_3"
   test "analog/r35_3"
   test "analog/r36_3"
   test "analog/r37_3"
   test "analog/r38_3"
   test "analog/r39_3"
   test "analog/r40_3"
   test "analog/r41_3"
   test "analog/r42_3"
   test "analog/r43_3"
   test "analog/r44_3"
   test "analog/r45_3"
   test "analog/r46_3"
   test "analog/r47_3"
   test "analog/r48_3"
   test "analog/r61"
   test "analog/r62"
!  test "analog/r113"  !!validar
   test "analog/r154"
!  test "analog/r158"
   test "analog/r211"
   test "analog/r345"
   test "analog/r346"
   test "analog/r347"
   test "analog/r353"
   test "analog/r354"
   test "analog/r355"
   test "analog/r452"
   test "analog/r454"
   test "analog/r463"
   test "analog/r468"
   test "analog/r469"
   test "analog/r556"
   test "analog/r558"
   test "analog/r559"
   test "analog/r602"
   test "analog/r614"
   test "analog/r661"
   test "analog/r665"
   test "analog/r704"
   test "analog/r705"
   test "analog/r706"
   test "analog/r709"
   test "analog/r710"
   test "analog/r711"
   test "analog/r712"
   test "analog/r754"
   test "analog/r940"
   test "analog/r941"
   test "analog/r944"
   test "analog/r945"
   test "analog/r1053"
   test "analog/r1203"
   test "analog/r1204"
   test "analog/r1223"
   test "analog/r1706"
   test "analog/r37"
   test "analog/r47"
   test "analog/r48"
   test "analog/r206_pm"
   test "analog/r290"
   test "analog/r550"
   test "analog/r1129"
   test "analog/r1132"
   test "analog/r1133"
   test "analog/r1148"
   test "analog/r1151"
   test "analog/r1152"
   test "analog/r1153"
   test "analog/r46"
   test "analog/r49"
   test "analog/r60"
   test "analog/r114"
!  test "analog/r116"    !!validar
   test "analog/r166"
   test "analog/r177"
   test "analog/r216"
   test "analog/r428"
   test "analog/r494"
   test "analog/r596"
   test "analog/r662"
   test "analog/r667"
   test "analog/r670"
   test "analog/r674"
   test "analog/r675"
   test "analog/r676"
   test "analog/r677"
   test "analog/r678"
   test "analog/r679"
   test "analog/r717"
   test "analog/r748"
   test "analog/r867"
   test "analog/r868"
   test "analog/r920"
   test "analog/r921"
   test "analog/r922"
   test "analog/r1194"
   test "analog/r52"
   test "analog/r1422"
   test "analog/r53"
   test "analog/r63"
   test "analog/r64"
   test "analog/r256"
   test "analog/r492"
   test "analog/r493"
   test "analog/r540"
   test "analog/r55_3"
!  test "analog/r73"   !VERIFY
   test "analog/r433"
   test "analog/r76"
   test "analog/r97"
   test "analog/r101"
   test "analog/r164_pm"
   test "analog/r296"
   test "analog/r307"
   test "analog/r399"
   test "analog/r475"
   test "analog/r477"
   test "analog/r495"
   test "analog/r496"
   test "analog/r557"
   test "analog/r562"
   test "analog/r566"
   test "analog/r653"
   test "analog/r654"
   test "analog/r590"
   test "analog/r643"
   test "analog/r691"
   test "analog/r692"
   test "analog/r693"
   test "analog/r694"
   test "analog/r695"
   test "analog/r698"
   test "analog/r699"
   test "analog/r700"
   test "analog/r701"
   test "analog/r689"
   test "analog/r736"
   test "analog/r853"
   test "analog/r745"
   test "analog/r768"
   test "analog/r825"
   test "analog/r1007"
!# test "analog/r931_5v" ! No-Stuff
!# test "analog/r1017" ! Probe removed
!# test "analog/r1018" ! Probe removed
   test "analog/r1136"
   test "analog/r1142"
   test "analog/r1317"
   test "analog/r1318"
   test "analog/r1324"
   test "analog/rn2_q0%pin_1_8"
   test "analog/rn2_q0%pin_2_7"
   test "analog/rn2_q0%pin_3_6"
   test "analog/rn2_q0%pin_4_5"
   test "analog/rn2_q1%pin_1_8"
   test "analog/rn2_q1%pin_2_7"
   test "analog/rn2_q1%pin_3_6"
   test "analog/rn2_q1%pin_4_5"
   test "analog/rn2_q2%pin_1_8"
   test "analog/rn2_q2%pin_2_7"
   test "analog/rn2_q2%pin_3_6"
   test "analog/rn2_q2%pin_4_5"
   test "analog/rn3_q0%pin_1_8"
   test "analog/rn3_q0%pin_2_7"
   test "analog/rn3_q0%pin_3_6"
   test "analog/rn3_q0%pin_4_5"
   test "analog/rn3_q1%pin_1_8"
   test "analog/rn3_q1%pin_2_7"
   test "analog/rn3_q1%pin_3_6"
   test "analog/rn3_q1%pin_4_5"
   test "analog/rn3_q2%pin_1_8"
   test "analog/rn3_q2%pin_2_7"
   test "analog/rn3_q2%pin_3_6"
   test "analog/rn3_q2%pin_4_5"
   test "analog/rn33_s0%pin_1_8"
   test "analog/rn33_s0%pin_2_7"
   test "analog/rn33_s0%pin_3_6"
   test "analog/rn33_s0%pin_4_5"
   test "analog/rn33_s1%pin_1_8"
   test "analog/rn33_s1%pin_2_7"
   test "analog/rn33_s1%pin_3_6"
   test "analog/rn33_s1%pin_4_5"
   test "analog/rn34_s0%pin_1_8"
   test "analog/rn34_s0%pin_2_7"
   test "analog/rn34_s0%pin_3_6"
   test "analog/rn34_s0%pin_4_5"
   test "analog/rn34_s1%pin_1_8"
   test "analog/rn34_s1%pin_2_7"
   test "analog/rn34_s1%pin_3_6"
   test "analog/rn34_s1%pin_4_5"
   test "analog/rn35_s0%pin_1_8"
   test "analog/rn35_s0%pin_2_7"
   test "analog/rn35_s0%pin_3_6"
   test "analog/rn35_s0%pin_4_5"
   test "analog/rn35_s1%pin_1_8"
   test "analog/rn35_s1%pin_2_7"
   test "analog/rn35_s1%pin_3_6"
   test "analog/rn35_s1%pin_4_5"
   test "analog/rn36_s0%pin_1_8"
   test "analog/rn36_s0%pin_2_7"
   test "analog/rn36_s0%pin_3_6"
   test "analog/rn36_s0%pin_4_5"
   test "analog/rn36_s1%pin_1_8"
   test "analog/rn36_s1%pin_2_7"
   test "analog/rn36_s1%pin_3_6"
   test "analog/rn36_s1%pin_4_5"
   test "analog/rn37_s0%pin_1_8"
   test "analog/rn37_s0%pin_2_7"
   test "analog/rn37_s0%pin_3_6"
   test "analog/rn37_s0%pin_4_5"
   test "analog/rn37_s1%pin_1_8"
   test "analog/rn37_s1%pin_2_7"
   test "analog/rn37_s1%pin_3_6"
   test "analog/rn37_s1%pin_4_5"
   test "analog/rn43_s0%pin_1_8"
   test "analog/rn43_s0%pin_2_7"
   test "analog/rn43_s0%pin_3_6"
   test "analog/rn43_s0%pin_4_5"
   test "analog/rn43_s1%pin_1_8"
   test "analog/rn43_s1%pin_2_7"
   test "analog/rn43_s1%pin_3_6"
   test "analog/rn43_s1%pin_4_5"
   test "analog/rn44_s0%pin_1_8"
   test "analog/rn44_s0%pin_2_7"
   test "analog/rn44_s0%pin_3_6"
   test "analog/rn44_s0%pin_4_5"
   test "analog/rn44_s1%pin_1_8"
   test "analog/rn44_s1%pin_2_7"
   test "analog/rn44_s1%pin_3_6"
   test "analog/rn44_s1%pin_4_5"
   test "analog/rn45_s0%pin_1_8"
   test "analog/rn45_s0%pin_2_7"
   test "analog/rn45_s0%pin_3_6"
   test "analog/rn45_s0%pin_4_5"
   test "analog/rn45_s1%pin_1_8"
   test "analog/rn45_s1%pin_2_7"
   test "analog/rn45_s1%pin_3_6"
   test "analog/rn45_s1%pin_4_5"
   test "analog/rn46_s0%pin_1_8"
   test "analog/rn46_s0%pin_2_7"
   test "analog/rn46_s0%pin_3_6"
   test "analog/rn46_s0%pin_4_5"
   test "analog/rn46_s1%pin_1_8"
   test "analog/rn46_s1%pin_2_7"
   test "analog/rn46_s1%pin_3_6"
   test "analog/rn46_s1%pin_4_5"
   test "analog/rn47_s0%pin_1_8"
   test "analog/rn47_s0%pin_2_7"
   test "analog/rn47_s0%pin_3_6"
   test "analog/rn47_s0%pin_4_5"
   test "analog/rn47_s1%pin_1_8"
   test "analog/rn47_s1%pin_2_7"
   test "analog/rn47_s1%pin_3_6"
   test "analog/rn47_s1%pin_4_5"
   test "analog/rn53_s0%pin_1_8"
   test "analog/rn53_s0%pin_2_7"
   test "analog/rn53_s0%pin_3_6"
   test "analog/rn53_s0%pin_4_5"
   test "analog/rn53_s1%pin_1_8"
   test "analog/rn53_s1%pin_2_7"
   test "analog/rn53_s1%pin_3_6"
   test "analog/rn53_s1%pin_4_5"
   test "analog/rn54_s0%pin_1_8"
   test "analog/rn54_s0%pin_2_7"
   test "analog/rn54_s0%pin_3_6"
   test "analog/rn54_s0%pin_4_5"
   test "analog/rn54_s1%pin_1_8"
   test "analog/rn54_s1%pin_2_7"
   test "analog/rn54_s1%pin_3_6"
   test "analog/rn54_s1%pin_4_5"
   test "analog/rn55_s0%pin_1_8"
   test "analog/rn55_s0%pin_2_7"
   test "analog/rn55_s0%pin_3_6"
   test "analog/rn55_s0%pin_4_5"
   test "analog/rn55_s1%pin_1_8"
   test "analog/rn55_s1%pin_2_7"
   test "analog/rn55_s1%pin_3_6"
   test "analog/rn55_s1%pin_4_5"
   test "analog/rn56_s0%pin_1_8"
   test "analog/rn56_s0%pin_2_7"
   test "analog/rn56_s0%pin_3_6"
   test "analog/rn56_s0%pin_4_5"
   test "analog/rn56_s1%pin_1_8"
   test "analog/rn56_s1%pin_2_7"
   test "analog/rn56_s1%pin_3_6"
   test "analog/rn56_s1%pin_4_5"
   test "analog/rn57_s0%pin_1_8"
   test "analog/rn57_s0%pin_2_7"
   test "analog/rn57_s0%pin_3_6"
   test "analog/rn57_s0%pin_4_5"
   test "analog/rn57_s1%pin_1_8"
   test "analog/rn57_s1%pin_2_7"
   test "analog/rn57_s1%pin_3_6"
   test "analog/rn57_s1%pin_4_5"
   test "analog/rn63_s0%pin_1_8"
   test "analog/rn63_s0%pin_2_7"
   test "analog/rn63_s0%pin_3_6"
   test "analog/rn63_s0%pin_4_5"
   test "analog/rn63_s1%pin_1_8"
   test "analog/rn63_s1%pin_2_7"
   test "analog/rn63_s1%pin_3_6"
   test "analog/rn63_s1%pin_4_5"
   test "analog/rn64_s0%pin_1_8"
   test "analog/rn64_s0%pin_2_7"
   test "analog/rn64_s0%pin_3_6"
   test "analog/rn64_s0%pin_4_5"
   test "analog/rn64_s1%pin_1_8"
   test "analog/rn64_s1%pin_2_7"
   test "analog/rn64_s1%pin_3_6"
   test "analog/rn64_s1%pin_4_5"
   test "analog/rn65_s0%pin_1_8"
   test "analog/rn65_s0%pin_2_7"
   test "analog/rn65_s0%pin_3_6"
   test "analog/rn65_s0%pin_4_5"
   test "analog/rn65_s1%pin_1_8"
   test "analog/rn65_s1%pin_2_7"
   test "analog/rn65_s1%pin_3_6"
   test "analog/rn65_s1%pin_4_5"
   test "analog/rn66_s0%pin_1_8"
   test "analog/rn66_s0%pin_2_7"
   test "analog/rn66_s0%pin_3_6"
   test "analog/rn66_s0%pin_4_5"
   test "analog/rn66_s1%pin_1_8"
   test "analog/rn66_s1%pin_2_7"
   test "analog/rn66_s1%pin_3_6"
   test "analog/rn66_s1%pin_4_5"
   test "analog/rn67_s0%pin_1_8"
   test "analog/rn67_s0%pin_2_7"
   test "analog/rn67_s0%pin_3_6"
   test "analog/rn67_s0%pin_4_5"
   test "analog/rn67_s1%pin_1_8"
   test "analog/rn67_s1%pin_2_7"
   test "analog/rn67_s1%pin_3_6"
   test "analog/rn67_s1%pin_4_5"
   test "analog/rn69_s0%pin_1_8"
   test "analog/rn69_s0%pin_2_7"
   test "analog/rn69_s0%pin_3_6"
   test "analog/rn69_s0%pin_4_5"
   test "analog/rn69_s1%pin_1_8"
   test "analog/rn69_s1%pin_2_7"
   test "analog/rn69_s1%pin_3_6"
   test "analog/rn69_s1%pin_4_5"
   test "analog/rn79_s0%pin_1_8"
   test "analog/rn79_s0%pin_2_7"
   test "analog/rn79_s0%pin_3_6"
   test "analog/rn79_s0%pin_4_5"
   test "analog/rn79_s1%pin_1_8"
   test "analog/rn79_s1%pin_2_7"
   test "analog/rn79_s1%pin_3_6"
   test "analog/rn79_s1%pin_4_5"
   test "analog/rn94_s0%pin_1_8"
   test "analog/rn94_s0%pin_2_7"
   test "analog/rn94_s0%pin_3_6"
   test "analog/rn94_s0%pin_4_5"
   test "analog/rn94_s1%pin_1_8"
   test "analog/rn94_s1%pin_2_7"
   test "analog/rn94_s1%pin_3_6"
   test "analog/rn94_s1%pin_4_5"
   test "analog/rn96_s0%pin_1_8"
   test "analog/rn96_s0%pin_2_7"
   test "analog/rn96_s0%pin_3_6"
   test "analog/rn96_s0%pin_4_5"
   test "analog/rn96_s1%pin_1_8"
   test "analog/rn96_s1%pin_2_7"
   test "analog/rn96_s1%pin_3_6"
   test "analog/rn96_s1%pin_4_5"
   test "analog/rn97_s0%pin_1_8"
   test "analog/rn97_s0%pin_2_7"
   test "analog/rn97_s0%pin_3_6"
   test "analog/rn97_s0%pin_4_5"
   test "analog/rn97_s1%pin_1_8"
   test "analog/rn97_s1%pin_2_7"
   test "analog/rn97_s1%pin_3_6"
   test "analog/rn97_s1%pin_4_5"
   test "analog/rn99_s0%pin_1_8"
   test "analog/rn99_s0%pin_2_7"
   test "analog/rn99_s0%pin_3_6"
   test "analog/rn99_s0%pin_4_5"
   test "analog/rn99_s1%pin_1_8"
   test "analog/rn99_s1%pin_2_7"
   test "analog/rn99_s1%pin_3_6"
   test "analog/rn99_s1%pin_4_5"
   test "analog/rn100_s0%pin_1_8"
   test "analog/rn100_s0%pin_2_7"
   test "analog/rn100_s0%pin_3_6"
   test "analog/rn100_s0%pin_4_5"
   test "analog/rn100_s1%pin_1_8"
   test "analog/rn100_s1%pin_2_7"
   test "analog/rn100_s1%pin_3_6"
   test "analog/rn100_s1%pin_4_5"
   test "analog/rn102_s0%pin_1_8"
   test "analog/rn102_s0%pin_2_7"
   test "analog/rn102_s0%pin_3_6"
   test "analog/rn102_s0%pin_4_5"
   test "analog/rn102_s1%pin_1_8"
   test "analog/rn102_s1%pin_2_7"
   test "analog/rn102_s1%pin_3_6"
   test "analog/rn102_s1%pin_4_5"
   test "analog/rn109_s0%pin_1_8"
   test "analog/rn109_s0%pin_2_7"
   test "analog/rn109_s0%pin_3_6"
   test "analog/rn109_s0%pin_4_5"
   test "analog/rn109_s1%pin_1_8"
   test "analog/rn109_s1%pin_2_7"
   test "analog/rn109_s1%pin_3_6"
   test "analog/rn109_s1%pin_4_5"
   test "analog/rn111_s0%pin_1_8"
   test "analog/rn111_s0%pin_2_7"
   test "analog/rn111_s0%pin_3_6"
   test "analog/rn111_s0%pin_4_5"
   test "analog/rn111_s1%pin_1_8"
   test "analog/rn111_s1%pin_2_7"
   test "analog/rn111_s1%pin_3_6"
   test "analog/rn111_s1%pin_4_5"
   print tab(10),Cyan$&"Testing Diodes (Leds) ..."
   test "analog/cr1%cr"
   test "analog/cr1_q0%cr"
   test "analog/cr1_q1%cr"
   test "analog/cr1_q2%cr"
   test "analog/cr2_q0%cr"
   test "analog/cr2_q1%cr"
   test "analog/cr2_q2%cr"
   test "analog/cr3%cr"
   test "analog/cr8%cr"
   test "analog/cr9%cr"
   test "analog/cr2%grn"
   test "analog/cr4%red"
   test "analog/cr5%grn"
   test "analog/cr5%red"
   test "analog/cr6%grn"
   test "analog/cr6%red"
   test "analog/cr7%grn"
   test "analog/cr7%red"
   test "analog/cr10%grn"
   test "analog/cr10%red"
   test "analog/cr11%grn"
   test "analog/cr11%red"
   test "analog/cr13%red"
   test "analog/cr14%red"
   test "analog/cr16%red"
   test "analog/cr17%red"
   test "analog/cr18%red"
   test "analog/cr19%red"
   test "analog/cr22%red"
   test "analog/cr25%red"
   test "analog/cr28%red"
   test "analog/cr29%red"
   test "analog/cr30%red"
   test "analog/cr31%red"
   test "analog/cr32%red"
   test "analog/cr33%red"
   test "analog/cr108%grn"
   test "analog/p0_s0%grn"
   test "analog/p0_s0%yel"
   test "analog/p0_s1%grn"
   test "analog/p0_s1%yel"
   test "analog/p1_q0%grn"
   test "analog/p1_q0%yel"
   test "analog/p1_q1%grn"
   test "analog/p1_q1%yel"
   test "analog/p1_q2%grn"
   test "analog/p1_q2%yel"
   test "analog/p1_s0%grn"
   test "analog/p1_s0%yel"
   test "analog/p1_s1%grn"
   test "analog/p1_s1%yel"
   test "analog/p2_q0%grn"
   test "analog/p2_q0%yel"
   test "analog/p2_q1%grn"
   test "analog/p2_q1%yel"
   test "analog/p2_q2%grn"
   test "analog/p2_q2%yel"
   test "analog/p2_s0%grn"
   test "analog/p2_s0%yel"
   test "analog/p2_s1%grn"
   test "analog/p2_s1%yel"
   test "analog/p3_s0%grn"
   test "analog/p3_s0%yel"
   test "analog/p3_s1%grn"
   test "analog/p3_s1%yel"
   test "analog/p4_s0%grn"
   test "analog/p4_s0%yel"
   test "analog/p4_s1%grn"
   test "analog/p4_s1%yel"
   test "analog/p5_s0%grn"
   test "analog/p5_s0%yel"
   test "analog/p5_s1%grn"
   test "analog/p5_s1%yel"
   test "analog/p6_s0%grn"
   test "analog/p6_s0%yel"
   test "analog/p6_s1%grn"
   test "analog/p6_s1%yel"
   test "analog/p7_s0%grn"
   test "analog/p7_s0%yel"
   test "analog/p7_s1%grn"
   test "analog/p7_s1%yel"
   test "analog/p8_s0%grn"
   test "analog/p8_s0%yel"
   test "analog/p8_s1%grn"
   test "analog/p8_s1%yel"
   test "analog/p9_s0%grn"
   test "analog/p9_s0%yel"
   test "analog/p9_s1%grn"
   test "analog/p9_s1%yel"
   test "analog/p10_s0%grn"
   test "analog/p10_s0%yel"
   test "analog/p10_s1%grn"
   test "analog/p10_s1%yel"
   test "analog/p11_s0%grn"
   test "analog/p11_s0%yel"
   test "analog/p11_s1%grn"
   test "analog/p11_s1%yel"
   test "analog/p12_s0%grn"
   test "analog/p12_s0%yel"
   test "analog/p12_s1%grn"
   test "analog/p12_s1%yel"
   test "analog/p13_s0%grn"
   test "analog/p13_s0%yel"
   test "analog/p13_s1%grn"
   test "analog/p13_s1%yel"
   test "analog/p14_s0%grn"
   test "analog/p14_s0%yel"
   test "analog/p14_s1%grn"
   test "analog/p14_s1%yel"
   test "analog/p15_s0%grn"
   test "analog/p15_s0%yel"
   test "analog/p15_s1%grn"
   test "analog/p15_s1%yel"
   test "analog/p16_s0%grn"
   test "analog/p16_s0%yel"
   test "analog/p16_s1%grn"
   test "analog/p16_s1%yel"
   test "analog/p17_s0%grn"
   test "analog/p17_s0%yel"
   test "analog/p17_s1%grn"
   test "analog/p17_s1%yel"
   test "analog/p18_s0%grn"
   test "analog/p18_s0%yel"
   test "analog/p18_s1%grn"
   test "analog/p18_s1%yel"
   test "analog/p19_s0%grn"
   test "analog/p19_s0%yel"
   test "analog/p19_s1%grn"
   test "analog/p19_s1%yel"
   test "analog/p20_s0%grn"
   test "analog/p20_s0%yel"
   test "analog/p20_s1%grn"
   test "analog/p20_s1%yel"
   test "analog/p21_s0%grn"
   test "analog/p21_s0%yel"
   test "analog/p21_s1%grn"
   test "analog/p21_s1%yel"
   test "analog/p22_s0%grn"
   test "analog/p22_s0%yel"
   test "analog/p22_s1%grn"
   test "analog/p22_s1%yel"
   test "analog/p23_s0%grn"
   test "analog/p23_s0%yel"
   test "analog/p23_s1%grn"
   test "analog/p23_s1%yel"
   test "analog/cr101%blu"
   test "analog/p5v%grn"
   test "analog/p12v%grn"
   test "analog/q27%q"
   test "analog/q23%q"
!@ test "analog/q47%q"    !nostuff
subend

sub VectorlessTest (Status_Code, Message$)
global Status

   if Message$ <> "" then  print tab(5);Message$
   Status = Status_Code
 ! test "testjet"        !Verify
subend

sub Polarity_Check (Status_Code, Message$)
global Status

!   if Message$ <> "" then  print tab(5);Message$
!   Status = Status_Code
subend

sub Connect_Check (Status_Code, Message$)
global Status

!   if Message$ <> "" then  print tab(5);Message$
!   Status = Status_Code
subend

sub Analog_Cluster_Tests (Status_Code, Message$)
global Status

!   if Message$ <> "" then  print tab(5);Message$
!   Status = Status_Code
subend

sub Verify_Grounds (Status_Code, Message$)
global Status

!   if Message$ <> "" then  print tab(5);Message$
!   Status = Status_Code
subend

sub Analog_Prepowered_Tests (Status_Code, Message$)
global Status

   if Message$ <> "" then  print tab(5);Message$
   Status = Status_Code
   powered
   test "analog/q1"            ! NCH
   test "analog/q1_q0"         ! NCH
   test "analog/q1_q1"         ! NCH
   test "analog/q1_q2"         ! NCH
   test "analog/q2_q0"         ! NCH
   test "analog/q2_q1"         ! NCH
   test "analog/q2_q2"         ! NCH
   test "analog/q3"            ! NCH
   test "analog/q15"           ! NCH
   test "analog/q24"           ! NCH
subend

sub Enter_Second_Stage
   wait 1
   auxconnect 5
   wait 1
   faoff 2
!  print tab(5);"Long Travel Probe Mode"

subend

 sub Out_Second_Stage
   call Counter | faon 2
   auxdisconnect 5
   print tab(5);"Short Travel Probe Mode"
   unpowered

subend

sub P12V_Current_Check
  TimeOut = msec
  loop
    rps 3, V3, I3 !print tab(5);"PS3: ";V3;I3
    rps 4, V4, I4 !print tab(5);"PS4: ";V4;I4
    rps 7, V7, I7 !print tab(5);"PS7: ";V7;I7
    rps 8, V8, I8 !print tab(5);"PS8: ";V8;I8
    rps 11, V11, I11 !print tab(5);"PS11: ";V11;I11
    rps 12, V12, I12 !print tab(5);"PS12: ";V12;I12
    rps 15, V15, I15 !print tab(5);"PS1: ";V15;I15
    rps 16, V16, I16 !print tab(5);"PS1: ";V16;I16
    exit if I3+I4+I7+I8+I11+I12+I15+I16 > 2       ! > 2A
    exit if (msec-TimeOut)/1000 > 20                          ! >20 s
    wait 1
  end loop
  rps 5, V1, I1 |print tab(5);"P3V3_STBY: ";V1;"V";I1;"A"
  print tab(5);"P12V: "; V3; "V"; I3+I4+I7+I8+I11+I12+I15+I16; "A"
subend
!#####################################################################
sub Check_Power_Rails (Status_Code, Message$)
global Status
global Red$, Green$, Blue$, Yellow$, Black$, Magenta$
  Status = Status_Code
  wait 10
  call P12V_Current_Check
  print tab(8),Yellow$& "Checking power rails on the unit ..."
  test "analog/pwr_check"
if dutfailed then
    print tab(8),Red$& "Some voltages have FAILED ..."
       else
    print tab(8),Green$& "All voltages have PASSED ..."
end if
subend
!#####################################################################
sub Setup_Power_Supplies (Status_Code, Message$)
global Status
global Pslimit, Psgroup(*), True, False
global PMC_On
global Red$, Blue$, Yellow$, Green$, Black$, Cyan$

   if Message$ <> "" then  print tab(5);Message$
   Status = Status_Code

!# gpconnect "MIFPGA_POR_L" to "P3_3VA"
 ! gpconnect "DB_PWR_EN" to "P3_3VA"
   cps
! ------ CLOCK DIVIDER ------
   sps 1,3.30,1.00
! ------ COOLING GUN ------
   sps 6,20.0,1.00
   sps 5,3.30,2.00  !P3V3_STBY
   sps 3,12.00,2.00;optimize !P12V
   sps 4,12.10,2.00;optimize !P12V
   sps 7,12.10,2.00;optimize !P12V
   sps 8,12.10,2.00;optimize !P12V
   sps 11,12.10,2.00;optimize !P12V
   sps 12,12.10,2.00;optimize !P12V
   sps 15,12.10,2.00;optimize !P12V
   sps 16,12.10,2.00;optimize !P12V

   wait 5
  gpconnect "DB_PWR_EN" to "P3_3VA"

   Pslimit = pslimit
   pass device
   Psgroup(1) = 52428     ! CCCC (hex)
   Psgroup(2) = 16     ! 10 (hex)
   Disabled = False
   for I = 1 to 2
      A = binand (Pslimit,Psgroup(I))
      if not bineor (A,Psgroup(I)) then
         if not Disabled then
            dps
            fail device
            Disabled = True
         end if
      else
         Pslimit = binand (Pslimit,bincmp(Psgroup(I)))
      end if
   next I
   if dutfailed then
      I = 1
      for Pscount = 1 to 16
         if binand (Pslimit,I) then
            report "Power Supply Number "
            report Pscount
            report "In Current Limit"
         end if
         I = 2*I
      next Pscount
      report "Power Supplies may be in parallel."
      report "________________________________________"
      report "Check for backwards"
      report "IC's or Capacitors."
      report "________________________________________"
   end if
subend

sub Setup_Power_Supplies_PreProg (Status_Code, Message$)
global Status
global Pslimit, Psgroup(*), True, False
global PMC_On
global Red$, Green$, Black$
Vuel = 0
   if Message$ <> "" then  print tab(5);Message$
   CiscoPower:
   Status = Status_Code

!# gpconnect "MIFPGA_POR_L" to "P3_3VA"
   gpconnect "DB_PWR_EN" to "P3_3VA"
   cps
!------ CLOCK DIVIDER ------
   sps 1,3.30,1.00
!------ COOLING GUN ------
   sps 6,20.0,1.00
   sps 5,3.30,2.00  !P3V3_STBY
   sps 3,12.00,2.00;optimize !P12V
   sps 4,12.10,2.00;optimize !P12V
   sps 7,12.10,2.00;optimize !P12V
   sps 8,12.10,2.00;optimize !P12V
   sps 11,12.10,2.00;optimize !P12V
   sps 12,12.10,2.00;optimize !P12V
   sps 15,12.10,2.00;optimize !P12V
   sps 16,12.10,2.00;optimize !P12V

   Pslimit = pslimit
   pass device
   Psgroup(1) = 52428     ! CCCC (hex)
   Psgroup(2) = 16     ! 10 (hex)
   Disabled = False
   for I = 1 to 2
      A = binand (Pslimit,Psgroup(I))
      if not bineor (A,Psgroup(I)) then
         if not Disabled then
            dps
            fail device
            Disabled = True
         end if
      else
         Pslimit = binand (Pslimit,bincmp(Psgroup(I)))
      end if
   next I
   if dutfailed then
      I = 1
      for Pscount = 1 to 16
         if binand (Pslimit,I) then
            report "Power Supply Number "
            report Pscount
            report "In Current Limit"
         end if
         I = 2*I
      next Pscount
      report "Power Supplies may be in parallel."
      report "________________________________________"
      report "Check for backwards"
      report "IC's or Capacitors."
      report "________________________________________"
   end if
   wait 5

   test "analog\pwr_prog_main"

subend

sub Cycle_Power_On_Board
global PowerMsg$
global Failed_In_Power_Supplies
   call Disconnect_Power_On_Board
   call Setup_Power_Supplies (Failed_In_Power_Supplies, PowerMsg$)
subend

sub Disconnect_Power_On_Board
global PMC_On
global Black$
powered
   print tab(5), Black$&"Disconnecting Power Supplies"
   cps
   sps 3,0.01,2.00;optimize  ! P12V
   sps 4,0.01,2.00;optimize  ! P12V
   sps 7,0.01,2.00;optimize  ! P12V
   sps 8,0.01,2.00;optimize  ! P12V
   sps 11,0.01,2.00;optimize ! P12V
   sps 12,0.01,2.00;optimize ! P12V
   sps 15,0.01,2.00;optimize ! P12V
   sps 16,0.01,2.00;optimize ! P12V
   sps 5,0.01,2.00;optimize  ! P3V3_STBY
   wait 3
   dps
!! wait 3        !! flex  JJSR
   test "analog/pwr_off_check"
   if PMC_On then
    ! Turn off PMC for all or selected channels here
    ! spmc <Channel Id> off
    ! spmc off
   end if
subend

sub BScan_Powered_Shorts_Tests (Status_Code, Message$)
global Status

   if Message$ <> "" then  print tab(5);Message$
   Status = Status_Code
   test "digital/u12_u5_38_ps"
   test "digital/u12_u5_38_dis"
   test "digital/u127_u127_ps"
   test "digital/u127_u127_dis"
subend

sub BScan_Interconnect_Tests (Status_Code, Message$)
global Status

   if Message$ <> "" then  print tab(5);Message$
   Status = Status_Code
   safeguard cool
 ! test "digital/u57"      !LVC157A  !JTAG buffer  !P3_3V    !OK
   test "digital/u29_u1_3_aio"      !OK
   test "digital/u29_u1_3"          !OK
   test "digital/u29_u1_3_dis"      !OK
   safeguard all
subend

sub BScan_Incircuit_Tests (Status_Code, Message$)
global Status

   if Message$ <> "" then  print tab(5);Message$
   Status = Status_Code
   safeguard cool
!  test "digital/u29_connect"       !OK   !Verify
! test "digital/u30_connect"       !OK    !Verify
!  test "digital/u37_connect"       !OK  !!!Verify
!  test "digital/u38_connect"       !OK      !Verify
   test "digital/u1_rt1_2_connect"  !OK
   test "digital/u2_rt1_2_connect"  !OK
   test "digital/u1_rt3_4_connect"  !OK
   test "digital/u2_rt3_4_connect"  !OK
   test "digital/u1_rt5_6_connect"  !OK
!  test "digital/u2_rt5_6_connect"  !OK  !verify
!  test "digital/u1_rt7_8_connect"  !OK        !!inestabilidad
   test "digital/u2_rt7_8_connect"  !OK
   test "digital/u1_rt9_connect"    !OK
   test "digital/u1_3_connect_a"    !OK
   test "digital/u1_3_connect_b"    !OK
   test "digital/u29_u1_3_dis"      !OK
!@ test "digital/u49_connect"       !kill power
   test "digital/u49_u49_dis"       !OK
   safeguard all
subend

sub BScan_Silicon_Nails_Tests (Status_Code, Message$)
global Status

!   if Message$ <> "" then  print tab(5);Message$
!   Status = Status_Code
!   call BScan_Disable_All_Chains
!   if boardfailed then
!      print "BScan disable failure; Silicon Nails tests skipped"
!      subexit
!   end if
subend

sub Cover_Extend_Tests (Status_Code, Message$)
global Status

!   if Message$ <> "" then  print tab(5);Message$

!------------------------------------------------------------------------------
!print "Test Programmer Action Reminder:"
!print "Evaluate, act, and then delete this 'pause' section."

!pause ! Comment out pause and print statements above when evaluation complete.

!------------------------------------------------------------------------------
! This 'pause' section is placed here to remind the test programmer
! that the Cover-Extend tests must be debugged before they can
!
! When you have debugged the Cover-Extend test, you should
! comment out the print/pause statements above.
!------------------------------------------------------------------------------

!   Status = Status_Code
!   call BScan_Disable_All_Chains
!   if boardfailed then
!      print "BScan disable failure; Cover-Extend tests skipped"
!      subexit
!   end if
subend

sub BScan_Disable_All_Chains
!------------------------------------------------------------------------------
print "Test Programmer Action Reminder:"
print "Evaluate, act, and then delete this 'pause' section."

pause ! Comment out pause and print statements above when evaluation complete.

!------------------------------------------------------------------------------
! This 'pause' section is placed here to remind the test programmer
! that the Boundary-Scan disable tests depend upon their respective
! TCK/TMS signals being held in a stable state while other testing
! is done.  This assures that the disabled state of the Boundary-Scan
! chain is not accidentally lost.  Board level circuitry may
! interfere with the persistance of the disabled state.  You may
! need to take additional measures;  for example, you may place your
! own pullup/down resistor in the fixture to assure a stable TMS
! and/or TCK, or utilize a GP relay to disable some TCK oscillator, etc.
! For further explanation, see the Boundary-Scan Manual for the
! section titled 'Maintaining Persistance of Boundary-Scan Disables'.
!
! When you have assured persistance of the disable state, you should
! comment out the print/pause statements above.  It would also be a
! good idea to briefly document here the measures you may have taken
! (if any were needed) to assure persistance of the disables.
!------------------------------------------------------------------------------

!    test "digital/u29_u1_3_dis"
!    test "digital/u49_u49_dis"
subend

sub Digital_Tests (Status_Code, Message$)
global Status

   if Message$ <> "" then  print tab(5);Message$
   Status = Status_Code
   safeguard cool
   test "digital/u1_1v2s"  !SIC453ED               !OK
   test "digital/u1_5"     !IR35215                !OK
   test "digital/u1_rtv1"  !IR35215                !OK
   test "digital/u1_rtv2"  !IR35215                !OK
   test "digital/u1_sf0"   !SIC450ED               !OK
   test "digital/u1_sf1"   !SIC450ED               !OK
   test "digital/u15_5v"   !SIC453ED               !OK
   test "digital/u16_3v3"  !SIC453ED               !OK
   test "digital/u13_pm"   !ISL28022               !OK
   test "digital/u56"      !SI5326                 !OK
   test "digital/u72"      !MAX1668                !OK
   test "digital/u59"      !ZL30772                !OK
   test "digital/u3_a%digital"   !TPS549A20        !OK
   test "digital/u4"       !LVC1G07  !JTAG buffer  !P1V8     !OK
   test "digital/u7"       !LVC244A  !JTAG buffer  !P3_3V    !OK
   test "digital/u25"      !LVC244A  !JTAG buffer  !P1V8     !OK
   test "digital/u46"      !LVC1G07  !JTAG buffer  !P2V5RT1  !OK
   test "digital/u48"      !LVC244A  !JTAG buffer  !P2V5RT1  !OK
   test "digital/u96"      !PI3B3257 !JTAG buffer  !P3_3V    !OK
!# test "digital/u19"      !NC7WZ17   !P3_3V       !OK ! Short Travel Probe For Power Stable.
   test "digital/u20"      !XR33202   !P3_3V       !OK
   test "digital/u21"      !XR33202   !P3_3V       !OK
!# test "digital/u23"      !NC7SZ157  !P3_3V       !OK ! Short Travel Probe For Power Stable.
   test "digital/u26"      !LV595     !P3V3_SFP0   !OK
   test "digital/u27"      !LV595     !P3V3_SFP0   !OK
   test "digital/u31"      !LV595     !P3V3_SFP0   !OK
   test "digital/u32"      !LV595     !P3V3_SFP0   !OK
   test "digital/u35"      !LV595     !P3V3_SFP1   !OK
!!!test "digital/u36"      !LV595     !P3V3_SFP1   !OK  !!!verify
!  test "digital/u40"      !HC164     !P3V3_STBY   !OK
   test "digital/u41"      !PCA9617   !P2_5VA,P1V8 !OK
   test "digital/u42"      !AVC8T245  !P2_5VA,P1V8 !OK
!  test "digital/u55"      !LVC07A    !P3_3V       !OK
   test "digital/u103"     !LV595     !P3V3_SFP0   !OK
   test "digital/u106"     !LV595     !P3V3_SFP0   !OK
   test "digital/u107"     !LV595     !P3V3_SFP0   !OK
   test "digital/u108"     !LV595     !P3V3_SFP0   !OK
   test "digital/u115"     !LV595     !P3V3_SFP1   !OK
   test "digital/u116"     !LV595     !P3V3_SFP1   !OK
   test "digital/u138"     !LVC244A   !P3_3VA      !OK
   test "digital/u8"       !QS3VH257  !P3V3_STBY   !OK
!  test "digital/u10"      !QS3VH257  !P3V3_STBY   !OK
!  test "digital/u12"      !QS3VH257  !P3V3_STBY   !OK !@mifpga_por_l node causing power down
   test "digital/u14"      !CDCLVC1102!P3_3V       !OK
   test "digital/u6"       !CDCLVC1102!P3_3V       !OK
   test "digital/u50"      !LVC2244   !P3_3VA !Power Good Signal !OK
   test "digital/u61"      !LVC2244   !P3_3VA !Power Good Signal !OK
   test "digital/u45"      !LVC1G08   !P3_3VA      !OK
   test "digital/u24"      !ACT2                   !OK
!  test "digital/u43"      !AVC8T245  !P2_5VA,P1V8 !OK
!# test "digital/u5"       !ICS853014 ! Short travel probes for clock buffer
!# test "digital/u13"      !ICS853014 ! Short travel probes for clock buffer
!# test "digital/u17"      !ICS853014 ! Short travel probes for clock buffer
!# test "digital/u28"      !ICS853014 ! Short travel probes for clock buffer
!# test "digital/u63"      !ICS853S011! Short travel probes for clock buffer
!@ test "digital/u52"      !nostuff
!@ test "digital/u33"      !SY89840U !nostuff
!@ test "digital/u47"      !LVC244A !JTAG buffer ,all TCK buffer
!@ test "digital/u54"      !MIROM FLASH
   safeguard all
subend

sub Analog_Functional_Tests (Status_Code, Message$)
global Status

   if Message$ <> "" then  print tab(5);Message$
   Status = Status_Code
   test "analog/u1_6"        !TPS54394 !P3V3_GPS,ANT_5V     !OK
   test "analog/u1_91_5"     !VDD_P0V875                    !OK
   test "analog/u1_91_rtv1"  !P1V0RT1_AVDD                  !OK
   test "analog/u1_91_rtv2"  !P1V0RT2_AVDD                  !OK
   test "analog/u1_92_5"     !VDD_P0V875                    !OK
   test "analog/u1_93_5"     !VDD_P0V875                    !OK
   test "analog/u1_94_5"     !VDD_P0V875                    !OK
   test "analog/u1_95_5"     !VDD_P0V875                    !OK
   test "analog/u1_96_5"     !VDD_P0V875                    !OK
   test "analog/u1_98_5"     !P0_9V                         !OK
   test "analog/u1_98_rtv1"  !P1V0RT1_DVDD                  !OK
   test "analog/u1_98_rtv2"  !P1V0RT2_DVDD                  !OK
   test "analog/u1_a"        !TPS54394 !P1_1VA,P2_5VA       !OK
   test "analog/u1_pm"       !AD8553                        !OK
   test "analog/u3_a"        !TPS549A20  !P3_3VA            !OK
   test "analog/u11"         !TPS54620   !P2V5RT2           !OK
   test "analog/u114"        !TPS54620   !P2V5RT1           !OK
   test "analog/u87"         !PWR_1V8_ADOMAIN               !OK
   test "analog/u3"          !P1V8                          !OK
   test "analog/u1_1v2s%analog"  !VDDHA_1P2V_MAIN           !OK
   test "analog/u1_sf0%analog"   !P3V3_SFP0                 !OK
   test "analog/u1_sf1%analog"   !P3V3_SFP1                 !OK
   test "analog/u15_5v%analog"   !P5V                       !OK
   test "analog/u16_3v3%analog"  !P3V3                      !OK
   safeguard cool
   test "mixed/u1_q0"        !TPS2560DRC                    !OK
   test "mixed/u1_q1"        !TPS2560DRC                    !OK
   test "mixed/u1_q2"        !TPS2560DRC                    !OK
   safeguard all
! ------ CLOCK DIVIDER ------
!  test "analog/u51"         !212M                          !OK
!  test "analog/u2"          !114M                          !OK
!# test "analog/u44"         !125M  Change to short probe for power up
!@ test "analog/u56%freq"    !114M                          !OK !Unstable test
!# test "analog/y3"          !114.285MHz                    !Top probes
!# test "analog/u1"          !24.576M   ! Short travel probes for power stable
!# test "analog/u9"          !25.00M    ! Short travel probes for power stable
!@ test "analog/u44_opt"                                ! Nostuff
!@ test "analog/u53"
subend

sub Regulators_Programming (Status_Code, Message$)
global Status

   if Message$ <> "" then  print tab(5);Message$
   Status = Status_Code

   safeguard cool
   print tab(5); "Programming : u1_1v2s"
   test "programming/u1_1v2s_prog_ver"
   if dutfailed then
     print tab(10);chr$(27)&"&v1SProgramming/Verifying data u1_1v2s has failed  "
   else
     print tab(10);chr$(27)&"&v2SProgramming/Verifying u1_1v2s data has passed "
   end if

   print tab(5); "Programming : u1_sf0"
   test "programming/u1_sf0_prog_ver"
   if dutfailed then
     print tab(10);chr$(27)&"&v1SProgramming/Verifying data u1_sf0 has failed  "
   else
     print tab(10);chr$(27)&"&v2SProgramming/Verifying u1_sf0 data has passed "
   end if

   print tab(5); "Programming : u1_sf1"
   test "programming/u1_sf1_prog_ver"
   if dutfailed then
     print tab(10);chr$(27)&"&v1SProgramming/Verifying data u1_sf1 has failed  "
   else
     print tab(10);chr$(27)&"&v2SProgramming/Verifying u1_sf1 data has passed "
   end if

   print tab(5); "Programming : u15_5v"
   test "programming/u15_5v_prog_ver"
   if dutfailed then
     print tab(10);chr$(27)&"&v1SProgramming/Verifying data u15_5v has failed  "
   else
     print tab(10);chr$(27)&"&v2SProgramming/Verifying u15_5v data has passed "
   end if

   print tab(5); "Programming : u16_3v3"
   test "programming/u16_3v3_prog_ver"
   if dutfailed then
     print tab(10);chr$(27)&"&v1SProgramming/Verifying data u16_3v3 has failed  "
   else
     print tab(10);chr$(27)&"&v2SProgramming/Verifying u16_3v3 data has passed "
   end if
   safeguard all
subend

sub Functional_Tests (Status_Code, Message$)
global Option
global Status
global HDR1(*),HDR2(*),HDR3(*)
global EE_D1(*),EE_D2(*),EE_D3(*)
global XSUM1(*),XSUM2(*),XSUM3(*)
global EE_R1(*),EE_R2(*),EE_R3(*)
global Serial$,Board$,Board_Rev$
global Act2_Vendor$,Act2_ch1,Act2_ch2,Act2_ch3,Act2EprPath$,Act2_Status
global Cookie_pass, Deviation$, Assembly$
global Blue$
Cookie_pass = 0
Status = Status_Code

  call CheckAct2Vendor

  Start1 = msec  ! To evaluate test time for start of conversion
  call Convert_Serial_Number(Serial$)
  call EE_Setup_act2
  Start2 = msec   ! To evaluate test time for start of programming
  print tab(10),Blue$&"Programming Data to ACT2"
!------------------------------------------------------------------------------
safeguard cool
test Act2_Vendor$&"/u24%pro_p1";HDR1(*),EE_D1(*),XSUM1(*),EE_R1(*)|Act2_ch1 = 1
test Act2_Vendor$&"/u24%pro_p2";HDR2(*),EE_D2(*),XSUM2(*),EE_R2(*)|Act2_ch2 = 1
test Act2_Vendor$&"/u24%pro_p3";HDR3(*),EE_D3(*),XSUM3(*),EE_R3(*)|Act2_ch3 = 1
safeguard all
if dutfailed then
    report "      act2 Data Programming Failed."
    goto ACT2END
end if
Start3 = msec ! To evaluate test time for start of read/dump
call Read_EEprom

if boardfailed then
   report "      act2(!????? location) Data Read Failed."
   goto ACT2END
end if

!!!!**********************************************************
! To evaluate test time for start of compare
Start4 = msec

! This is a Cisco Requirement have to implement in all project
    !*************EEPROM COOKIE CHECKING******************
    if not dutfailed then Cookie_pass = Cookie_pass + 1

!@Compare_result = 1
!@copy Act2EprPath$&"\EE_Data_Hex_"&Serial$[1;11] over "EE_Data1_Hex"


!@execute "sed -n '1,4p' EE_Data1_Hex > EE_read_Hex",Er; append
!@execute "sed -n '7,54p' EE_Data1_Hex >> EE_read_Hex",Er; append
!@execute "sed -n '75, 164p' EE_Data1_Hex >> EE_read_Hex",Er; append
!@execute "sed -n '167, 512p' EE_Data1_Hex >> EE_read_Hex",Er; append

! Create a master file for you project with the below naming convention
! Exclude variable data between two serial numbers
! Serial number, check sum

!????? need check the gold board hex read file name
!@if (Deviation$ = "D577486") then
!@print tab(5);chr$(27)&"&v7S The board follows deviation D577486..."
!@execute "diff EE_master_Hex_102931-01_B0_D577486 EE_read_Hex",Compare_result;append
!@ else
!@print tab(5);chr$(27)&"&v2S The board is running normal process..."
!@execute "diff EE_master_Hex_102931-01_B0 EE_read_Hex",Compare_result;append
!@end if

!@  if Compare_result = 0 then Cookie_pass = Cookie_pass + 1

   Status = Status_Code

! This is a Cisco Requirement have to implement in all project
!@if Cookie_pass = 2 then
!@  print tab(6),chr$(27)&"&v2S PCAMAP Programming and Compare Passed"
!@   else
!@   print tab(6),chr$(27)&"&v1S PCAMAP Programming and Compare failed"
!@   print "      Call TECHNICIAN          "
!@   print "      Serial Number: ";Serial$[1;11]

!@   fail device

!@   report ""
!@   report " --------------------------------------"
!@   report " PCAMAP Programming and Compare failed "
!@   report " Serial Number: ";Serial$[1;11]
!@   report " --------------------------------------"
!@   report ""
! Time delay for operator to see the failure message
!@wait 2
!@end if

! To evalute Test time for each section of the program subroutine
! uncomment the print stmt if needed to review the programming
Start5=msec
Result1 = (Start2-Start1)/1000
  print "EEprom Programming Test Time with Conversion is "; Result1
Result1 = (Start3-Start2)/1000
  print "EEprom Programming Test Time is "; Result1
Result1 = (Start4-Start3)/1000
  print "EEprom Read/Dump Test Time is "; Result1
Result1 = (Start5-Start4)/1000
  print "EEprom Compare with Master File Test Time is "; Result1
Result1 = (Start5-Start1)/1000
print "    Total Test Time for EEprom Program/Verify is ";(Result1);"secs"
ACT2END:
subend
sub Convert_Serial_Number(Serial$)
global Option, Mem_Table(*)
dim Test(1:20)

! Store Serial # to Memory Table
! Check for NULL Character

!Serial$ = "FDO25031NXF" !!For debug
 Serial$ = Serial$ &"\\\\\\\\\"
!print Serial$
 for Z = 1 to 10
     if num(Serial$[(2*Z-1);1]) = 92 then
          Test(2*Z-1) = 0  ! Odd order 1,3,5,7,..19
       else
          Test(2*Z-1) = shift(num(Serial$[(2*Z-1);1]), -8)
     end if
     if num(Serial$[2*Z;1]) = 92 then    ! reset "\" to "0" null
          Test(2*Z) = 0  ! Even order 2,4,6,8,..20
       else
          Test(2*Z) = num(Serial$[2*Z;1])
     end if
 next Z

 for J = 1 to 10
      Mem_Table(26+J) = Test(2*J-1) + Test(2*J) ! Mem_Table(27-36)
 next J

subend

sub EE_Setup_act2

global Serializing, Serial_Num_Writing
global EE_D1(*),EE_R1(*)
global EE_D2(*),EE_R2(*)
global EE_D3(*),EE_R3(*)
global HDR1(*),HDR2(*),HDR3(*)
global XSUM1(*),XSUM2(*),XSUM3(*)
global Mem_Table(*)
global Read_Data(*)
global Option ,Board$, Board_Rev$
global Check_EEPROM,True,False,Serial$
global Board_BOM$, Deviation$,Assembly$,Green$, Red$
dim Header1(0:15),Header2(0:15),Header3(0:15)
dim Test(1:20)
dim Mac_Temp$(1:20)
!Board_Rev$ = "06"
!~print Board_Rev$
!################################################################### #####!
!** SPROM COMMON BLOCK                                                   !
!** BLOCK 1  in WORD = (16 bits)                                         !
!################################################################### #####!
  print ""
  print tab(5); "IDEPROM PROGRAM VERSION"
  print tab(5); "-----------------------"

  Block_sig_0_1 = hti("ABAB") ! Hex           ! Byte 00-01 ! Address 0
!###########################################################################
  Block_ver1 = 3     ! Dec                    ! Byte 02    ! Address 1
  Block_len1 = 160   ! Dec                    ! Byte 03    ! Address 1
!###########################################################################
  Block_ver_len_2_3 = shift(Block_ver1,-8) + Block_len1

  Check_sum_4_5   = 0    ! Dec                ! Byte 04-05 ! Address 2
  Eprom_size_6_7  = 65535 ! Dec               ! Byte 06-07 ! Address 3
  Block_count_8_9 = 3    ! Dec                ! Byte 08-09 ! Address 4

!###########################################################################
!* FRU CODE : FABRIC
!###########################################################################
  Fru_maj_10_11 = hti("6002")  ! Hex          ! Byte 0A-0B ! Address 5
  Fru_min_12_13 = hti("0000")  ! Hex          ! Byte 0C-0D ! Address 6

!###########################################################################
!* OEM String : Fixed "Cisco Systems"
!###########################################################################
  OEM_Str$ = "Cisco Systems, Inc."            ! Byte 0E-21 ! Address 7 - 16
  call Chklength_S(OEM_Str$,20)

!###########################################################################
!! Product Number
!###########################################################################
  Prod_Num$ = "N9K-C93180YC-FX3"                 ! Byte 22-35 ! Addres 17- 26
  Product$ = Prod_Num$
  print tab(5); "Product Number: "; Prod_Num$
  call Chklength_S(Prod_Num$,20)

!###########################################################################
!! Serial Number
!! Mem_Table(27-36)  ! Generated at Serial Routine
!###########################################################################
!! Serial$ = ""                                 ! Byte 36-49 ! Addres 27- 36

!###########################################################################
!! Board Part Number ! Reset = 0 ! Ex.73-15576-03 => 73/15287/04
!###########################################################################
  Part_N_74_89$     = Board$                 ! Byte 4A-59 ! Address 37-44
  print tab(5); "Part Number: "; Part_N_74_89$
  call Chklength_S(Part_N_74_89$,16)

!###########################################################################
!! Part Number Revision
!###########################################################################
  Part_R_90_93$  = Board_Rev$  !             ! Byte 5A-5D ! Address 45
  print tab(5); "Part Number Revision: "; Part_R_90_93$
  call Chklength_S(Part_R_90_93$,4)

!! Mfg Deviation !
!!====================================================== ======
if (Deviation$ = "D577486" ) then
  print tab(5);chr$(27)&"&v7S The board follows deviation D577486..."
  Mfg_Dev_94_113$ = "D577486"    ! Byte 5E-71 ! Address 47-56
 else
  print tab(5);chr$(27)&"&v2S The board is running normal process..."
  Mfg_Dev_94_113$ = "00000000000000000000"    ! Byte 5E-71 ! Address 47-56
end if
  call Chklength_S(Mfg_Dev_94_113$,20)

!!====================================================== ======
!! Hardware Version ! Reset = 0
!!====================================================== ======

  Hw_Rev_maj_114_115 = 1      !high byte   ! Byte 72-73 ! Address 57
  Hw_Rev_min_116_117 = 0      !low byte    ! Byte 74-75 ! Address 58

  print tab(5); "Hardware Version: ";val$(Hw_Rev_maj_114_115); ".";  val$(Hw_Rev_min_116_117)

!!====================================================== ======
!! Manufacturing Bits
!!====================================================== ======
  Mfg_bits_118_119 = 0                        ! Byte 76-77 ! Address 59

!!====================================================== ======
!! Engineering Bits
!!====================================================== ======
  Eng_bits_120_121 = 1                        ! Byte 78-79 ! Address 60

!!====================================================== ======
!!SNMPOID Number ! TBD
!!====================================================== ======

  SOID_122 = 0
  SOID_123 = 0
  SOID_122_123 = shift(SOID_122,-8) + SOID_123  ! Byte 7A-7B ! Address 61
  SOID_124 = 0
  SOID_125 = 0
  SOID_124_125 = shift(SOID_124,-8) + SOID_125  ! Byte 7C-7D ! Address 62
  SOID_126 = 0
  SOID_127 = 0
  SOID_126_127 = shift(SOID_126,-8) + SOID_127  ! Byte 7E-7F ! Address 63
  SOID_128 = 0
  SOID_129 = 0
  SOID_128_129 = shift(SOID_128,-8) + SOID_129  ! Byte 80-81 ! Address 64
  SOID_130 = 0
  SOID_131 = 0
  SOID_130_131 = shift(SOID_130,-8) + SOID_131  ! Byte 82-83 ! Address 65
  SOID_132 = 0
  SOID_133 = 0
  SOID_132_133 = shift(SOID_132,-8) + SOID_133  ! Byte 84-85 ! Address 66
  SOID_134 = 0
  SOID_135 = 0
  SOID_134_135 = shift(SOID_134,-8) + SOID_135  ! Byte 86-87 ! Address 67
  SOID_136 = 0
  SOID_137 = 0
  SOID_136_137 = shift(SOID_136,-8) + SOID_137  ! Byte 88-89 ! Address 68

!!====================================================== ======
!! Power Consumption
!!====================================================== ======
  PWR_Com_138_139 = -5008                       ! Byte 8A-8B ! Address 69
  PWR_Com_138_139 = binand (PWR_Com_138_139,65535)

!!====================================================== ======
!! RMA Failure Code ! Reset = 0
!!====================================================== ======
  RMA_Fco_140_141 = 0                         ! Byte 8C-8D ! Address 70
  RMA_Fco_142_143 = 0                         ! Byte 8E-8F ! Address 71

Hola$ = "1"

if Assembly$ = "73-102931-02 A0" then

  print tab(10);Green$;"Superfuzz AC REV 02 A0"

!!====================================================== ======
!!CLEI CODES
!!====================================================== ======
  CLEI_Code_144_155$ = "INMGF00CRE"         ! Byte 90-9B ! Address 72-77
  call Chklength_S(CLEI_Code_144_155$,12)
!!====================================================== ======
!!VID
!!====================================================== ======

  VID_156_159$ = "V05"                          ! Byte 9C-9F ! Address 78-79
  call Chklength_S(VID_156_159$,4)

  Hola$ = "0"

end if

if Assembly$ = "73-102931-03 A0" then

  print tab(10);Green$;"Superfuzz AC REV 03 A0"

!!====================================================== ======
!!CLEI CODES
!!====================================================== ======
  CLEI_Code_144_155$ = "INMGF00CRF"         ! Byte 90-9B ! Address 72-77
  call Chklength_S(CLEI_Code_144_155$,12)
!!====================================================== ======
!!VID
!!====================================================== ======

  VID_156_159$ = "V06"                          ! Byte 9C-9F ! Address 78-79
  call Chklength_S(VID_156_159$,4)

  Hola$ = "0"

end if

if Hola$ = "1" then
  print tab(10);Red$;"Ensamble no dado de alta PCAMAP"
  fail device
end if

!################################################################### #####!
!** SPROM FRU Specific Block                                             !
!** BLOCK 2  in WORD = (16 bits)                                         !
!################################################################### #####!
  Block_Sig_160_161 = hti("6002")  ! Hex       ! Byte A0-A1 ! Address 80
    Block_ver2 = 2                             ! Byte A2-A3 ! Address 81
    Block_len2 = 103
  Block_ver_len_162_163 = shift(Block_ver2,-8) + Block_len2

!!====================================================== ======
!! Block 2 Check Sum
!!====================================================== ======
   Check_sum_164_165 = 0                       ! Byte A4-A5 ! Address 82

!!====================================================== ======
!! Feature Bits
!!====================================================== ======
   Feature_b_166_167 = hti("0000")             ! Byte A6-A7 ! Address 83
   Feature_b_168_169 = hti("0000")             ! Byte A8-A9 ! Address 84
   Feature_b_170_171 = hti("0000")             ! Byte AA-AB ! Address 85
   Feature_b_172_173 = hti("0000")             ! Byte AC-AD ! Address 86

!!====================================================== ======
! Hardware Changes Bits
!!====================================================== ======
   HChange_b_174_175 = hti("0000")             ! Byte AE-AF ! Address 87
   HChange_b_176_177 = hti("0000")             ! Byte B0-B1 ! Address 88
   HChange_b_178_179 = hti("0000")             ! Byte B2-B3 ! Address 89
   HChange_b_180_181 = hti("1114")             ! Byte B4-B5 ! Address 90   !E1-PPLT2 0X1, E2-PPLT2 0X10

!!====================================================== ======
!! Card_Index
!!====================================================== ======
   Card_indx_182_183 = 21212                   ! Byte B6-B7 ! Address 91
   print tab(5); "Feature Index: "; val$(Card_indx_182_183)

!!====================================================== ======
!! Mac_base
!!====================================================== ======
! TBD

   Mac_base_184_185  = 00                     ! Byte B8-B9 ! Address 92
   Mac_base_186_187  = 00                     ! Byte BA-BB ! Address 93
   Mac_base_188_189  = 00                     ! Byte BC-BD ! Address 94

!!====================================================== ======
!! Mac_length
!!====================================================== ======
   Mac_len_190_191  = 100                       ! Byte BE-BF ! Address 95

!!====================================================== ======
!! Cpu_Epld_Num
!!====================================================== ======
   Cpu_Num_192      = 0                       ! Byte C0-C1 ! Address 96
   Epld_Num_193     = 0
   Cpu_Epld_192_193 = shift( Cpu_Num_192, -8) + Epld_Num_193

!!====================================================== ======
!! Epld_Version
!!====================================================== ======
   Epld_A_194_195   = 0                    ! Byte C2-C3 ! Address 97
   Epld_B_196_197   = 0                    ! Byte C4-C5 ! Address 98
   Epld_C_198_199   = 0                    ! Byte C6-C7 ! Address 99
   Epld_D_200_201   = 0                    ! Byte C8-C9 ! Address 100
   Epld_E_202_203   = 0                    ! Byte CA-CB ! Address 101
   Epld_F_204_205   = 0                    ! Byte CC-CD ! Address 102
   Epld_G_206_207   = 0                    ! Byte CE-CF ! Address 103
   Epld_H_208_209   = 0                    ! Byte D0-D1 ! Address 104
   Epld_I_210_211   = 0                    ! Byte D2-D3 ! Address 105
   Epld_J_212_213   = 0                    ! Byte D4-D5 ! Address 106
   Epld_K_214_215   = 0                    ! Byte D6-D7 ! Address 107
   Epld_L_216_217   = 0                    ! Byte D8-D9 ! Address 108
   Epld_M_218_219   = 0                    ! Byte DA-DB ! Address 109
   Epld_N_220_221   = 0                    ! Byte DC-DD ! Address 110
   Epld_O_222_223   = 0                    ! Byte DE-DF ! Address 111

!!====================================================== ======
!! Port Type Number !Tony
!!====================================================== ======
   Port_Num_224_225_1 = 2
   Port_Num_224_225_2 = 54
   Port_Num_224_225 = shift( Port_Num_224_225_1, -8) +  Port_Num_224_225_2
   Port_Num_226_227_1 = 7
   Port_Num_226_227_2 = 1
   Port_Num_226_227 = shift( Port_Num_226_227_1, -8) +  Port_Num_226_227_2
   Port_Num_228_229_1 = 0
   Port_Num_228_229_2 = 0
   Port_Num_228_229 = shift( Port_Num_228_229_1, -8) +  Port_Num_228_229_2
   Port_Num_230_231_1 = 0
   Port_Num_230_231_2 = 0
   Port_Num_230_231 = shift( Port_Num_230_231_1, -8) +  Port_Num_230_231_2
   Port_Num_232_233_1 = 0
   Port_Num_232_233_2 = 0
   Port_Num_232_233 = shift( Port_Num_232_233_1, -8) +  Port_Num_232_233_2
   Port_Num_234_235_1 = 0
   Port_Num_234_235_2 = 0
   Port_Num_234_235 = shift( Port_Num_234_235_1, -8) +  Port_Num_234_235_2
   Port_Num_236_237_1 = 0
   Port_Num_236_237_2 = 0
   Port_Num_236_237 = shift( Port_Num_236_237_1, -8) +  Port_Num_236_237_2
   Port_Num_238_239_1 = 0
   Port_Num_238_239_2 = 0
   Port_Num_238_239 = shift( Port_Num_238_239_1, -8) +  Port_Num_238_239_2

!!====================================================== ======
!! Sram_Size
!!====================================================== ======
   Sram_Size_240_241 = 0                      ! Byte F0-F1 ! Address 120

!!====================================================== ======
!! Sensor Major/ Minor
!!====================================================== ======
!* Sensor # 1
   Sensor_242 = 70                              ! Byte F2-F3 ! Address 121
   Sensor_243 = 42
   Sensor_242 = binand (Sensor_242,255)
   Sensor_243 = binand (Sensor_243,255)
   Sensor_242_243 = shift( Sensor_242, -8) + Sensor_243

!* Sensor # 2
   Sensor_244 = 80                               ! Byte F4-F5 ! Address 122
   Sensor_245 = 70
   Sensor_244 = binand (Sensor_244,255)
   Sensor_245 = binand (Sensor_245,255)
   Sensor_244_245 = shift( Sensor_244, -8) + Sensor_245

!* Sensor # 3
   Sensor_246 = 90                                ! Byte F6-F7 ! Address 123
   Sensor_247 = 80
   Sensor_246 = binand (Sensor_246,255)
   Sensor_247 = binand (Sensor_247,255)
   Sensor_246_247 = shift( Sensor_246, -8) + Sensor_247

!* Sensor # 4
   Sensor_248 = -128                              ! Byte F8-F9 ! Address 124
   Sensor_249 = -128
   Sensor_248 = binand (Sensor_248,255)
   Sensor_249 = binand (Sensor_249,255)
   Sensor_248_249 = shift( Sensor_248, -8) + Sensor_249

!* Sensor # 5
   Sensor_250 = 110                              ! Byte FA-FB ! Address 125
   Sensor_251 = 100
   Sensor_250 = binand (Sensor_250,255)
   Sensor_251 = binand (Sensor_251,255)
   Sensor_250_251 = shift( Sensor_250, -8) + Sensor_251

!* Sensor # 6
   Sensor_252 = 110                             ! Byte FC-FD ! Address 126
   Sensor_253 = 90
   Sensor_252 = binand (Sensor_252,255)
   Sensor_253 = binand (Sensor_253,255)
   Sensor_252_253 = shift( Sensor_252, -8) + Sensor_253

!* Sensor # 7
   Sensor_254 = 120                              ! Byte FE-FF ! Address 127
   Sensor_255 = 110
   Sensor_254 = binand (Sensor_254,255)
   Sensor_255 = binand (Sensor_255,255)
   Sensor_254_255 = shift( Sensor_254, -8) + Sensor_255

!* Sensor # 8
   Sensor_256 =  -128                               ! Byte 100-101!Address 128
   Sensor_257 =  -128
   Sensor_256 = binand (Sensor_256,255)
   Sensor_257 = binand (Sensor_257,255)
   Sensor_256_257 = shift( Sensor_256, -8) + Sensor_257

!!=====================================
!* Max Connector Power
!!======================================
   Max_Connector_Pwr_258_259 = 5416             ! Byte 102-103!Address 129

!!=====================================
!* Cooling Requirements
!!=====================================
   Cooling_Requirements_260_261 = 100             ! Byte 104-105!Address 130

!!=====================================
!* Ambient Temperature
!!=====================================
   Ambient_Temperature_262 = 55                  ! Byte 106-107!Address 131

!################################################################### #####!
!** SPROM Sensor Block                                                   !
!** BLOCK 3  in WORD = (16 bits)                                         !
!################################################################### #####!
   Block_Sig_263 = hti("60")  ! Hex
   Block_Sig_264 = hti("08")  ! Hex

!!====================================================== ======
!! Block Version Length
!!====================================================== ======
   Block_ver_265 = 1
   Block_len_266 = 71

!!====================================================== ======
!! Block Check Sum
!!====================================================== ======
   Check_sum_267 = 0
   Check_sum_268 = 0

!!====================================================== ======
!! Number of Sensors
!!====================================================== ======
   Number_of_Sensors_269 = 0

   Block_262_263 = shift(Ambient_Temperature_262,-8) + Block_Sig_263
   Block_264_265 = shift(Block_Sig_264,-8) + Block_ver_265
   Block_266_267 = shift(Block_len_266,-8) + Check_sum_267
   Block_268_269 = shift(Check_sum_268,-8) + Number_of_Sensors_269

!!====================================================== ======
!! Sensor Major/ Minor
!!====================================================== ======
!* Sensor # 1
   Sensor_270 = -128
   Sensor_271 = -128
   Sensor_270 = binand (Sensor_270,255)
   Sensor_271 = binand (Sensor_271,255)
   Sensor_270_271 = shift( Sensor_270, -8) + Sensor_271

!* Sensor # 2
   Sensor_272 = -128
   Sensor_273 = -128
   Sensor_272 = binand (Sensor_272,255)
   Sensor_273 = binand (Sensor_273,255)
   Sensor_272_273 = shift( Sensor_272, -8) + Sensor_273

!* Sensor # 3
   Sensor_274 = -128
   Sensor_275 = -128
   Sensor_274 = binand (Sensor_274,255)
   Sensor_275 = binand (Sensor_275,255)
   Sensor_274_275 = shift( Sensor_274, -8) + Sensor_275

!* Sensor # 4
   Sensor_276 = -128
   Sensor_277 = -128
   Sensor_276 = binand (Sensor_276,255)
   Sensor_277 = binand (Sensor_277,255)
   Sensor_276_277 = shift( Sensor_276, -8) + Sensor_277

!* Sensor # 5
   Sensor_278 = -128
   Sensor_279 = -128
   Sensor_278 = binand (Sensor_278,255)
   Sensor_279 = binand (Sensor_279,255)
   Sensor_278_279 = shift( Sensor_278, -8) + Sensor_279

!* Sensor # 6
   Sensor_280 = -128
   Sensor_281 = -128
   Sensor_280 = binand (Sensor_280,255)
   Sensor_281 = binand (Sensor_281,255)
   Sensor_280_281 = shift( Sensor_280, -8) + Sensor_281

!* Sensor # 7
   Sensor_282 = -128
   Sensor_283 = -128
   Sensor_282 = binand (Sensor_282,255)
   Sensor_283 = binand (Sensor_283,255)
   Sensor_282_283 = shift( Sensor_282, -8) + Sensor_283

!* Sensor # 8
   Sensor_284 = -128
   Sensor_285 = -128
   Sensor_284 = binand (Sensor_284,255)
   Sensor_285 = binand (Sensor_285,255)
   Sensor_284_285 = shift( Sensor_284, -8) + Sensor_285

!* Sensor # 9
   Sensor_286 = -128
   Sensor_287 = -128
   Sensor_286 = binand (Sensor_286,255)
   Sensor_287 = binand (Sensor_287,255)
   Sensor_286_287 = shift( Sensor_286, -8) + Sensor_287

!* Sensor # 10
   Sensor_288 = -128
   Sensor_289 = -128
   Sensor_288 = binand (Sensor_288,255)
   Sensor_289 = binand (Sensor_289,255)
   Sensor_288_289 = shift( Sensor_288, -8) + Sensor_289

!* Sensor # 11
   Sensor_290 = -128
   Sensor_291 = -128
   Sensor_290 = binand (Sensor_290,255)
   Sensor_291 = binand (Sensor_291,255)
   Sensor_290_291 = shift( Sensor_290, -8) + Sensor_291

!* Sensor # 12
   Sensor_292 = -128
   Sensor_293 = -128
   Sensor_292 = binand (Sensor_292,255)
   Sensor_293 = binand (Sensor_293,255)
   Sensor_292_293 = shift( Sensor_292, -8) + Sensor_293

!* Sensor # 13
   Sensor_294 = -128
   Sensor_295 = -128
   Sensor_294 = binand (Sensor_294,255)
   Sensor_295 = binand (Sensor_295,255)
   Sensor_294_295 = shift( Sensor_294, -8) + Sensor_295

!* Sensor # 14
   Sensor_296 = -128
   Sensor_297 = -128
   Sensor_296 = binand (Sensor_296,255)
   Sensor_297 = binand (Sensor_297,255)
   Sensor_296_297 = shift( Sensor_296, -8) + Sensor_297

!* Sensor # 15
   Sensor_298 = -128
   Sensor_299 = -128
   Sensor_298 = binand (Sensor_298,255)
   Sensor_299 = binand (Sensor_299,255)
   Sensor_298_299 = shift( Sensor_298, -8) + Sensor_299

!* Sensor # 16
   Sensor_300 = -128
   Sensor_301 = -128
   Sensor_300 = binand (Sensor_300,255)
   Sensor_301 = binand (Sensor_301,255)
   Sensor_300_301 = shift( Sensor_300, -8) + Sensor_301

!* Sensor # 17
   Sensor_302 = -128
   Sensor_303 = -128
   Sensor_302 = binand (Sensor_302,255)
   Sensor_303 = binand (Sensor_303,255)
   Sensor_302_303 = shift( Sensor_302, -8) + Sensor_303

!* Sensor # 18
   Sensor_304 = -128
   Sensor_305 = -128
   Sensor_304 = binand (Sensor_304,255)
   Sensor_305 = binand (Sensor_305,255)
   Sensor_304_305 = shift( Sensor_304, -8) + Sensor_305

!* Sensor # 19
   Sensor_306 = -128
   Sensor_307 = -128
   Sensor_306 = binand (Sensor_306,255)
   Sensor_307 = binand (Sensor_307,255)
   Sensor_306_307 = shift( Sensor_306, -8) + Sensor_307

!* Sensor # 20
   Sensor_308 = -128
   Sensor_309 = -128
   Sensor_308 = binand (Sensor_308,255)
   Sensor_309 = binand (Sensor_309,255)
   Sensor_308_309 = shift( Sensor_308, -8) + Sensor_309

!* Sensor # 21
   Sensor_310 = -128
   Sensor_311 = -128
   Sensor_310 = binand (Sensor_310,255)
   Sensor_311 = binand (Sensor_311,255)
   Sensor_310_311 = shift( Sensor_310, -8) + Sensor_311

!* Sensor # 22
   Sensor_312 = -128
   Sensor_313 = -128
   Sensor_312 = binand (Sensor_312,255)
   Sensor_313 = binand (Sensor_313,255)
   Sensor_312_313 = shift( Sensor_312, -8) + Sensor_313

!* Sensor # 23
   Sensor_314 = -128
   Sensor_315 = -128
   Sensor_314 = binand (Sensor_314,255)
   Sensor_315 = binand (Sensor_315,255)
   Sensor_314_315 = shift( Sensor_314, -8) + Sensor_315

!* Sensor # 24
   Sensor_316 = -128
   Sensor_317 = -128
   Sensor_316 = binand (Sensor_314,255)
   Sensor_317 = binand (Sensor_315,255)
   Sensor_316_317 = shift( Sensor_314, -8) + Sensor_315

!* Sensor # 25
   Sensor_318 = -128
   Sensor_319 = -128
   Sensor_318 = binand (Sensor_314,255)
   Sensor_319 = binand (Sensor_315,255)
   Sensor_318_319 = shift( Sensor_314, -8) + Sensor_315

!* Sensor # 26
   Sensor_320 = -128
   Sensor_321 = -128
   Sensor_320 = binand (Sensor_314,255)
   Sensor_321 = binand (Sensor_315,255)
   Sensor_320_321 = shift( Sensor_314, -8) + Sensor_315

!* Sensor # 27
   Sensor_322 = -128
   Sensor_323 = -128
   Sensor_322 = binand (Sensor_314,255)
   Sensor_323 = binand (Sensor_315,255)
   Sensor_322_323 = shift( Sensor_314, -8) + Sensor_315

!* Sensor # 28
   Sensor_324 = -128
   Sensor_325 = -128
   Sensor_324 = binand (Sensor_314,255)
   Sensor_325 = binand (Sensor_315,255)
   Sensor_324_325 = shift( Sensor_314, -8) + Sensor_315

!* Sensor # 29
   Sensor_326 = -128
   Sensor_327 = -128
   Sensor_326 = binand (Sensor_314,255)
   Sensor_327 = binand (Sensor_315,255)
   Sensor_326_327 = shift( Sensor_314, -8) + Sensor_315

!* Sensor # 30
   Sensor_328 = -128
   Sensor_329 = -128
   Sensor_328 = binand (Sensor_314,255)
   Sensor_329 = binand (Sensor_315,255)
   Sensor_328_329 = shift( Sensor_314, -8) + Sensor_315

!* Sensor # 31
   Sensor_330 = -128
   Sensor_331 = -128
   Sensor_330 = binand (Sensor_314,255)
   Sensor_331 = binand (Sensor_315,255)
   Sensor_330_331 = shift( Sensor_314, -8) + Sensor_315

!* Sensor # 32
   Sensor_332 = -128
   Sensor_333 = -128
   Sensor_332 = binand (Sensor_314,255)
   Sensor_333 = binand (Sensor_315,255)
   Sensor_332_333 = shift( Sensor_314, -8) + Sensor_315

!* Data 334 to 383 are all filled with FFFF

   Empty_334_335 = 65535
   Empty_336_337 = 65535
   Empty_338_339 = 65535
   Empty_340_341 = 65535
   Empty_342_343 = 65535
   Empty_344_345 = 65535
   Empty_346_346 = 65535
   Empty_348_349 = 65535
   Empty_350_351 = 65535
   Empty_352_353 = 65535
   Empty_354_355 = 65535
   Empty_356_357 = 65535
   Empty_358_359 = 65535
   Empty_360_361 = 65535
   Empty_362_363 = 65535
   Empty_364_365 = 65535
   Empty_366_367 = 65535
   Empty_368_369 = 65535
   Empty_370_371 = 65535
   Empty_372_373 = 65535
   Empty_374_375 = 65535
   Empty_376_377 = 65535
   Empty_378_379 = 65535
   Empty_380_381 = 65535

!!====================================================== ======
!! Padding
!! Routine below to handle data generation for this field
!!====================================================== ======
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!*************  END OF PCAMAP TABLE ***********************!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!! WARNINGS !! WARNINGS !! WARNINGS !! WARNINGS !! !!!!!!!
!!!!!! WARNINGS !! WARNINGS !! WARNINGS !! WARNINGS !! !!!!!!!
!!!!!! WARNINGS !! WARNINGS !! WARNINGS !! WARNINGS !! !!!!!!!
!!!!!!         DO NOT MODIFY FROM THIS LINE ON         !!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!$$$$$$ GENERATE MEMORY TABLE  $$$$$$$$$$$$$$$$$$$$$$$$$$$$!!
!!====================================================== ====!!
   Mem_Table(0) = Block_sig_0_1
   Mem_Table(1) = Block_ver_len_2_3
   Mem_Table(2) = Check_sum_4_5      !! Xsum1 / BLK 1
   Mem_Table(3) = Eprom_size_6_7
   Mem_Table(4) = Block_count_8_9
   Mem_Table(5) = Fru_maj_10_11
   Mem_Table(6) = Fru_min_12_13
!!
!!
  for V1 = 1 to 20 ! Character Byte
      Temp = num(OEM_Str$[V1;1])
      if Temp = 92 then
         Test(V1) = 0  ! "\" = 92
        else
           Test(V1) = num(OEM_Str$[V1;1])
      end if
  next V1


  for L1 = 0 to 9  ! Word  - For Mem_Table(7-16) Locations
     Mem_Table(7+L1) = shift( Test(2*L1+1), -8 ) + Test(2*L1+2) ! "Cisco..."
  next L1
!!

  for V = 1 to 20 ! Character Byte
      Temp = num(Prod_Num$[V;1])
      if Temp = 92 then
         Test(V) = 0  ! "\" = 92
        else
           Test(V) = num(Prod_Num$[V;1])
      end if
  next V

  for L = 0 to 9  ! Word  - For Mem_Table(17-26) Locations
     Mem_Table(17+L) = shift( Test(2*L+1), -8 ) + Test(2*L+2) ! "WS....."
  next L

!!====================================================== ======
!! Board Part Number ! Reset = 0 ! Ex.73-15576-03 => 73/15287/04
!!====================================================== ======

  for V1 = 1 to 16 ! Character Byte
      Temp = num(Part_N_74_89$[V1;1])
      if Temp = 92 then
         Test(V1) = 0  ! "\" = 92
          else
           Test(V1) = num(Part_N_74_89$[V1;1])
      end if
  next V1

  for L = 0 to 7  ! Word  - For Mem_Table(37-44) Locations
     Mem_Table(37+L) = shift( Test(2*L+1), -8 ) + Test(2*L+2)
  next L

!!====================================================== =========
!! Mem_Table(45-46)
  for V = 1 to 4 ! Character Byte
      Temp = num(Part_R_90_93$[V;1])
      if Temp = 92 then
         Test(V) = 0  ! "\" = 92
        else
           Test(V) = num(Part_R_90_93$[V;1])
      end if
  next V

  for L = 0 to 1  ! Word  - For Mem_Table(45-46) Locations
     Mem_Table(45+L) = shift( Test(2*L+1), -8 ) + Test(2*L+2)
  next L
!!====================================================== =========
!! Mem_Table(47-56)
  for V = 1 to 20 ! Character Byte
      Temp = num(Mfg_Dev_94_113$[V;1])
      if Temp = 92 then
         Test(V) = 0  ! "\" = 92
        else
           Test(V) = num(Mfg_Dev_94_113$[V;1])
      end if
  next V

  for L = 0 to 9  ! Word  - For Mem_Table(47-56) Locations
     Mem_Table(47+L) = shift( Test(2*L+1), -8 ) + Test(2*L+2)
  next L
!!====================================================== =========
   Mem_Table(57) = Hw_Rev_maj_114_115
   Mem_Table(58) = Hw_Rev_min_116_117
   Mem_Table(59) = Mfg_bits_118_119
   Mem_Table(60) = Eng_bits_120_121
   Mem_Table(61) = SOID_122_123
   Mem_Table(62) = SOID_124_125
   Mem_Table(63) = SOID_126_127
   Mem_Table(64) = SOID_128_129
   Mem_Table(65) = SOID_130_131
   Mem_Table(66) = SOID_132_133
   Mem_Table(67) = SOID_134_135
   Mem_Table(68) = SOID_136_137
   Mem_Table(69) = PWR_Com_138_139
   Mem_Table(70) = RMA_Fco_140_141
   Mem_Table(71) = RMA_Fco_142_143

  for V1 = 1 to 12 ! Character Byte
      Temp = num(CLEI_Code_144_155$[V1;1])
      if Temp = 92 then
         Test(V1) = 0  ! "\" = 92
        else
           Test(V1) = num(CLEI_Code_144_155$[V1;1])
      end if
  next V1

  for L1 = 0 to 5  ! Word  - For Mem_Table(7-16) Locations
     Mem_Table(72+L1) = shift( Test(2*L1+1), -8 ) + Test(2*L1+2) ! "Cisco..."
  next L1

!!====================================================== =========

   for V1 = 1 to 4  ! Character Byte
      Temp = num(VID_156_159$[V1;1])
      if Temp = 92 then
         Test(V1) = 0  ! "\" = 92
        else
           Test(V1) = num(VID_156_159$[V1;1])
      end if
   next V1

   for L1 = 0 to 1  ! Word
     Mem_Table(78+L1) = shift( Test(2*L1+1), -8 ) + Test(2*L1+2)
   next L1


!!====================================================== ======
!** BLOCK 2  in WORD = (16 bits)
!!====================================================== ======
   Mem_Table(80) =  Block_Sig_160_161
   Mem_Table(81) =  Block_ver_len_162_163
   Mem_Table(82) =  Check_sum_164_165    !! Xsum2 / BLK 2
   Mem_Table(83) =  Feature_b_166_167
   Mem_Table(84) =  Feature_b_168_169
   Mem_Table(85) =  Feature_b_170_171
   Mem_Table(86) =  Feature_b_172_173
   Mem_Table(87) =  HChange_b_174_175
   Mem_Table(88) =  HChange_b_176_177
   Mem_Table(89) =  HChange_b_178_179
   Mem_Table(90) =  HChange_b_180_181
   Mem_Table(91) =  Card_Indx_182_183
   Mem_Table(92) =  Mac_base_184_185
   Mem_Table(93) =  Mac_base_186_187
   Mem_Table(94) =  Mac_base_188_189
   Mem_Table(95) =  Mac_len_190_191
   Mem_Table(96) =  Cpu_Epld_192_193
   Mem_Table(97) =  Epld_A_194_195
   Mem_Table(98) =  Epld_B_196_197
   Mem_Table(99) =  Epld_C_198_199
   Mem_Table(100) = Epld_D_200_201
   Mem_Table(101) = Epld_E_202_203
   Mem_Table(102) = Epld_F_204_205
   Mem_Table(103) = Epld_G_206_207
   Mem_Table(104) = Epld_H_208_209
   Mem_Table(105) = Epld_I_210_211
   Mem_Table(106) = Epld_J_212_213
   Mem_Table(107) = Epld_K_214_215
   Mem_Table(108) = Epld_L_216_217
   Mem_Table(109) = Epld_M_218_219
   Mem_Table(110) = Epld_N_220_221
   Mem_Table(111) = Epld_O_222_223
   Mem_Table(112) = Port_Num_224_225
   Mem_Table(113) = Port_Num_226_227
   Mem_Table(114) = Port_Num_228_229
   Mem_Table(115) = Port_Num_230_231
   Mem_Table(116) = Port_Num_232_233
   Mem_Table(117) = Port_Num_234_235
   Mem_Table(118) = Port_Num_236_237
   Mem_Table(119) = Port_Num_238_239
   Mem_Table(120) = Sram_Size_240_241
   Mem_Table(121) = Sensor_242_243
   Mem_Table(122) = Sensor_244_245
   Mem_Table(123) = Sensor_246_247
   Mem_Table(124) = Sensor_248_249
   Mem_Table(125) = Sensor_250_251
   Mem_Table(126) = Sensor_252_253
   Mem_Table(127) = Sensor_254_255
   Mem_Table(128) = Sensor_256_257
   Mem_Table(129) = Max_Connector_Pwr_258_259
   Mem_Table(130) = Cooling_Requirements_260_261

!!====================================================== ======
!** BLOCK 3  in WORD = (16 bits)
!!====================================================== ======
   Mem_Table(131) = Block_262_263
   Mem_Table(132) = Block_264_265
   Mem_Table(133) = Block_266_267
   Mem_Table(134) = Block_268_269
   Mem_Table(135) = Sensor_270_271
   Mem_Table(136) = Sensor_272_273
   Mem_Table(137) = Sensor_274_275
   Mem_Table(138) = Sensor_276_277
   Mem_Table(139) = Sensor_278_279
   Mem_Table(140) = Sensor_280_281
   Mem_Table(141) = Sensor_282_283
   Mem_Table(142) = Sensor_284_285
   Mem_Table(143) = Sensor_286_287
   Mem_Table(144) = Sensor_288_289
   Mem_Table(145) = Sensor_290_291
   Mem_Table(146) = Sensor_292_293
   Mem_Table(147) = Sensor_294_295
   Mem_Table(148) = Sensor_296_297
   Mem_Table(149) = Sensor_298_299
   Mem_Table(150) = Sensor_300_301
   Mem_Table(151) = Sensor_302_303
   Mem_Table(152) = Sensor_304_305
   Mem_Table(153) = Sensor_306_307
   Mem_Table(154) = Sensor_308_309
   Mem_Table(155) = Sensor_310_311
   Mem_Table(156) = Sensor_312_313
   Mem_Table(157) = Sensor_314_315
   Mem_Table(158) = Sensor_316_317
   Mem_Table(159) = Sensor_318_319
   Mem_Table(160) = Sensor_320_321
   Mem_Table(161) = Sensor_322_323
   Mem_Table(162) = Sensor_324_325
   Mem_Table(163) = Sensor_326_327
   Mem_Table(164) = Sensor_328_329
   Mem_Table(165) = Sensor_330_331
   Mem_Table(166) = Sensor_332_333
   Mem_Table(167) = Empty_334_335
   Mem_Table(168) = Empty_334_335
   Mem_Table(169) = Empty_336_337
   Mem_Table(170) = Empty_338_339
   Mem_Table(171) = Empty_340_341
   Mem_Table(172) = Empty_342_343
   Mem_Table(173) = Empty_344_345
   Mem_Table(174) = Empty_346_346
   Mem_Table(175) = Empty_348_349
   Mem_Table(176) = Empty_350_351
   Mem_Table(177) = Empty_352_353
   Mem_Table(178) = Empty_354_355
   Mem_Table(179) = Empty_356_357
   Mem_Table(180) = Empty_358_359
   Mem_Table(181) = Empty_360_361
   Mem_Table(182) = Empty_362_363
   Mem_Table(183) = Empty_364_365
   Mem_Table(184) = Empty_366_367
   Mem_Table(185) = Empty_368_369
   Mem_Table(186) = Empty_370_371
   Mem_Table(187) = Empty_372_373
   Mem_Table(188) = Empty_374_375
   Mem_Table(189) = Empty_376_377
   Mem_Table(190) = Empty_378_379
   Mem_Table(191) = Empty_380_381

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!! Checksum Calculations
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! BLOCK 1
  XsumB1 = 0
  for Word =  0 to 79
    if Word = 2 then goto Skip1
     Crc_LB0 = binand (Mem_Table(Word),255)
     Crc_SR8 = binand (shift(Mem_Table(Word), 8),255)
     XsumB1 = XsumB1 + Crc_LB0 + Crc_SR8
     if XsumB1 > 65535 then XsumB1 = binand(XsumB1,65535)
   Skip1:
  next Word

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! BLOCK 2
  XsumB2 = 0
  for Word = 80 to 131
    if Word = 82 then goto Skip2
     Crc_LB0 = binand (Mem_Table(Word),255)
     Crc_SR8 = binand (shift(Mem_Table(Word), 8),255)
     if Word = 131 then
       XsumB2 = XsumB2 + Crc_SR8
     else
       XsumB2 = XsumB2 + Crc_LB0 + Crc_SR8
     end if
     if XsumB2 > 65535 then XsumB2 = binand(XsumB2,65535)
   Skip2:
  next Word

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! BLOCK 3
  XsumB3 = 0

  for Word = 131 to 166
     Crc_LB0 = binand (Mem_Table(Word),255)
     Crc_SR8 = binand (shift(Mem_Table(Word), 8),255)

     if Word = 131 then
       XsumB3 = XsumB3 + Crc_LB0
     else
       XsumB3 = XsumB3 + Crc_LB0 + Crc_SR8
     end if

     if XsumB3 > 65535 then XsumB3 = binand(XsumB3,65535)
  next Word

  Checksum_3_Hex$ = ith$(XsumB3)
  if len(Checksum_3_Hex$)=1 then Checksum_3_Hex$ = "000" & Checksum_3_Hex$
  if len(Checksum_3_Hex$)=2 then Checksum_3_Hex$ = "00" & Checksum_3_Hex$
  if len(Checksum_3_Hex$)=3 then Checksum_3_Hex$ = "0" & Checksum_3_Hex$

  Checksum_3_High$ = Checksum_3_Hex$[1;2]
  Checksum_3_Low$  = Checksum_3_Hex$[3;2]

  Check_sum_267 = hti(Checksum_3_High$)
  Check_sum_268 = hti(Checksum_3_Low$)

  Block_266_267 = shift(Block_len_266,-8) + Check_sum_267
  Block_268_269 = shift(Check_sum_268,-8) + Number_of_Sensors_269

! Store new check sum values

  Mem_Table(2)    =  XsumB1           !block 1
  Mem_Table(82)   =  XsumB2           !blocK 2
  Mem_Table(133)  =  Block_266_267    !block 3
  Mem_Table(134)  =  Block_268_269    !block 3

!! testonly
! print "Check Sum Blk #1 = ", Mem_Table(2)
! print "Check Sum Blk #2 = ", Mem_Table(82)
! print "Check Sum Blk #3 = ", Mem_Table(XX)

for Cnt1 = 0 to 63 !!
   EE_D1(Cnt1*16+0)  = binand(shift(Mem_Table(Cnt1), 8),1)
   EE_D1(Cnt1*16+1)  = binand(shift(Mem_Table(Cnt1), 9),1)
   EE_D1(Cnt1*16+2)  = binand(shift(Mem_Table(Cnt1),10),1)
   EE_D1(Cnt1*16+3)  = binand(shift(Mem_Table(Cnt1),11),1)
   EE_D1(Cnt1*16+4)  = binand(shift(Mem_Table(Cnt1),12),1)
   EE_D1(Cnt1*16+5)  = binand(shift(Mem_Table(Cnt1),13),1)
   EE_D1(Cnt1*16+6)  = binand(shift(Mem_Table(Cnt1),14),1)
   EE_D1(Cnt1*16+7)  = binand(shift(Mem_Table(Cnt1),15),1)
   EE_D1(Cnt1*16+8)  = binand(shift(Mem_Table(Cnt1), 0),1)
   EE_D1(Cnt1*16+9)  = binand(shift(Mem_Table(Cnt1), 1),1)
   EE_D1(Cnt1*16+10) = binand(shift(Mem_Table(Cnt1), 2),1)
   EE_D1(Cnt1*16+11) = binand(shift(Mem_Table(Cnt1), 3),1)
   EE_D1(Cnt1*16+12) = binand(shift(Mem_Table(Cnt1), 4),1)
   EE_D1(Cnt1*16+13) = binand(shift(Mem_Table(Cnt1), 5),1)
   EE_D1(Cnt1*16+14) = binand(shift(Mem_Table(Cnt1), 6),1)
   EE_D1(Cnt1*16+15) = binand(shift(Mem_Table(Cnt1), 7),1)
next Cnt1

  for I = 0 to 1023
   EE_R1(I) = EE_D1(I)
  next I

for Cnt1 = 0 to 63 !!
   EE_D2(Cnt1*16+0)  = binand(shift(Mem_Table(Cnt1+64), 8),1)
   EE_D2(Cnt1*16+1)  = binand(shift(Mem_Table(Cnt1+64), 9),1)
   EE_D2(Cnt1*16+2)  = binand(shift(Mem_Table(Cnt1+64),10),1)
   EE_D2(Cnt1*16+3)  = binand(shift(Mem_Table(Cnt1+64),11),1)
   EE_D2(Cnt1*16+4)  = binand(shift(Mem_Table(Cnt1+64),12),1)
   EE_D2(Cnt1*16+5)  = binand(shift(Mem_Table(Cnt1+64),13),1)
   EE_D2(Cnt1*16+6)  = binand(shift(Mem_Table(Cnt1+64),14),1)
   EE_D2(Cnt1*16+7)  = binand(shift(Mem_Table(Cnt1+64),15),1)
   EE_D2(Cnt1*16+8)  = binand(shift(Mem_Table(Cnt1+64), 0),1)
   EE_D2(Cnt1*16+9)  = binand(shift(Mem_Table(Cnt1+64), 1),1)
   EE_D2(Cnt1*16+10) = binand(shift(Mem_Table(Cnt1+64), 2),1)
   EE_D2(Cnt1*16+11) = binand(shift(Mem_Table(Cnt1+64), 3),1)
   EE_D2(Cnt1*16+12) = binand(shift(Mem_Table(Cnt1+64), 4),1)
   EE_D2(Cnt1*16+13) = binand(shift(Mem_Table(Cnt1+64), 5),1)
   EE_D2(Cnt1*16+14) = binand(shift(Mem_Table(Cnt1+64), 6),1)
   EE_D2(Cnt1*16+15) = binand(shift(Mem_Table(Cnt1+64), 7),1)
next Cnt1

  for I = 0 to 1023
   EE_R2(I) = EE_D2(I)
  next I

for Cnt1 = 0 to 63 !!
   EE_D3(Cnt1*16+0)  = binand(shift(Mem_Table(Cnt1+128), 8),1)
   EE_D3(Cnt1*16+1)  = binand(shift(Mem_Table(Cnt1+128), 9),1)
   EE_D3(Cnt1*16+2)  = binand(shift(Mem_Table(Cnt1+128),10),1)
   EE_D3(Cnt1*16+3)  = binand(shift(Mem_Table(Cnt1+128),11),1)
   EE_D3(Cnt1*16+4)  = binand(shift(Mem_Table(Cnt1+128),12),1)
   EE_D3(Cnt1*16+5)  = binand(shift(Mem_Table(Cnt1+128),13),1)
   EE_D3(Cnt1*16+6)  = binand(shift(Mem_Table(Cnt1+128),14),1)
   EE_D3(Cnt1*16+7)  = binand(shift(Mem_Table(Cnt1+128),15),1)
   EE_D3(Cnt1*16+8)  = binand(shift(Mem_Table(Cnt1+128), 0),1)
   EE_D3(Cnt1*16+9)  = binand(shift(Mem_Table(Cnt1+128), 1),1)
   EE_D3(Cnt1*16+10) = binand(shift(Mem_Table(Cnt1+128), 2),1)
   EE_D3(Cnt1*16+11) = binand(shift(Mem_Table(Cnt1+128), 3),1)
   EE_D3(Cnt1*16+12) = binand(shift(Mem_Table(Cnt1+128), 4),1)
   EE_D3(Cnt1*16+13) = binand(shift(Mem_Table(Cnt1+128), 5),1)
   EE_D3(Cnt1*16+14) = binand(shift(Mem_Table(Cnt1+128), 6),1)
   EE_D3(Cnt1*16+15) = binand(shift(Mem_Table(Cnt1+128), 7),1)
next Cnt1

  for I = 0 to 1023
   EE_R3(I) = EE_D3(I)
  next I

! **********************************************************************

  ! Data For Write Command and Header for page 1.

                                     ! Header for 1st 128 bytes
  for I = 0 to 15                    ! Initialize to $00
    Header1(I) = hti("00")
  next I

  Header1(0)   = hti("25")           ! Write Cookie Command = $25, $00
  Header1(1)   = hti("00")
  Header1(2)   = hti("83")           ! Length of the total message -
                                     !    excluding the command bytes
  Header1(3)   = hti("10")           ! Starting Address high byte
  Header1(4)   = hti("00")           ! Starting Address low byte
  Header1(5)   = hti("80")           ! Number bytes of Cookie,128 bytes

! **********************************************************************

  for I = 0 to 7                                      ! Header
   HDR1(I*16+0)  = binand(shift(Header1(I*2),0),1)
   HDR1(I*16+1)  = binand(shift(Header1(I*2),1),1)
   HDR1(I*16+2)  = binand(shift(Header1(I*2),2),1)
   HDR1(I*16+3)  = binand(shift(Header1(I*2),3),1)
   HDR1(I*16+4)  = binand(shift(Header1(I*2),4),1)
   HDR1(I*16+5)  = binand(shift(Header1(I*2),5),1)
   HDR1(I*16+6)  = binand(shift(Header1(I*2),6),1)
   HDR1(I*16+7)  = binand(shift(Header1(I*2),7),1)
   HDR1(I*16+8)  = binand(shift(Header1(I*2+1),0),1)
   HDR1(I*16+9)  = binand(shift(Header1(I*2+1),1),1)
   HDR1(I*16+10) = binand(shift(Header1(I*2+1),2),1)
   HDR1(I*16+11) = binand(shift(Header1(I*2+1),3),1)
   HDR1(I*16+12) = binand(shift(Header1(I*2+1),4),1)
   HDR1(I*16+13) = binand(shift(Header1(I*2+1),5),1)
   HDR1(I*16+14) = binand(shift(Header1(I*2+1),6),1)
   HDR1(I*16+15) = binand(shift(Header1(I*2+1),7),1)
  next I

! **********************************************************************
! ************************ CheckSum Calculation ************************
! **********************************************************************

   ! For 1st 128 bytes

   Chksum1 = 0                                  ! initialize to 0
   EE_Data1 = 0

   for I =  0 to 15                             ! Header
     Chksum1 = Chksum1 + binand(Header1(I),255)
   next I

   for I =  0 to 127                           ! Cookie data

      EE_DD1$ =""
      for G = 0 to 7
         B = (I * 8) + 7 - G
!        B = (I * 8) + G
         EE_DD1$ = EE_DD1$ & val$(EE_D1(B))
      next G
      EE_Data1 = bti(EE_DD1$)

   Chksum1 = Chksum1 + binand(EE_Data1,255)

   next I

   if Chksum1 > 65535 then Chksum1 = binand(Chksum1,65535)

   Chksum1   = bineor(Chksum1,255)  ! XOR with $FF, inverting data
   Chksum1   = binand(Chksum1,255)  ! Lower 8 bits only

   XSUM1(0)  = binand(shift(Chksum1,0),1)             ! Checksum
   XSUM1(1)  = binand(shift(Chksum1,1),1)
   XSUM1(2)  = binand(shift(Chksum1,2),1)
   XSUM1(3)  = binand(shift(Chksum1,3),1)
   XSUM1(4)  = binand(shift(Chksum1,4),1)
   XSUM1(5)  = binand(shift(Chksum1,5),1)
   XSUM1(6)  = binand(shift(Chksum1,6),1)
   XSUM1(7)  = binand(shift(Chksum1,7),1)

! **********************************************************************

  ! Data For Write Command and Header for page 2.

                                     ! Header for 2nd 128 bytes
  for I = 0 to 15                    ! Initialize to $00
    Header2(I) = hti("00")
  next I

  Header2(0)   = hti("25")           ! Write Cookie Command = $25, $00
  Header2(1)   = hti("00")
  Header2(2)   = hti("83")           ! Length of the total message -
                                     !    excluding the command bytes
  Header2(3)   = hti("10")           ! Starting Address high byte
  Header2(4)   = hti("80")           ! Starting Address low byte
  Header2(5)   = hti("80")           ! Number bytes of Cookie,128 bytes

! **********************************************************************

  for I = 0 to 7                                      ! Header
   HDR2(I*16+0)  = binand(shift(Header2(I*2),0),1)
   HDR2(I*16+1)  = binand(shift(Header2(I*2),1),1)
   HDR2(I*16+2)  = binand(shift(Header2(I*2),2),1)
   HDR2(I*16+3)  = binand(shift(Header2(I*2),3),1)
   HDR2(I*16+4)  = binand(shift(Header2(I*2),4),1)
   HDR2(I*16+5)  = binand(shift(Header2(I*2),5),1)
   HDR2(I*16+6)  = binand(shift(Header2(I*2),6),1)
   HDR2(I*16+7)  = binand(shift(Header2(I*2),7),1)
   HDR2(I*16+8)  = binand(shift(Header2(I*2+1),0),1)
   HDR2(I*16+9)  = binand(shift(Header2(I*2+1),1),1)
   HDR2(I*16+10) = binand(shift(Header2(I*2+1),2),1)
   HDR2(I*16+11) = binand(shift(Header2(I*2+1),3),1)
   HDR2(I*16+12) = binand(shift(Header2(I*2+1),4),1)
   HDR2(I*16+13) = binand(shift(Header2(I*2+1),5),1)
   HDR2(I*16+14) = binand(shift(Header2(I*2+1),6),1)
   HDR2(I*16+15) = binand(shift(Header2(I*2+1),7),1)
  next I

! **********************************************************************
! ************************ CheckSum Calculation ************************
! **********************************************************************
   ! For 2nd 128 bytes

   Chksum2 = 0                                  ! initialize to 0
   EE_Data2 = 0

   for I =  0 to 15                             ! Header
     Chksum2 = Chksum2 + binand(Header2(I),255)
   next I

   for I = 0 to 127                           ! Cookie data

      EE_DD2$ =""
      for G = 0 to 7
         B = (I * 8) + 7 - G
!        B = (I * 8) + G
         EE_DD2$ = EE_DD2$ & val$(EE_D2(B))
      next G

      EE_Data2 = bti(EE_DD2$)

   Chksum2 = Chksum2 + binand(EE_Data2,255)

   next I

   if Chksum2 > 65535 then Chksum2 = binand(Chksum2,65535)

   Chksum2   = bineor(Chksum2,255)  ! XOR with $FF, inverting data
   Chksum2   = binand(Chksum2,255)  ! Lower 8 bits only

   XSUM2(0)  = binand(shift(Chksum2,0),1)             ! Checksum
   XSUM2(1)  = binand(shift(Chksum2,1),1)
   XSUM2(2)  = binand(shift(Chksum2,2),1)
   XSUM2(3)  = binand(shift(Chksum2,3),1)
   XSUM2(4)  = binand(shift(Chksum2,4),1)
   XSUM2(5)  = binand(shift(Chksum2,5),1)
   XSUM2(6)  = binand(shift(Chksum2,6),1)
   XSUM2(7)  = binand(shift(Chksum2,7),1)


! **********************************************************************

  ! Data For Write Command and Header for page 3.

                                     ! Header for 3rd 128 bytes
  for I = 0 to 15                    ! Initialize to $00
    Header2(I) = hti("00")
  next I

  Header3(0)   = hti("25")           ! Write Cookie Command = $25, $00
  Header3(1)   = hti("00")
  Header3(2)   = hti("83")           ! Length of the total message -
                                     !    excluding the command bytes
  Header3(3)   = hti("11")           ! Starting Address high byte
  Header3(4)   = hti("00")           ! Starting Address low byte
  Header3(5)   = hti("80")           ! Number bytes of Cookie,128 bytes

! **********************************************************************

  for I = 0 to 7                                      ! Header
   HDR3(I*16+0)  = binand(shift(Header3(I*2),0),1)
   HDR3(I*16+1)  = binand(shift(Header3(I*2),1),1)
   HDR3(I*16+2)  = binand(shift(Header3(I*2),2),1)
   HDR3(I*16+3)  = binand(shift(Header3(I*2),3),1)
   HDR3(I*16+4)  = binand(shift(Header3(I*2),4),1)
   HDR3(I*16+5)  = binand(shift(Header3(I*2),5),1)
   HDR3(I*16+6)  = binand(shift(Header3(I*2),6),1)
   HDR3(I*16+7)  = binand(shift(Header3(I*2),7),1)
   HDR3(I*16+8)  = binand(shift(Header3(I*2+1),0),1)
   HDR3(I*16+9)  = binand(shift(Header3(I*2+1),1),1)
   HDR3(I*16+10) = binand(shift(Header3(I*2+1),2),1)
   HDR3(I*16+11) = binand(shift(Header3(I*2+1),3),1)
   HDR3(I*16+12) = binand(shift(Header3(I*2+1),4),1)
   HDR3(I*16+13) = binand(shift(Header3(I*2+1),5),1)
   HDR3(I*16+14) = binand(shift(Header3(I*2+1),6),1)
   HDR3(I*16+15) = binand(shift(Header3(I*2+1),7),1)
  next I

! **********************************************************************
! ************************ CheckSum Calculation ************************
! **********************************************************************

   ! For 3rd 128 bytes

   Chksum3 = 0                                  ! initialize to 0
   EE_Data3 = 0
   for I =  0 to 15                             ! Header
     Chksum3 = Chksum3 + binand(Header3(I),255)
   next I

   for I = 0 to 127                             ! Cookie data

      EE_DD3$ =""
      for G = 0 to 7
         B = (I * 8) + 7 - G
!        B = (I * 8) + G
         EE_DD3$ = EE_DD3$ & val$(EE_D3(B))
      next G

      EE_Data3 = bti(EE_DD3$)

   Chksum3 = Chksum3 + binand(EE_Data3,255)

   next I

   if Chksum3 > 65535 then Chksum3 = binand(Chksum3,65535)

   Chksum3   = bineor(Chksum3,255)  ! XOR with $FF, inverting data
   Chksum3   = binand(Chksum3,255)  ! Lower 8 bits only

   XSUM3(0)  = binand(shift(Chksum3,0),1)             ! Checksum
   XSUM3(1)  = binand(shift(Chksum3,1),1)
   XSUM3(2)  = binand(shift(Chksum3,2),1)
   XSUM3(3)  = binand(shift(Chksum3,3),1)
   XSUM3(4)  = binand(shift(Chksum3,4),1)
   XSUM3(5)  = binand(shift(Chksum3,5),1)
   XSUM3(6)  = binand(shift(Chksum3,6),1)
   XSUM3(7)  = binand(shift(Chksum3,7),1)

! **********************************************************************
! ***************** Print Out Entry Data For EEPROM ********************
! ************************** For Debug Only ****************************
! **********************************************************************

Eprom_Debug = False
!if Eprom_Debug then   ! Change to 'if not.....' to print

    assign @EE_data1_Sprom to "EE_Data1_Hex_Sprom";write
    assign @EE_data2_Sprom to "EE_Data1_Chr_Sprom";write

    for K = 0 to 127  !First 1k
      Char_Data$=""
      for G = 0 to 7
!        B = (K * 8) + G
         B = (K * 8) + 7 - G
         Char_Data$=Char_Data$ & val$(EE_D1(B))
      next G
      Int_Data  = bti ( Char_Data$)
      Hex_Data$ = ith$(Int_Data)
      if len (Hex_Data$ ) =1 then Hex_Data$="0"&Hex_Data$

      ! Output to file
      ! EE_data1 addr and data in hex
      output @EE_data1_Sprom;"   ADDR: " & ith$(K) & "='" & Hex_Data$ & "'"
      !print "   ADDR: " & ith$(K) & "='" & Hex_Data$ & "'"

      ! EE_data2 addr and data in integers and chracters
      !if ((Int_Data < 123) and (Int_Data > 29)) then !!num 30-122 Char 0 to z
      !output @EE_data2_Sprom;"  ADDR: " & val$(K) & "='" & chr$(Int_Data) & "'"
      ! print "   ADDR: " & val$(K) & "='" & chr$(Int_Data) & "'"
      !else
      !output @EE_data2_Sprom;"  ADDR: " & val$(K) & "='" & ith$(Int_Data) & "'"
      ! print "   ADDR: " & val$(K) & "='" & ith$(Int_Data) & "'"
      !end if

    next K

    for K = 128 to 255  !second 1k
      Char_Data$=""
      for G = 0 to 7
!        B = ((K-128) * 8) + G
         B = ((K-128) * 8) + 7 - G
         Char_Data$=Char_Data$ & val$(EE_D2(B))
      next G
      Int_Data  = bti ( Char_Data$)
      Hex_Data$ = ith$(Int_Data)
      if len (Hex_Data$ ) =1 then Hex_Data$="0"&Hex_Data$

      ! Output to file
      ! EE_data1 addr and data in hex
      output @EE_data1_Sprom;"   ADDR: " & ith$(K) & "='" & Hex_Data$ & "'"
      !print "   ADDR: " & ith$(K) & "='" & Hex_Data$ & "'"

      ! EE_data2 addr and data in integers and chracters
      !if ((Int_Data < 123) and (Int_Data > 29)) then !!num 30-122 Char 0 to z
      !output @EE_data2_Sprom;"  ADDR: " & val$(K) & "='" & chr$(Int_Data) & "'"
      ! print "   ADDR: " & val$(K) & "='" & chr$(Int_Data) & "'"
      !else
      !output @EE_data2_Sprom;"  ADDR: " & val$(K) & "='" & ith$(Int_Data) & "'"
      ! print "   ADDR: " & val$(K) & "='" & ith$(Int_Data) & "'"
      !end if

    next K

    for K = 256 to 383  !Third 1k
      Char_Data$=""
      for G = 0 to 7
!        B = ((K-256) * 8) + G
         B = ((K-256) * 8) + 7 - G
         Char_Data$=Char_Data$ & val$(EE_D3(B))
      next G
      Int_Data  = bti ( Char_Data$)
      Hex_Data$ = ith$(Int_Data)
      if len (Hex_Data$ ) =1 then Hex_Data$="0"&Hex_Data$

      ! Output to file
      ! EE_data1 addr and data in hex
      output @EE_data1_Sprom;"   ADDR: " & ith$(K) & "='" & Hex_Data$ & "'"
      !print "   ADDR: " & ith$(K) & "='" & Hex_Data$ & "'"

      ! EE_data2 addr and data in integers and chracters
      !if ((Int_Data < 123) and (Int_Data > 29)) then !!num 30-122 Char 0 to z
      !output @EE_data2_Sprom;"  ADDR: " & val$(K) & "='" & chr$(Int_Data) & "'"
      ! print "   ADDR: " & val$(K) & "='" & chr$(Int_Data) & "'"
      !else
      !output @EE_data2_Sprom;"  ADDR: " & val$(K) & "='" & ith$(Int_Data) & "'"
      ! print "   ADDR: " & val$(K) & "='" & ith$(Int_Data) & "'"
      !end if

    next K

    assign @EE_data1_Sprom to *
    assign @EE_data2_Sprom to *
!end if
subend

sub Chklength_S(Temp2$,Length) !! For PN Only
  global Option
  ChkLen_S:
    if len(Temp2$) < Length then !this pads 0's to back of hex word
       Temp2$= Temp2$&"\"   !these are the 8 bit hex equiv of Ascii chars
       goto ChkLen_S
    end if
subend


sub Read_EEprom
   global Serial$,Act2EprPath$
   global Act2_Vendor$
   dim Read_Data(0:4095)
   !! Start read out board 1 EEprom data
   print tab(7);"Dumping data to Hex file-->" &"EE_Data1_Hex_"&Serial$[1;11]
   print tab(7);"Dumping data to Charfile-->" &"EE_Data1_Chr_"&Serial$[1;11]
   assign @EE_data1 to Act2EprPath$&"\EE_Data_Hex_"&Serial$[1;11];write
   assign @EE_data2 to Act2EprPath$&"\EE_Data_Chr_"&Serial$[1;11];write

      safeguard cool
     test Act2_Vendor$&"/u24%dump";Read_Data(*)
      !Convert Data Array to Data String
       for K = 0 to 511
        Char_Data$=""
        for G = 0 to 7
!          B = (K * 8) + 7 - G
           B = (K * 8) + G
           Char_Data$=Char_Data$ & val$(Read_Data(B))
        next G
        Int_Data  = bti ( Char_Data$)
        Hex_Data$ = ith$(Int_Data)
        if len (Hex_Data$ ) =1 then Hex_Data$="0"&Hex_Data$
        ! Output to file
        ! EE_data1 addr and data in hex
        output @EE_data1;"   ADDR: " & ith$(K) & "='" & Hex_Data$ & "'"
        ! EE_data2 addr and data in integers and chracters
        if ((Int_Data < 123) and (Int_Data > 29)) then !!num 30-122 Char 0 to z
         output @EE_data2;"   ADDR: " & val$(K) & "='" & chr$(Int_Data) & "'"
        else
         output @EE_data2;"   ADDR: " & val$(K) & "='" & ith$(Int_Data) & "'"
        end if
      next K
      assign @EE_data1 to *
      assign @EE_data2 to *
subend

sub CheckAct2Vendor
global Act2_Vendor$
global Act2_Status
dim Code(24),Status(2)
safeguard cool
test "digital/u24%capture_id" ;Code(*)
test "digital/u24%status_check" ;Status(*)
safeguard all
IDCODE$ = ""
for N = 0 to 23 step 8
      ID$ = ""
      for I = 0 to 7
        ID$ = ID$ & val$(Code(N+I))
      next I
      ID$ = ith$(bti(ID$))
      loop
        exit if len(ID$) = 2
        ID$ = "0"&ID$
      end loop
      IDCODE$ = IDCODE$&ID$
next N


!##################################
! 0: Normal Process, 2: Rework Board,3: Test Failed
Act2_Status = bti(val$(Status(0))&val$(Status(1)))
if Act2_Status = 0 then
   print tab(5);"Process: Normal"
else
   if Act2_Status = 2 then
      print tab(5);"Process: Rework"
      log "Process: Rework"
   else
      fail device
      print tab(5);"Act2 test failed"
   end if
end if
!##################################

if IDCODE$ = "000313" then
  Act2_Vendor$ = "act2_818"
  print tab(5); "ACT2 Vendor: "; Act2_Vendor$
else
  if IDCODE$ = "00361B" or IDCODE$ = "03061B" then
    Act2_Vendor$ = "act2_q2"
    print tab(5); "ACT2 Vendor: "; Act2_Vendor$
  else
    if IDCODE$ = "03201C" then
      Act2_Vendor$ = "act2_st"
    else
      print tab(5); "New act2 vendor, no related test programming scriped."
    end if
  end if
end if
print tab(5);"ID CODE: "; IDCODE$
log "ACT2 Vendor: "; Act2_Vendor$
log "ID CODE: "; IDCODE$

!###SERIAL VALIDATION####
Verify_eeprom_start=msec
call Verify_EEprom
Verify_eeprom_end=(msec-Verify_eeprom_start)/1000
!######################

subend

sub Map_Serial_to_Board

global OEMSerial$,MB_PN$
global Select$,OdcSub$,LogWaitSub$,F$,Bar$,Bar1$   ! ODC System
global By_ODC, Off_Line                        ! For Bypass Mode
global Board$,Board_Rev$,Input_pcba$
global Bom$,Bom_Rev$,Input_bom$
global Deviation$,Input_dev$
global Retest_Board              ! For retest board
global PWR_TEST,SO_CAP$          ! For setup power supply test
global Version_selected

InvOn$                   = chr$(27)&"&dB"
InvOff$                  = chr$(27)&"&d@"
Bar$ = InvOn$&"                                                 "
Bar1$ = InvOn$&"                            "


By_ODC = False                  !Clear status Bypass ODC only
Off_Line = False                !Clear status Bypass ODC & Meter soft

 !**************************** PCBA **************************************

   Ra$  = "73-102931-03 A0"


!print using "@"
Input_pcba$ =""
print|print tab(5);chr$(27)&"&v7S Please scan Pcba (73-102931-03 A0) of board "
input Input_pcba$
Input_pcba$ = upc$(Input_pcba$)
! Input_pcba$ = upc$(MB_PN$)


  if len(Input_pcba$) <> 14 then
    print "invalid bar code - enter again"
    goto Ciscobar
  end if

 if Input_pcba$[1;14]= Ra$ then
      Board$ = Input_pcba$[1;11]
      Board_Rev$ = Input_pcba$[13;2]
 else
      print "invalid bar code - enter again"
      goto Ciscobar
 end if

  !**************************** PCBA **************************************

subend


def fn MACAddress$
  assign @ID to "C:\Agilent_ICT\boards\.MAC";read
  !execute "Ipconfig /all > temp"
  loop
  enter @ID ,,Failure;A$
  exit if  pos(A$,"Physical Address") > 0
  end loop
  assign @ID to *

  A$ = trim$(A$)
  A$ = A$[pos(A$, ":")+ 1;18]
  A$ = A$[2;2]&A$[5;2]&A$[8;2]&A$[11;2]&A$[14;2]&A$[17;2]

  if  pos(A$,"Physical Address") < 0 then
  AValid=hti(A$[1;3],AError)
  if not AError and A$[1;3] <>"---" then
  return A$
  fail device
  print tab(10);"Invalid MAC address"
  print tab(10);"Stop. Check with test engineer"
  stop! dim ARR1$(0,4)
  end if!!cTool - The line below this comment may cause pathing problems
  end if! enter "/etc/lanscan|",,Err;ARR1$(*)
  return A$! MAC$=ARR1$(0,3)[12;12]
fnend! MACValid=hti(MAC$[1;6],MACError)

def fn Get_Unit_Status
    global System$,Serial$
    global FFErrCode,FFMsg$
    global Serialnumber1$,Partnumber1$
    global Serialnumber2$,Partnumber2$
    global MB_SN$,MB_PN$, Testrev$, Deviation$

    MB_SN$ = ""
    MB_PN$ = ""
    Serialnumber1$ = ""
    Serialnumber2$ = ""
    Partnumber1$ = ""
    Partnumber2$ = ""
    Deviation$ = ""
    print "Get Unit Status From FlexFlow......"

   unlink "C:/Agilent_ICT/flexflow/UNIITSTAT.BAT" ,Err
    if Err <> 0 and Err <>100009 then
      print errm$
    end if

   ! execute "jre FFCHK 172.30.136.6 ICTTester 123456 tff_Cisco udp_CheckRouting " & Serial$ & Serialnumber1$ & " " & System$ ;append
    execute "java FFCHK 172.30.30.76 tFF_Cisco_TE te@Read6699 tff_Cisco udp_CheckRouting_V2 " & Serial$ & " " & System$ & " " & "C:/Agilent_ICT/flexflow/UNIITSTAT.BAT" ;append

    enter "C:/Agilent_ICT/flexflow/UNIITSTAT.BAT";FFErrCode,MB_SN$,MB_PN$, Serialnumber1$, Partnumber1$,Serialnumber2$,Partnumber2$

   print "System=" & System$
   print "Serial number=" & Serial$

if (Deviation$ <> "" and Deviation$[1;2] <> "DC") then Testrev$ =  Deviation$

  if FFErrCode = 0 then
   create dir "W:\Deviation\FF_Record\"& MB_PN$[1;12] & "_" & MB_PN$[14;15],Err
   copy "C:/Agilent_ICT/flexflow/UNIITSTAT.BAT" to "W:/Deviation/FF_Record/"& MB_PN$[1;12] & "_" & MB_PN$[14;15] & "/" & MB_SN$ & "_" & datetime$ & ".bat"
  end if

  if (MB_PN$ <> Ra$) then
     print tab(5); "Flexflow return partnumber can't match with test script's."
     print tab(5); "Flexflow Partnumber: " & MB_PN$
     print tab(5); "Test Script Partnumber: " & Ra$
     FFErrCode = 1
  end if

   return(FFErrCode)
fnend

sub Program_LTC3888 (Status_Code, Message$)
global Status

   safeguard cool
   print tab(6); "Programming U1_2 LTC3888"
   test "programming/u1_2_prog_ver"
   if dutfailed then print tab(6); "Programming Failed"
   print tab(6); "Programming U2_2 LTC3888"
   test "programming/u2_2_prog_ver"
   if dutfailed then print tab(6); "Programming Failed"
   print tab(6); "Programming U3_2 LTC3888"
   test "programming/u3_2_prog_ver"
   if dutfailed then print tab(6); "Programming Failed"
   print tab(6); "Programming U4_2 LTC3888"
   test "programming/u4_2_prog_ver"
   if dutfailed then print tab(6); "Programming Failed"

subend

sub Program_ir35215 (Status_Code, Message$)

global IR_USER_CAP_PT_U1_3(*)
global IR_USER_PROG_PT_U1_3(*)
global IR_USER_VER_PT_U1_3(*)
global IR_CONFIG_CAP_PT_U1_3(*)
global IR_CONFIG_PROG_PT_U1_3(*)
global IR_CONFIG_VER_PT_U1_3(*)
global IR_USER_CAP_PT_U1_4(*)
global IR_USER_PROG_PT_U1_4(*)
global IR_USER_VER_PT_U1_4(*)
global IR_CONFIG_CAP_PT_U1_4(*)
global IR_CONFIG_PROG_PT_U1_4(*)
global IR_CONFIG_VER_PT_U1_4(*)
global IR_USER_CAP_PT_U1_5(*)
global IR_USER_PROG_PT_U1_5(*)
global IR_USER_VER_PT_U1_5(*)
global IR_CONFIG_CAP_PT_U1_5(*)
global IR_CONFIG_PROG_PT_U1_5(*)
global IR_CONFIG_VER_PT_U1_5(*)
global IR_USER_CAP_PT_U1_27(*)
global IR_USER_PROG_PT_U1_27(*)
global IR_USER_VER_PT_U1_27(*)
global IR_CONFIG_CAP_PT_U1_27(*)
global IR_CONFIG_PROG_PT_U1_27(*)
global IR_CONFIG_VER_PT_U1_27(*)
global IR_USER_CAP_PT_U1_8(*)
global IR_USER_PROG_PT_U1_8(*)
global IR_USER_VER_PT_U1_8(*)
global IR_CONFIG_CAP_PT_U1_8(*)
global IR_CONFIG_PROG_PT_U1_8(*)
global IR_CONFIG_VER_PT_U1_8(*)
global Status
safeguard cool

print tab(6); "Programming U1_3 ir35215"
test "programming/u1_3_user_capture";IR_USER_CAP_PT_U1_3(*)
call User_Pointer_Calculation (IR_USER_CAP_PT_U1_3(*),IR_USER_PROG_PT_U1_3(*),IR_USER_VER_PT_U1_3(*))
test "programming/u1_3_user_ver";IR_USER_VER_PT_U1_3(*)
if dutfailed then
  clear failures|report clear
  test "programming/u1_3_user_prog";IR_USER_PROG_PT_U1_3(*)
  test "programming/u1_3_user_ver";IR_USER_PROG_PT_U1_3(*)
end if

test "programming/u1_3_config_capture";IR_CONFIG_CAP_PT_U1_3(*)
call Config_Pointer_Calculation (IR_CONFIG_CAP_PT_U1_3(*),IR_CONFIG_PROG_PT_U1_3(*),IR_CONFIG_VER_PT_U1_3(*))
test "programming/u1_3_config_ver";IR_CONFIG_VER_PT_U1_3(*)
if dutfailed then
  clear failures|report clear
  test "programming/u1_3_config_prog";IR_CONFIG_PROG_PT_U1_3(*)
  test "programming/u1_3_config_ver";IR_CONFIG_PROG_PT_U1_3(*)
end if

print tab(6); "Programming U1_4 ir35215"
test "programming/u1_4_user_capture";IR_USER_CAP_PT_U1_4(*)
call User_Pointer_Calculation (IR_USER_CAP_PT_U1_4(*),IR_USER_PROG_PT_U1_4(*),IR_USER_VER_PT_U1_4(*))
test "programming/u1_4_user_ver";IR_USER_VER_PT_U1_4(*)
if dutfailed then
  clear failures|report clear
  test "programming/u1_4_user_prog";IR_USER_PROG_PT_U1_4(*)
  test "programming/u1_4_user_ver";IR_USER_PROG_PT_U1_4(*)
end if

test "programming/u1_4_config_capture";IR_CONFIG_CAP_PT_U1_4(*)
call Config_Pointer_Calculation (IR_CONFIG_CAP_PT_U1_4(*),IR_CONFIG_PROG_PT_U1_4(*),IR_CONFIG_VER_PT_U1_4(*))
test "programming/u1_4_config_ver";IR_CONFIG_VER_PT_U1_4(*)
if dutfailed then
  clear failures|report clear
  test "programming/u1_4_config_prog";IR_CONFIG_PROG_PT_U1_4(*)
  test "programming/u1_4_config_ver";IR_CONFIG_PROG_PT_U1_4(*)
end if

print tab(6); "Programming U1_5 ir35215"
test "programming/u1_5_user_capture";IR_USER_CAP_PT_U1_5(*)
call User_Pointer_Calculation (IR_USER_CAP_PT_U1_5(*),IR_USER_PROG_PT_U1_5(*),IR_USER_VER_PT_U1_5(*))
test "programming/u1_5_user_ver";IR_USER_VER_PT_U1_5(*)
if dutfailed then
  clear failures|report clear
  test "programming/u1_5_user_prog";IR_USER_PROG_PT_U1_5(*)
  test "programming/u1_5_user_ver";IR_USER_PROG_PT_U1_5(*)
end if

test "programming/u1_5_config_capture";IR_CONFIG_CAP_PT_U1_5(*)
call Config_Pointer_Calculation (IR_CONFIG_CAP_PT_U1_5(*),IR_CONFIG_PROG_PT_U1_5(*),IR_CONFIG_VER_PT_U1_5(*))
test "programming/u1_5_config_ver";IR_CONFIG_VER_PT_U1_5(*)
if dutfailed then
  clear failures|report clear
  test "programming/u1_5_config_prog";IR_CONFIG_PROG_PT_U1_5(*)
  test "programming/u1_5_config_ver";IR_CONFIG_PROG_PT_U1_5(*)
end if

print tab(6); "Programming U1_27 ir35215"
test "programming/u1_27_user_capture";IR_USER_CAP_PT_U1_27(*)
call User_Pointer_Calculation (IR_USER_CAP_PT_U1_27(*),IR_USER_PROG_PT_U1_27(*),IR_USER_VER_PT_U1_27(*))
test "programming/u1_27_user_ver";IR_USER_VER_PT_U1_27(*)
if dutfailed then
  clear failures|report clear
  test "programming/u1_27_user_prog";IR_USER_PROG_PT_U1_27(*)
  test "programming/u1_27_user_ver";IR_USER_PROG_PT_U1_27(*)
end if

test "programming/u1_27_config_capture";IR_CONFIG_CAP_PT_U1_27(*)
call Config_Pointer_Calculation (IR_CONFIG_CAP_PT_U1_27(*),IR_CONFIG_PROG_PT_U1_27(*),IR_CONFIG_VER_PT_U1_27(*))
test "programming/u1_27_config_ver";IR_CONFIG_VER_PT_U1_27(*)
if dutfailed then
  clear failures|report clear
  test "programming/u1_27_config_prog";IR_CONFIG_PROG_PT_U1_27(*)
  test "programming/u1_27_config_ver";IR_CONFIG_PROG_PT_U1_27(*)
end if

print tab(6); "Programming U1_8 ir35215"
test "programming/u1_8_user_capture";IR_USER_CAP_PT_U1_8(*)
call User_Pointer_Calculation (IR_USER_CAP_PT_U1_8(*),IR_USER_PROG_PT_U1_8(*),IR_USER_VER_PT_U1_8(*))
test "programming/u1_8_user_ver";IR_USER_VER_PT_U1_8(*)
if dutfailed then
  clear failures|report clear
  test "programming/u1_8_user_prog";IR_USER_PROG_PT_U1_8(*)
  test "programming/u1_8_user_ver";IR_USER_PROG_PT_U1_8(*)
end if

test "programming/u1_8_config_capture";IR_CONFIG_CAP_PT_U1_8(*)
call Config_Pointer_Calculation (IR_CONFIG_CAP_PT_U1_8(*),IR_CONFIG_PROG_PT_U1_8(*),IR_CONFIG_VER_PT_U1_8(*))
test "programming/u1_8_config_ver";IR_CONFIG_VER_PT_U1_8(*)
if dutfailed then
  clear failures|report clear
  test "programming/u1_8_config_prog";IR_CONFIG_PROG_PT_U1_8(*)
  test "programming/u1_8_config_ver";IR_CONFIG_PROG_PT_U1_8(*)
end if

subend

sub Config_Pointer_Calculation (CAP_CONFIG_PT(*),NEW_CONFIG_PT(*),OLD_CONFIG_PT(*))

dim CONF_IR_MOD(5)
dim TEMP_NEW_CONFIG_PT(6)
dim TEMP_OLD_CONFIG_PT(6)
  J=4
for I = 0 to 4
  CONF_IR_MOD(I)=CAP_CONFIG_PT(J)
  J=J-1
next I

for I = 0 to 4
  if CONF_IR_MOD(I)=1 then Image=I
next I

print "Capture Config Image # = ",Image
New_Image=Image+1

if New_Image >4 then !image start from 0 to 4
   fail device
   print"   !!!programming is over the limit!!!"
   stop
end if

for I = 0 to 5
  T_Image=New_Image
  TEMP_NEW_CONFIG_PT(I)=T_Image mod 2
  New_Image=int (T_Image/2)
next I

for I = 0 to 5
  T_Image=Image
  TEMP_OLD_CONFIG_PT(I)=T_Image mod 2
  Image=int (T_Image/2)
next I

J=5
for I=0 to 5
  NEW_CONFIG_PT(I)=TEMP_NEW_CONFIG_PT(J)
  J=J-1
next I
J=5
for I=0 to 5
  OLD_CONFIG_PT(I)=TEMP_OLD_CONFIG_PT(J)
  J=J-1
next I
subend

sub User_Pointer_Calculation (CAP_PT(*),NEW_PT(*),OLD_PT(*))

dim IR_MOD(32)
dim TEMP_OLD_PT(6)
dim TEMP_NEW_PT(6)
  J=7
for I = 0 to 7
  IR_MOD(I)=CAP_PT(J)
  J=J-1
next I

  J=15
for I = 8 to 15
  IR_MOD(I)=CAP_PT(J)
  J=J-1
next I

  J=23
for I = 16 to 23
  IR_MOD(I)=CAP_PT(J)
  J=J-1
next I

  J=31
for I = 24 to 31
  IR_MOD(I)=CAP_PT(J)
  J=J-1
next I

for I = 0 to 31
  if IR_MOD(I)=1 then Image=I
next I

print "Capture User Image # = ",Image
New_Image=Image+1

if New_Image >26 then !image start from 0 to 26
   fail device
   print"   !!!programming is over the limit!!!"
   stop
end if

for I = 0 to 5
  T_Image=New_Image
  TEMP_NEW_PT(I)=T_Image mod 2
  New_Image=int (T_Image/2)
next I

for I = 0 to 5
  T_Image=Image
  TEMP_OLD_PT(I)=T_Image mod 2
  Image=int (T_Image/2)
next I

J=5
for I=0 to 5
  NEW_PT(I)=TEMP_NEW_PT(J)
  J=J-1
next I
J=5
for I=0 to 5
  OLD_PT(I)=TEMP_OLD_PT(J)
  J=J-1
next I
subend

sub Program_Flash (Device$, Status_Code, Message$)
global Status
global Report_level$, Logging

  if Device$ = "" then  subexit
  if Message$ <> "" then  print tab(5);Message$
  Status = Status_Code

  ! Verify Manufacturer ID and device ID codes.
  ! The ID test should be executed in digital for ICT purposes.
  test "digital/" & Device$ & "%id"
  if dutfailed then
    print tab(15); Device$; " : Device ID failed"
    subexit ! if the wrong device is installed, exit the program subroutine
  end if

  !remove reporting and logging while verifying device status
  Report_level$ = rli$
  report level is none
  if Logging then
    log level is all!none
  end if
  print tab(8); "Verifying Status"
  safeguard none  !flash! This board meets design for On-Board Programming
                  !       criteria for safeguard none to be safe
                  !       Programming runs very slowly with safeguard on

  !flash! Comment the appropriate crc test(s) in Digital_Tests subroutine
  test "digital/" & Device$ & "%crc"
  if not dutfailed then
    print tab(15); Device$; " : Device pre-programmed"
    call Cleanup_Flash
    subexit  ! the device is already properly programmed, exit subroutine
  else
    pass device  ! clears dutfailed, boardfailed if only failure
    print tab(15); Device$; " : Contains incorrect data"
  end if

  ! Verify device is blank.
  !flash! Comment the appropriate blank test(s) in Digital_Tests subroutine
  test "digital/" & Device$ & "%blank"
  if dutfailed then
    pass device  ! clears dutfailed, boardfailed if only failure
    print tab(15); Device$; " : Not blank"
    print tab(8); "Erasing"
    !flash! call Setup_Power_Supplies_Program  ! add any necessary programming
                                               ! voltages to a new subroutine
    !flash! Comment the appropriate erase test(s) in Digital_Tests subroutine
    test "digital/" & Device$ & "%erase"
    if not dutfailed then
      print tab(8); "Erase complete"
    end if
  end if
  ! Some older devices may need two erase sequences. If erase fails
  ! twice on only one board, continue to program all. The final CRC
  ! check will determine the viability of the erase program sequence

  if dutfailed then
    pass device  ! clears dutfailed, boardfailed if only failure
    print tab(15); Device$; " : Needed to be erased twice"
    test "digital/" & Device$ & "%erase"
    if dutfailed then
      call Cleanup_Flash   !flash! move above erase test if full report
                           !       of failing erase tests is desired
      print tab(15); Device$; " : Erase Failed"
      subexit  ! if the device cannot be erased
    end if          !if dutfailed second erase
    print tab(8); "Erase complete"
  end if            !if dutfailed first erase
  print tab(8); "Programming"
  A=msec
  !flash! Comment the appropriate program test(s) in Digital_Tests subroutine
  test "digital/" & Device$ & "%program"
  B = (msec-A)/1000
  if not dutfailed then
    print tab(15); "Programming complete in"; B;" seconds"
  else
    print tab(15); "Programming Failed"
    pass device
  end if
  !flash! call Setup_Power_Supplies (Failed_In_Power_Supplies, PowerMsg$)
  !flash! if dutfailed then
  !flash!   print "Power supplies limited"
  !flash!   call Cleanup_Flash
  !flash!   subexit
  !flash! end if
  call Cleanup_Flash  !flash! move above program test for full reporting
  print tab(8); "Verifying Data"
  !flash! Comment the appropriate crc test(s) in Digital_Tests subroutine
  test "digital/" & Device$ & "%crc"
  if dutfailed then
    print tab(15); Device$; " : Contains incorrect data"
  else
    print tab(15); Device$; " : Contains correct data"
  end if
subend

def fnPinsfailed (Message$)

   if Message$ <> "" then  print tab(5);Message$
   Pins_failed_flag = 0
   test "pins"
   if dutfailed then Pins_failed_flag = 1
   return Pins_failed_flag
fnend

sub ScanWorks_Setup
! CAUTION:  Within this subroutine, do NOT use testhead statements
! CAUTION:  with the exception of the following statements:
! CAUTION:  testhead cleanup, test scanworks, scanworks reset.
! CAUTION:  Failure to follow this guideline can result in damage
! CAUTION:  to the BSI card.
   testhead cleanup
subend

sub ScanWorks_Pretest
! CAUTION:  Within this subroutine, do NOT use testhead statements
! CAUTION:  with the exception of the following statements:
! CAUTION:  testhead cleanup, test scanworks, scanworks reset.
! CAUTION:  Failure to follow this guideline can result in damage
! CAUTION:  to the BSI card.
global Status, Failed_In_SW_Testing

!   Status = Failed_In_SW_Testing
!   call ScanWorks_Setup
!   call ScanWorks_Cleanup
subend

sub ScanWorks_Cleanup
! CAUTION:  Within this subroutine, do NOT use testhead statements
! CAUTION:  with the exception of the following statements:
! CAUTION:  testhead cleanup, test scanworks, scanworks reset.
! CAUTION:  Failure to follow this guideline can result in damage
! CAUTION:  to the BSI card.
   scanworks reset
subend

sub ScanWorks_Scan_Path_Verify_Tests (Status_Code, Message$)
! CAUTION:  Within this subroutine, do NOT use testhead statements
! CAUTION:  with the exception of the following statements:
! CAUTION:  testhead cleanup, test scanworks, scanworks reset.
! CAUTION:  Failure to follow this guideline can result in damage
! CAUTION:  to the BSI card.
global Status

!   if Message$ <> "" then  print tab(5);Message$
!   Status = Status_Code
!   call ScanWorks_Setup
!   call ScanWorks_Cleanup
subend

sub ScanWorks_Interconnect_Tests (Status_Code, Message$)
! CAUTION:  Within this subroutine, do NOT use testhead statements
! CAUTION:  with the exception of the following statements:
! CAUTION:  testhead cleanup, test scanworks, scanworks reset.
! CAUTION:  Failure to follow this guideline can result in damage
! CAUTION:  to the BSI card.
global Status

!   if Message$ <> "" then  print tab(5);Message$
!   Status = Status_Code
!   call ScanWorks_Setup
!   call ScanWorks_Cleanup
subend

sub ScanWorks_Mem_Interconnect_Tests (Status_Code, Message$)
! CAUTION:  Within this subroutine, do NOT use testhead statements
! CAUTION:  with the exception of the following statements:
! CAUTION:  testhead cleanup, test scanworks, scanworks reset.
! CAUTION:  Failure to follow this guideline can result in damage
! CAUTION:  to the BSI card.
global Status

!   if Message$ <> "" then  print tab(5);Message$
!   Status = Status_Code
!   call ScanWorks_Setup
!   call ScanWorks_Cleanup
subend

sub ScanWorks_Cluster_Tests (Status_Code, Message$)
! CAUTION:  Within this subroutine, do NOT use testhead statements
! CAUTION:  with the exception of the following statements:
! CAUTION:  testhead cleanup, test scanworks, scanworks reset.
! CAUTION:  Failure to follow this guideline can result in damage
! CAUTION:  to the BSI card.
global Status

!   if Message$ <> "" then  print tab(5);Message$
!   Status = Status_Code
!   call ScanWorks_Setup
!   call ScanWorks_Cleanup
subend

sub ScanWorks_Mem_BIST (Status_Code, Message$)
! CAUTION:  Within this subroutine, do NOT use testhead statements
! CAUTION:  with the exception of the following statements:
! CAUTION:  testhead cleanup, test scanworks, scanworks reset.
! CAUTION:  Failure to follow this guideline can result in damage
! CAUTION:  to the BSI card.
global Status

!   if Message$ <> "" then  print tab(5);Message$
!   Status = Status_Code
!   call ScanWorks_Setup
!   call ScanWorks_Cleanup
subend

sub ScanWorks_Device_Programming (Status_Code, Message$)
! CAUTION:  Within this subroutine, do NOT use testhead statements
! CAUTION:  with the exception of the following statements:
! CAUTION:  testhead cleanup, test scanworks, scanworks reset.
! CAUTION:  Failure to follow this guideline can result in damage
! CAUTION:  to the BSI card.
global Status

!   if Message$ <> "" then  print tab(5);Message$
!   Status = Status_Code
!   call ScanWorks_Setup
!   call ScanWorks_Cleanup
subend

sub ScanWorks_Flash_Programming (Status_Code, Message$)
! CAUTION:  Within this subroutine, do NOT use testhead statements
! CAUTION:  with the exception of the following statements:
! CAUTION:  testhead cleanup, test scanworks, scanworks reset.
! CAUTION:  Failure to follow this guideline can result in damage
! CAUTION:  to the BSI card.
global Status

!   if Message$ <> "" then  print tab(5);Message$
!   Status = Status_Code
!   call ScanWorks_Setup
!   call ScanWorks_Cleanup
subend


sub Commented  !TTR!

!  test "analog/c1_2"
!  test "analog/c2_2"
!  test "analog/c6"
!  test "analog/c11_3"
!  test "analog/c11_4"
!  test "analog/c12_3"
!  test "analog/c12_4"
!  test "analog/c18_3"
!  test "analog/c18_4"
!  test "analog/c21"
!  test "analog/c24"
!  test "analog/c26"
!  test "analog/c27"
!  test "analog/c28"
!  test "analog/c29"
!  test "analog/c30"
!  test "analog/c32"
!  test "analog/c33"
!  test "analog/c34"
!  test "analog/c55"
!  test "analog/c76_11"
!  test "analog/c76_12"
!  test "analog/c76_13"
!  test "analog/c76_14"
!  test "analog/c76_15"
!  test "analog/c76_16"
!  test "analog/c76_17"
!  test "analog/c76_18"
!  test "analog/c77_11"
!  test "analog/c77_12"
!  test "analog/c77_13"
!  test "analog/c77_14"
!  test "analog/c77_15"
!  test "analog/c77_16"
!  test "analog/c77_17"
!  test "analog/c77_18"
!  test "analog/c279"
!  test "analog/c298"
!  test "analog/c301"
!  test "analog/c302"
!  test "analog/c313"
!  test "analog/c314"
!  test "analog/c339"
!  test "analog/c340"
!  test "analog/c357"
!  test "analog/c358"
!  test "analog/c450"
!  test "analog/c453"
!  test "analog/c454"
!  test "analog/c1160_31"
!  test "analog/c1160_35"
!  test "analog/c1162_31"
!  test "analog/c1162_35"
!  test "analog/c1349_31"
!  test "analog/c1349_35"
!  test "analog/c4029"
!  test "analog/c4225"
!  test "analog/c4298"
!  test "analog/c4354"
!  test "analog/c4469"
!  test "analog/c4520"
!  test "analog/c4573"
!  test "analog/c4574"
!  test "analog/c5542"
!  test "analog/c5543"
!  test "analog/c9455"
!  test "analog/c10532_31"
!  test "analog/l13"
!  test "analog/l14"
!  test "analog/l19"
!  test "analog/l21"
!  test "analog/l45"
!  test "analog/r1_1"
!  test "analog/r1_a0_2"
!  test "analog/r1_a2_2"
!  test "analog/r1_a4_2"
!  test "analog/r1_b0_2"
!  test "analog/r1_b1_2"
!  test "analog/r1_b2_2"
!  test "analog/r1_b3_2"
!  test "analog/r1_b4_2"
!  test "analog/r1_b5_2"
!  test "analog/r1_b6_2"
!  test "analog/r1_b7_2"
!  test "analog/r1_c0_2"
!  test "analog/r1_c1_2"
!  test "analog/r1_c2_2"
!  test "analog/r1_c3_2"
!  test "analog/r1_c4_2"
!  test "analog/r1_c5_2"
!  test "analog/r1_c6_2"
!  test "analog/r1_c7_2"
!  test "analog/r1_d0_2"
!  test "analog/r1_d1_2"
!  test "analog/r1_d2_2"
!  test "analog/r1_d3_2"
!  test "analog/r1_d4_2"
!  test "analog/r1_d5_2"
!  test "analog/r1_d6_2"
!  test "analog/r1_d7_2"
!  test "analog/r2_1"
!  test "analog/r2_1_3"
!  test "analog/r2_1_4"
!  test "analog/r2_91_5"
!  test "analog/r2_91_8"
!  test "analog/r2_91_27"
!  test "analog/r2_92_3"
!  test "analog/r2_92_4"
!  test "analog/r2_92_5"
!  test "analog/r2_92_8"
!  test "analog/r2_92_27"
!  test "analog/r2_93_5"
!  test "analog/r2_93_8"
!  test "analog/r2_93_27"
!  test "analog/r2_94_5"
!  test "analog/r2_97_8"
!  test "analog/r2_97_27"
!  test "analog/r2_98_3"
!  test "analog/r2_98_4"
!  test "analog/r2_98_5"
!  test "analog/r2_98_8"
!  test "analog/r2_98_27"
!  test "analog/r3_1"
!  test "analog/r3a_11"
!  test "analog/r3a_12"
!  test "analog/r3a_13"
!  test "analog/r3a_14"
!  test "analog/r3a_15"
!  test "analog/r3a_16"
!  test "analog/r3a_17"
!  test "analog/r3a_18"
!  test "analog/r3b_11"
!  test "analog/r3b_12"
!  test "analog/r3b_13"
!  test "analog/r3b_14"
!  test "analog/r3b_15"
!  test "analog/r3b_16"
!  test "analog/r3b_17"
!  test "analog/r3b_18"
!  test "analog/r4_1"
!  test "analog/r5_1"
!  test "analog/r6_1"
!  test "analog/r07_3"
!  test "analog/r07_4"
!  test "analog/r07_5"
!  test "analog/r07_8"
!  test "analog/r07_9"
!  test "analog/r07_27"
!  test "analog/r07_28"
!  test "analog/r08_3"
!  test "analog/r08_4"
!  test "analog/r08_5"
!  test "analog/r08_8"
!  test "analog/r08_27"
!  test "analog/r10_2"
!  test "analog/r11"
!  test "analog/r11_5"
!  test "analog/r11_8"
!  test "analog/r11_27"
!  test "analog/r12_2"
!  test "analog/r12_5"
!  test "analog/r12_8"
!  test "analog/r12_27"
!  test "analog/r13_5"
!  test "analog/r13_8"
!  test "analog/r13_27"
!  test "analog/r14"
!  test "analog/r14_2"
!  test "analog/r14_5"
!  test "analog/r15"
!  test "analog/r16"
!  test "analog/r16_1"
!  test "analog/r17"
!  test "analog/r17_1"
!  test "analog/r17_8"
!  test "analog/r17_27"
!  test "analog/r18"
!  test "analog/r18_1"
!  test "analog/r18_5"
!  test "analog/r18_8"
!  test "analog/r18_27"
!  test "analog/r19"
!  test "analog/r19_1"
!  test "analog/r20_1"
!  test "analog/r21_2"
!  test "analog/r22_1"
!  test "analog/r25_1"
!  test "analog/r26_1"
!  test "analog/r27_3"
!  test "analog/r27_4"
!  test "analog/r27_5"
!  test "analog/r27_8"
!  test "analog/r27_27"
!  test "analog/r29_1"
!  test "analog/r29_2"
!  test "analog/r30_1"
!  test "analog/r31_2"
!  test "analog/r32_2"
!  test "analog/r33_1"
!  test "analog/r33_2"
!  test "analog/r34_1"
!  test "analog/r34_2"
!  test "analog/r35_2"
!  test "analog/r36_2"
!  test "analog/r37_1"
!  test "analog/r37_2"
!  test "analog/r38_2"
!  test "analog/r47"
!  test "analog/r48"
!  test "analog/r50_2"
!  test "analog/r52_2"
!  test "analog/r53_2"
!  test "analog/r54_2"
!  test "analog/r55_2"
!  test "analog/r56_2"
!  test "analog/r57_2"
!  test "analog/r58_2"
!  test "analog/r59_2"
!  test "analog/r78_2"
!  test "analog/r80_2"
!  test "analog/r81_2"
!  test "analog/r82_2"
!  test "analog/r83_2"
!  test "analog/r84"
!  test "analog/r84_2"
!  test "analog/r85_2"
!  test "analog/r86"
!  test "analog/r86_2"
!  test "analog/r87_2"
!  test "analog/r89_2"
!  test "analog/r91_2"
!  test "analog/r97"
!  test "analog/r101_2"
!  test "analog/r115"
  test "analog/r145"
!  test "analog/r152"
!  test "analog/r163"
!  test "analog/r165"
!  test "analog/r173"
!  test "analog/r175"
!  test "analog/r175_31"
!  test "analog/r175_32"
!  test "analog/r175_33"
!  test "analog/r175_34"
!  test "analog/r175_35"
!  test "analog/r175_36"
!  test "analog/r175_37"
!  test "analog/r175_38"
!  test "analog/r176_31"
!  test "analog/r176_32"
!  test "analog/r176_33"
!  test "analog/r176_34"
!  test "analog/r176_35"
!  test "analog/r176_36"
!  test "analog/r176_37"
!  test "analog/r176_38"
!  test "analog/r177"
!  test "analog/r181_31"
!  test "analog/r181_32"
!  test "analog/r181_33"
!  test "analog/r181_34"
!  test "analog/r181_35"
!  test "analog/r181_36"
!  test "analog/r181_37"
!  test "analog/r181_38"
!  test "analog/r182_31"
!  test "analog/r182_32"
!  test "analog/r182_33"
!  test "analog/r182_34"
!  test "analog/r182_35"
!  test "analog/r182_36"
!  test "analog/r182_37"
!  test "analog/r182_38"
!  test "analog/r184_31"
!  test "analog/r184_32"
!  test "analog/r184_33"
!  test "analog/r184_34"
!  test "analog/r184_35"
!  test "analog/r184_36"
!  test "analog/r184_37"
!  test "analog/r184_38"
!  test "analog/r185_31"
!  test "analog/r185_32"
!  test "analog/r185_33"
!  test "analog/r185_34"
!  test "analog/r185_35"
!  test "analog/r185_36"
!  test "analog/r185_37"
!  test "analog/r185_38"
!  test "analog/r187_31"
!  test "analog/r187_32"
!  test "analog/r187_33"
!  test "analog/r187_34"
!  test "analog/r187_35"
!  test "analog/r187_36"
!  test "analog/r187_37"
!  test "analog/r187_38"
!  test "analog/r188_31"
!  test "analog/r188_32"
!  test "analog/r188_33"
!  test "analog/r188_34"
!  test "analog/r188_35"
!  test "analog/r188_36"
!  test "analog/r188_37"
!  test "analog/r188_38"
!  test "analog/r189_31"
!  test "analog/r189_32"
!  test "analog/r189_33"
!  test "analog/r189_34"
!  test "analog/r189_35"
!  test "analog/r189_36"
!  test "analog/r189_37"
!  test "analog/r189_38"
!  test "analog/r194"
!  test "analog/r257_1"
!  test "analog/r276"
!  test "analog/r278_1"
!  test "analog/r321"
!  test "analog/r347"
!  test "analog/r348"
!  test "analog/r415"
!  test "analog/r813"
!  test "analog/r814"
!  test "analog/r815"
!  test "analog/r816"
!  test "analog/r817"
!  test "analog/r818"
!  test "analog/r858"
!  test "analog/r892"
!  test "analog/r893"
!  test "analog/r894"
!  test "analog/r895"
!  test "analog/r896"
!  test "analog/r909"
!  test "analog/r910"
!  test "analog/r947"
!  test "analog/r948"
!  test "analog/r949"
!  test "analog/r950"
!  test "analog/r951"
!  test "analog/r952"
!  test "analog/r953"
!  test "analog/r954"
!  test "analog/r955"
!  test "analog/r956"
!  test "analog/r957"
!  test "analog/r958"
!  test "analog/r1014"
!  test "analog/r1015"
!  test "analog/r1016"
!  test "analog/r1017"
!  test "analog/r1018"
!  test "analog/r1104"
!  test "analog/r1106"
!  test "analog/r1107"
!  test "analog/r1200"
!  test "analog/r1379"
!  test "analog/r1385"
!  test "analog/r1386"
!  test "analog/r1387"
!  test "analog/r1388"
!  test "analog/r1389"
!  test "analog/r1390"
!  test "analog/r1391"
!  test "analog/r1394"
!  test "analog/r1396"
!  test "analog/r1398"
!  test "analog/r1405"
!  test "analog/r1406"
!  test "analog/r1407"
!  test "analog/r1409"
!  test "analog/r1410"
!  test "analog/r1411"
!  test "analog/r1416"
!  test "analog/r1417"
!  test "analog/r1418"
!  test "analog/r1419"
!  test "analog/r1420"
!  test "analog/r1421"
!  test "analog/r1422"
!  test "analog/r1423"
!  test "analog/r1424"
!  test "analog/r1425"
!  test "analog/r1426"
!  test "analog/r1434"
!  test "analog/r1442"
!  test "analog/r1443"
!  test "analog/r1450"
!  test "analog/r1451"
!  test "analog/r1452"
!  test "analog/r1453"
!  test "analog/r1454"
!  test "analog/r1559"
!  test "analog/r1601"
!  test "analog/r1605"
!  test "analog/r1613"
!  test "analog/r1614"
!  test "analog/r1682"
!  test "analog/r1736"
!  test "analog/r1737"
!  test "analog/r1738"
!  test "analog/r1739"
!  test "analog/r1740"
!  test "analog/r1741"
!  test "analog/r1742"
!  test "analog/r1743"
!  test "analog/r1744"
!  test "analog/r1745"
!  test "analog/r1746"
!  test "analog/r1747"
!  test "analog/r1748"
!  test "analog/r1749"
!  test "analog/r1750"
!  test "analog/r1751"
!  test "analog/r1752"
!  test "analog/r1753"
!  test "analog/r1754"
!  test "analog/r1755"
!  test "analog/r1756"
!  test "analog/r1758"
!  test "analog/r1759"
!  test "analog/r1780"
!  test "analog/r1782"
!  test "analog/r1784"
!  test "analog/r1785"
!  test "analog/r1786"
!  test "analog/r1815"
!  test "analog/r1816"
!  test "analog/r1817"
!  test "analog/r1843"
  test "analog/r1844"
  test "analog/r1845"
!  test "analog/r1853"
!  test "analog/r1931"
!  test "analog/r2010"
!  test "analog/r2011"
!  test "analog/r2012"
!  test "analog/r2017"
!  test "analog/r2185"
!  test "analog/r2188"
!  test "analog/r2213"
!  test "analog/r2234"
!  test "analog/r2292"
!  test "analog/r2293"
!  test "analog/r2299"
!  test "analog/r2300"
!  test "analog/r2301"
!  test "analog/r2363"
!  test "analog/r2441"
!  test "analog/r2444"
!  test "analog/r2445"
!  test "analog/r2446"
!  test "analog/r3082"
!  test "analog/r3869_31"
!  test "analog/r3869_32"
!  test "analog/r3869_33"
!  test "analog/r3869_34"
!  test "analog/r3869_35"
!  test "analog/r3869_36"
!  test "analog/r3869_37"
!  test "analog/r3869_38"
!  test "analog/r3969"
!  test "analog/r3975"
!  test "analog/r4063"
!  test "analog/r4109"
!  test "analog/r4417_31"
!  test "analog/r4417_32"
!  test "analog/r4417_33"
!  test "analog/r4417_34"
!  test "analog/r4417_35"
!  test "analog/r4417_36"
!  test "analog/r4417_37"
!  test "analog/r4417_38"
!  test "analog/r4418_31"
!  test "analog/r4418_32"
!  test "analog/r4418_33"
!  test "analog/r4418_34"
!  test "analog/r4418_35"
!  test "analog/r4418_36"
!  test "analog/r4418_37"
!  test "analog/r4418_38"
!  test "analog/f1"
!  test "analog/f2"
!  test "analog/fl3"
!  test "analog/l1"
!  test "analog/l1_1"
!  test "analog/l1_p1"
!  test "analog/l1_p2"
!  test "analog/l1a_11"
!  test "analog/l1a_12"
!  test "analog/l1a_13"
!  test "analog/l1a_14"
!  test "analog/l1a_15"
!  test "analog/l1a_16"
!  test "analog/l1a_17"
!  test "analog/l1a_18"
!  test "analog/l1b_11"
!  test "analog/l1b_12"
!  test "analog/l1b_13"
!  test "analog/l1b_14"
!  test "analog/l1b_15"
!  test "analog/l1b_16"
!  test "analog/l1b_17"
!  test "analog/l1b_18"
!  test "analog/l01_9"
!  test "analog/l01_28"
!  test "analog/l2_p1"
!  test "analog/l2_p2"
!  test "analog/l2a_11"
!  test "analog/l2a_12"
!  test "analog/l2a_13"
!  test "analog/l2a_14"
!  test "analog/l2a_15"
!  test "analog/l2a_16"
!  test "analog/l2a_17"
!  test "analog/l2a_18"
!  test "analog/l2b_11"
!  test "analog/l2b_12"
!  test "analog/l2b_13"
!  test "analog/l2b_14"
!  test "analog/l2b_15"
!  test "analog/l2b_16"
!  test "analog/l2b_17"
!  test "analog/l2b_18"
!  test "analog/l3"
!  test "analog/l3_1"
!  test "analog/l3a_11"
!  test "analog/l3a_12"
!  test "analog/l3a_13"
!  test "analog/l3a_14"
!  test "analog/l3a_15"
!  test "analog/l3a_16"
!  test "analog/l3a_17"
!  test "analog/l3a_18"
!  test "analog/l3b_11"
!  test "analog/l3b_12"
!  test "analog/l3b_13"
!  test "analog/l3b_14"
!  test "analog/l3b_15"
!  test "analog/l3b_16"
!  test "analog/l3b_17"
!  test "analog/l3b_18"
!  test "analog/l5"
!  test "analog/l6_1"
!  test "analog/l7"
!  test "analog/l7_1"
!  test "analog/l8"
!  test "analog/l8_1"
!  test "analog/l9"
!  test "analog/l9_1"
!  test "analog/l10"
!  test "analog/l10_1"
!  test "analog/l11"
!  test "analog/l11_1"
!  test "analog/l12"
!  test "analog/l12_1"
!  test "analog/l13_1"
!  test "analog/l14_1"
!  test "analog/l15_1"
!  test "analog/l16_1"
!  test "analog/l17_1"
!  test "analog/l18_1"
!  test "analog/l18_31"
!  test "analog/l18_32"
!  test "analog/l18_33"
!  test "analog/l18_34"
!  test "analog/l18_35"
!  test "analog/l18_36"
!  test "analog/l18_37"
!  test "analog/l18_38"
!  test "analog/l19_1"
!  test "analog/l19_31"
!  test "analog/l19_32"
!  test "analog/l19_33"
!  test "analog/l19_34"
!  test "analog/l19_35"
!  test "analog/l19_36"
!  test "analog/l19_37"
!  test "analog/l19_38"
!  test "analog/l20"
!  test "analog/l20_1"
!  test "analog/l21_1"
!  test "analog/l21_31"
!  test "analog/l21_32"
!  test "analog/l21_33"
!  test "analog/l21_34"
!  test "analog/l21_35"
!  test "analog/l21_36"
!  test "analog/l21_37"
!  test "analog/l21_38"
!  test "analog/l22"
!  test "analog/l22_1"
!  test "analog/l22_31"
!  test "analog/l22_32"
!  test "analog/l22_33"
!  test "analog/l22_34"
!  test "analog/l22_35"
!  test "analog/l22_36"
!  test "analog/l22_37"
!  test "analog/l22_38"
!  test "analog/l23"
!  test "analog/l23_1"
!  test "analog/l23_31"
!  test "analog/l23_32"
!  test "analog/l23_33"
!  test "analog/l23_34"
!  test "analog/l23_35"
!  test "analog/l23_36"
!  test "analog/l23_37"
!  test "analog/l23_38"
!  test "analog/l24_1"
!  test "analog/l24_31"
!  test "analog/l24_32"
!  test "analog/l24_33"
!  test "analog/l24_34"
!  test "analog/l24_35"
!  test "analog/l24_36"
!  test "analog/l24_37"
!  test "analog/l24_38"
!  test "analog/l25"
!  test "analog/l25_1"
!  test "analog/l25_31"
!  test "analog/l25_32"
!  test "analog/l25_33"
!  test "analog/l25_34"
!  test "analog/l25_35"
!  test "analog/l25_36"
!  test "analog/l25_37"
!  test "analog/l25_38"
!  test "analog/l26_1"
!  test "analog/l27_1"
!  test "analog/l28_1"
!  test "analog/l29_1"
!  test "analog/l30_1"
!  test "analog/l31_1"
!  test "analog/l32_1"
!  test "analog/l33_1"
!  test "analog/l34_1"
!  test "analog/l37_1"
!  test "analog/l39_1"
!  test "analog/l42_1"
!  test "analog/l43_1"
!  test "analog/l44_1"
!  test "analog/l45_1"
!  test "analog/l46_1"
!  test "analog/l47_1"
!  test "analog/l50_1"
!  test "analog/l51_1"
!  test "analog/l52_1"
!  test "analog/l53_1"
!  test "analog/l60"
!  test "analog/l122_1"
!  test "analog/l164_1"
!  test "analog/l168_1"
!  test "analog/l169_1"
!  test "analog/l170_1"
!  test "analog/l180"
!  test "analog/l181"
!  test "analog/l182"
!  test "analog/l183"
!  test "analog/l184"
!  test "analog/l185"
!  test "analog/l214"
!  test "analog/l215"
!  test "analog/l216"
!  test "analog/l217"
!  test "analog/l278"
!  test "analog/r1"
!  test "analog/r01_3"
!  test "analog/r01_4"
!  test "analog/r01_5"
!  test "analog/r01_8"
!  test "analog/r01_27"
!  test "analog/r2"
!  test "analog/r2_a0_2"
!  test "analog/r2_a2_2"
!  test "analog/r2_a4_2"
!  test "analog/r2_b0_2"
!  test "analog/r2_b1_2"
!  test "analog/r2_b2_2"
!  test "analog/r2_b3_2"
!  test "analog/r2_b4_2"
!  test "analog/r2_b5_2"
!  test "analog/r2_b6_2"
!  test "analog/r2_b7_2"
!  test "analog/r2_c0_2"
!  test "analog/r2_c1_2"
!  test "analog/r2_c2_2"
!  test "analog/r2_c3_2"
!  test "analog/r2_c4_2"
!  test "analog/r2_c5_2"
!  test "analog/r2_c6_2"
!  test "analog/r2_c7_2"
!  test "analog/r2_d0_2"
!  test "analog/r2_d1_2"
!  test "analog/r2_d2_2"
!  test "analog/r2_d3_2"
!  test "analog/r2_d4_2"
!  test "analog/r2_d5_2"
!  test "analog/r2_d6_2"
!  test "analog/r2_d7_2"
!  test "analog/r02_3"
!  test "analog/r02_4"
!  test "analog/r02_5"
!  test "analog/r02_8"
!  test "analog/r02_27"
!  test "analog/r3"
!  test "analog/r3_1_3"
!  test "analog/r3_1_4"
!  test "analog/r3_91_5"
!  test "analog/r3_91_8"
!  test "analog/r3_91_27"
!  test "analog/r3_92_3"
!  test "analog/r3_92_4"
!  test "analog/r3_92_5"
!  test "analog/r3_92_8"
!  test "analog/r3_92_27"
!  test "analog/r3_93_5"
!  test "analog/r3_93_8"
!  test "analog/r3_93_27"
!  test "analog/r3_94_5"
!  test "analog/r3_97_8"
!  test "analog/r3_97_27"
!  test "analog/r3_98_3"
!  test "analog/r3_98_4"
!  test "analog/r3_98_5"
!  test "analog/r3_98_8"
!  test "analog/r3_98_27"
!  test "analog/r3_a0_2"
!  test "analog/r3_a2_2"
!  test "analog/r3_a4_2"
!  test "analog/r3_b0_2"
!  test "analog/r3_b1_2"
!  test "analog/r3_b2_2"
!  test "analog/r3_b3_2"
!  test "analog/r3_b4_2"
!  test "analog/r3_b5_2"
!  test "analog/r3_b6_2"
!  test "analog/r3_b7_2"
!  test "analog/r3_c0_2"
!  test "analog/r3_c1_2"
!  test "analog/r3_c2_2"
!  test "analog/r3_c3_2"
!  test "analog/r3_c4_2"
!  test "analog/r3_c5_2"
!  test "analog/r3_c6_2"
!  test "analog/r3_c7_2"
!  test "analog/r3_d0_2"
!  test "analog/r3_d1_2"
!  test "analog/r3_d2_2"
!  test "analog/r3_d3_2"
!  test "analog/r3_d4_2"
!  test "analog/r3_d5_2"
!  test "analog/r3_d6_2"
!  test "analog/r3_d7_2"
!  test "analog/r03_3"
!  test "analog/r03_4"
!  test "analog/r03_5"
!  test "analog/r03_8"
!  test "analog/r03_27"
!  test "analog/r4_1_3"
!  test "analog/r4_1_4"
!  test "analog/r4_91_5"
!  test "analog/r4_91_8"
!  test "analog/r4_91_27"
!  test "analog/r4_92_3"
!  test "analog/r4_92_4"
!  test "analog/r4_92_5"
!  test "analog/r4_92_8"
!  test "analog/r4_92_27"
!  test "analog/r4_93_5"
!  test "analog/r4_93_8"
!  test "analog/r4_93_27"
!  test "analog/r4_94_5"
!  test "analog/r4_97_8"
!  test "analog/r4_97_27"
!  test "analog/r4_98_3"
!  test "analog/r4_98_4"
!  test "analog/r4_98_5"
!  test "analog/r4_98_8"
!  test "analog/r4_98_27"
!  test "analog/r04_3"
!  test "analog/r04_4"
!  test "analog/r04_5"
!  test "analog/r04_8"
!  test "analog/r04_27"
!  test "analog/r5"
!  test "analog/r5_1_3"
!  test "analog/r5_1_4"
!  test "analog/r5_91_5"
!  test "analog/r5_91_8"
!  test "analog/r5_91_27"
!  test "analog/r5_92_3"
!  test "analog/r5_92_4"
!  test "analog/r5_92_5"
!  test "analog/r5_92_8"
!  test "analog/r5_92_27"
!  test "analog/r5_93_5"
!  test "analog/r5_93_8"
!  test "analog/r5_93_27"
!  test "analog/r5_94_5"
!  test "analog/r5_97_8"
!  test "analog/r5_97_27"
!  test "analog/r5_98_3"
!  test "analog/r5_98_4"
!  test "analog/r5_98_5"
!  test "analog/r5_98_8"
!  test "analog/r5_98_27"
!  test "analog/r05_3"
!  test "analog/r05_4"
!  test "analog/r05_5"
!  test "analog/r05_8"
!  test "analog/r05_9"
!  test "analog/r05_27"
!  test "analog/r05_28"
!  test "analog/r06_3"
!  test "analog/r06_4"
!  test "analog/r06_5"
!  test "analog/r06_8"
!  test "analog/r06_27"
!  test "analog/r7_2"
!  test "analog/r9_2"
!  test "analog/r10"
!  test "analog/r10_9"
!  test "analog/r10_28"
!  test "analog/r11_2"
!  test "analog/r12_9"
!  test "analog/r12_28"
!  test "analog/r13"
!  test "analog/r13_2"
!  test "analog/r14_9"
!  test "analog/r14_28"
!  test "analog/r15_2"
!  test "analog/r16_2"
!  test "analog/r17_2"
!  test "analog/r22_hs"
!  test "analog/r23_hs"
!  test "analog/r24_hs"
!  test "analog/r26_3"
!  test "analog/r26_4"
!  test "analog/r26_5"
!  test "analog/r26_8"
!  test "analog/r26_27"
!  test "analog/r28_2"
!  test "analog/r28_3"
!  test "analog/r28_4"
!  test "analog/r28_5"
!  test "analog/r28_8"
!  test "analog/r28_27"
!  test "analog/r49_2"
!  test "analog/r51_2"
!  test "analog/r54"
!  test "analog/r58_1"
!  test "analog/r59_1"
!  test "analog/r69_11"
!  test "analog/r69_12"
!  test "analog/r69_13"
!  test "analog/r69_14"
!  test "analog/r69_15"
!  test "analog/r69_16"
!  test "analog/r69_17"
!  test "analog/r69_18"
!  test "analog/r70_11"
!  test "analog/r70_12"
!  test "analog/r70_13"
!  test "analog/r70_14"
!  test "analog/r70_15"
!  test "analog/r70_16"
!  test "analog/r70_17"
!  test "analog/r70_18"
!  test "analog/r71_11"
!  test "analog/r71_12"
!  test "analog/r71_13"
!  test "analog/r71_14"
!  test "analog/r71_15"
!  test "analog/r71_16"
!  test "analog/r71_17"
!  test "analog/r71_18"
!  test "analog/r72_11"
!  test "analog/r72_12"
!  test "analog/r72_13"
!  test "analog/r72_14"
!  test "analog/r72_15"
!  test "analog/r72_16"
!  test "analog/r72_17"
!  test "analog/r72_18"
!  test "analog/r74_1"
!  test "analog/r79_1_3"
!  test "analog/r79_1_4"
!  test "analog/r79_91_5"
!  test "analog/r79_91_8"
!  test "analog/r79_91_27"
!  test "analog/r79_92_3"
!  test "analog/r79_92_4"
!  test "analog/r79_92_5"
!  test "analog/r79_92_8"
!  test "analog/r79_92_27"
!  test "analog/r79_93_5"
!  test "analog/r79_93_8"
!  test "analog/r79_93_27"
!  test "analog/r79_94_5"
!  test "analog/r79_97_8"
!  test "analog/r79_97_27"
!  test "analog/r79_98_3"
!  test "analog/r79_98_4"
!  test "analog/r79_98_5"
!  test "analog/r79_98_8"
!  test "analog/r79_98_27"
!  test "analog/r88_2"
!  test "analog/r90_2"
!  test "analog/r92"
!  test "analog/r93"
!  test "analog/r101"
  test "analog/r102"
!  test "analog/r105"
!  test "analog/r113_2"
!  test "analog/r168"
!  test "analog/r186"
!  test "analog/r186_31"
!  test "analog/r186_32"
!  test "analog/r186_33"
!  test "analog/r186_34"
!  test "analog/r186_35"
!  test "analog/r186_36"
!  test "analog/r186_37"
!  test "analog/r186_38"
!  test "analog/r187_1"
!  test "analog/r200_1"
!  test "analog/r202"
!  test "analog/r209_1"
!  test "analog/r210_1"
!  test "analog/r211_1"
!  test "analog/r224_1"
!  test "analog/r225_1"
!  test "analog/r238_1"
!  test "analog/r239_1"
!  test "analog/r252_1"
!  test "analog/r322"
!  test "analog/r336"
!  test "analog/r457_11"
!  test "analog/r457_12"
!  test "analog/r457_13"
!  test "analog/r457_14"
!  test "analog/r457_15"
!  test "analog/r457_16"
!  test "analog/r457_17"
!  test "analog/r457_18"
!  test "analog/r459_11"
!  test "analog/r459_12"
!  test "analog/r459_13"
!  test "analog/r459_14"
!  test "analog/r459_15"
!  test "analog/r459_16"
!  test "analog/r459_17"
!  test "analog/r459_18"
!  test "analog/r920"
!  test "analog/r977"
!  test "analog/r1105"
!  test "analog/r1115"
!  test "analog/r1181"
!  test "analog/r1186"
!  test "analog/r1287"
!  test "analog/r1288"
!  test "analog/r1289"
!  test "analog/r1304"
!  test "analog/r1305"
!  test "analog/r1316"
!  test "analog/r1357"
!  test "analog/r1358"
!  test "analog/r1375"
!  test "analog/r1412"
!  test "analog/r1427"
!  test "analog/r1428"
!  test "analog/r1429"
!  test "analog/r1430"
!  test "analog/r1431"
!  test "analog/r1432"
!  test "analog/r1433"
!  test "analog/r1441"
!  test "analog/r1470"
!  test "analog/r1471"
!  test "analog/r1472"
!  test "analog/r1473"
!  test "analog/r1478"
!  test "analog/r1479"
!  test "analog/r1480"
!  test "analog/r1481"
!  test "analog/r1491"
!  test "analog/r1492"
!  test "analog/r1506"
!  test "analog/r1509%jp12"
!  test "analog/r1509%jp13"
!  test "analog/r1509%jp14"
!  test "analog/r1510"
!  test "analog/r1511%jp12"
!  test "analog/r1511%jp13"
!  test "analog/r1511%jp14"
!  test "analog/r1512"
!  test "analog/r1513%jp12"
!  test "analog/r1513%jp13"
!  test "analog/r1513%jp14"
!  test "analog/r1514"
!  test "analog/r1515%jp12"
!  test "analog/r1515%jp13"
!  test "analog/r1515%jp14"
!  test "analog/r1516"
!  test "analog/r1517%jp12"
!  test "analog/r1517%jp13"
!  test "analog/r1517%jp14"
!  test "analog/r1518"
!  test "analog/r1519%jp12"
!  test "analog/r1519%jp13"
!  test "analog/r1519%jp14"
!  test "analog/r1520"
!  test "analog/r1521"
!  test "analog/r1522"
!  test "analog/r1523"
!  test "analog/r1524"
!  test "analog/r1525"
!  test "analog/r1526"
!  test "analog/r1527"
!  test "analog/r1528"
!  test "analog/r1540"
!  test "analog/r1606"
!  test "analog/r1703"
!  test "analog/r1776"
!  test "analog/r1790"
!  test "analog/r1797"
!  test "analog/r1799"
!  test "analog/r1810"
!  test "analog/r1819"
!  test "analog/r1820"
!  test "analog/r1821"
!  test "analog/r1822"
!  test "analog/r1855"
!  test "analog/r1884"
!  test "analog/r1885"
!  test "analog/r1887"
!  test "analog/r1888"
!  test "analog/r1889"
!  test "analog/r1891"
!  test "analog/r1892"
!  test "analog/r1893"
!  test "analog/r1894"
!  test "analog/r1943"
!  test "analog/r1995"
!  test "analog/r2008"
!  test "analog/r2043"
!  test "analog/r2078"
!  test "analog/r2182"
!  test "analog/r2184"
!  test "analog/r2216"
!  test "analog/r2233"
!  test "analog/r2235"
!  test "analog/r2263"
!  test "analog/r2264"
!  test "analog/r2265"
!  test "analog/r2266"
!  test "analog/r2268"
!  test "analog/r2269"
!  test "analog/r2270"
!  test "analog/r2271"
!  test "analog/r2272"
!  test "analog/r2273"
!  test "analog/r2274"
!  test "analog/r2275"
!  test "analog/r2276"
!  test "analog/r2277"
!  test "analog/r2278"
!  test "analog/r2279"
!  test "analog/r2280"
!  test "analog/r2281"
!  test "analog/r2282"
!  test "analog/r2283"
!  test "analog/r2287"
!  test "analog/r2288"
!  test "analog/r2289"
!  test "analog/r2290"
!  test "analog/r2296"
!  test "analog/r2448%jp12"
!  test "analog/r2448%jp13"
!  test "analog/r2448%jp14"
!  test "analog/r2450"
!  test "analog/r2452"
!  test "analog/r2453"
!  test "analog/r2454"
!  test "analog/r2664"
!  test "analog/r2673"
!  test "analog/r4136"
!  test "analog/r4398_31"
!  test "analog/r4398_32"
!  test "analog/r4398_33"
!  test "analog/r4398_34"
!  test "analog/r4398_35"
!  test "analog/r4398_36"
!  test "analog/r4398_37"
!  test "analog/r4398_38"
subend

! End of Testplan Writer Generated Testplan.

! Added by Testplan.pl conversion scipt to include IYET Subroutine in the testplan
!
!       IYET Subroutines
!##############################################################################

sub IYET_Initialize   !IYET

 global IYET_Path$, IYET_Failure_File$, IYET_Retest_Log_File$
 global IYET_Vacuum_Off_Delay, IYET_Vacuum_On_Delay
 global IYET_Report_On, IYET_Max_Report_Count, IYET_File_Timeout
 global IYET_Err_Msg$, IYET_Cont_Msg$, IYET_NoRT_Msg$
 global IYET_Test_Msg$, IYET_Max_Msg$, IYET_Fail_Msg$
 global IYET_Rpt1_Msg$, IYET_Rpt2_Msg$, IYET_Rpt3_Msg$
 global Chek_Point_Mode, Max_Times_To_Fix_Contact, Failures, True, False

  ! Initialize paths and files
  IYET_Path$                = "./iyet/"
  IYET_Retest_Log_File$     = IYET_Path$&"retest"&datetime$[1;6]&".txt"
  IYET_Failure_File$        = IYET_Path$&"failure.txt"

  ! Initialize variables
  IYET_Vacuum_Off_Delay     = 1.5
  IYET_Vacuum_On_Delay      = 1.5
  IYET_Max_Report_Count     = 10
  IYET_File_Timeout         = 5

   ! Initialize message strings
  IYET_Err_Msg$  = "Error with file: "
  IYET_Cont_Msg$ = "         Continue?"
  IYET_NoRT_Msg$ = "No re-tests found or missing file: "
  IYET_Test_Msg$ = "Re-testing "
  IYET_Max_Msg$  = "Maximum number of attempts for IYET must be >= 1."
  IYET_Fail_Msg$ = " failed, releasing board..."

  ! Initialize report strings
  IYET_Rpt1_Msg$ = "IYET Unstable Test Report - from file: "
  IYET_Rpt2_Msg$ = "Unstable Test"
  IYET_Rpt3_Msg$ = "# Re-tests"

  ! When pins test is "Failures", disable redundant re-contacts
  if Chek_Point_Mode = Failures then Max_Times_To_Fix_Contact = 1

  ! Create IYET directory
  create dir IYET_Path$, Error
  if (Error <> 100312) and (Error <> 0) then
 !  print IYET_Err_Msg$ & IYET_Path$
 !  print errmlong$(Error)
    beep
    stop
  end if

   ! Generate and print re-test report
  if (Error = 100312) and IYET_Report_On then
    print using "@"
 !  print IYET_Rpt1_Msg$ & IYET_Retest_Log_File$
 !  print
    call IYET_Create_Report
 !  print
 !  question IYET_Cont_Msg$,Continue
 !  if not Continue then stop
    print using "@"
  end if
subend
!##############################################################################
sub IYET_Create_Report   !IYET
 ! Collect all failing devices from log file and create retest report

 global IYET_Retest_Log_File$
 global IYET_Retest_Failing_Devices$(*), IYET_Top_Retests$(*)
 global IYET_Max_Report_Count, IYET_File_Timeout
 global IYET_NoRT_Msg$, IYET_Err_Msg$
 global IYET_Rpt1_Msg$, IYET_Rpt2_Msg$, IYET_Rpt3_Msg$

  ! Open retest log file and get failing devices
  assign @Retest_Log, Error to IYET_Retest_Log_File$;read
  if Error then
    print IYET_NoRT_Msg$ & IYET_Retest_Log_File$
    print
    subexit
  end if

 ! Read all failing devices until end of file or until IYET_File_Timeout.
  Start_Time = msec
  I = 0
  loop
    Input$ = ""
    enter @Retest_Log,,Error;Input$
    if (not Error = 0) and (not Error = 101007) then
      print IYET_Err_Msg$ & IYET_Retest_Log_File$
      print errmlong$(Error)
      beep
      stop
    end if

    ! Look for shorts, vectorless test failures
    if pos(Input$," Report for """) then
      End_Input = pos(Input$,""".")
      Begin_Input = pos(Input$,"""") + 1
      Temp_device$ = Input$[Begin_Input;End_Input - Begin_Input]
      IYET_Retest_Failing_Devices$(I) = Temp_device$
      I = I + 1
    end if

    ! Look for analog failures
    if pos(Input$,"HAS FAILED") then
      IYET_Retest_Failing_Devices$(I) = Input$[1;pos(Input$,"HAS FAILED")-1]
      I = I + 1
    end if

    exit if Error = 101007

    if (msec - Start_Time)/1000 > IYET_File_Timeout then
      print IYET_Err_Msg$ & IYET_Retest_Log_File$
      beep
      stop
    end if
  end loop

  assign @Retest_Log to *
  Device_Total = I-1

  ! Count failures and remove duplicates
  K = 0
  for I = 0 to Device_Total
    if IYET_Retest_Failing_Devices$(I) <> "" then
      Temp$ =  IYET_Retest_Failing_Devices$(I)
      Temp_Retests = 1
      for J = I + 1 to Device_Total
        if IYET_Retest_Failing_Devices$(J) <> "" then
          if Temp$ = IYET_Retest_Failing_Devices$(J) then
            Temp_Retests = Temp_Retests + 1
            IYET_Retest_Failing_Devices$(J) = ""
          end if
        end if
      next J
      IYET_Top_Retests$(K,1) = Temp$
      IYET_Top_Retests$(K,2) = val$(Temp_Retests)
      K = K + 1
    end if
  next I
  Top_Retest_Total = K-1

   ! Sort ascending
  for I = 0 to Top_Retest_Total
    for J = Top_Retest_Total to 1 step -1
      if val(IYET_Top_Retests$(J,2)) > val(IYET_Top_Retests$(J-1,2)) then
        Temp$ = IYET_Top_Retests$(J-1,1)
        Temp_Retests = val(IYET_Top_Retests$(J-1,2))

        IYET_Top_Retests$(J-1,1) = IYET_Top_Retests$(J,1)
        IYET_Top_Retests$(J-1,2) = IYET_Top_Retests$(J,2)

        IYET_Top_Retests$(J,1) = Temp$
        IYET_Top_Retests$(J,2) = val$(Temp_Retests)
      end if
    next J
  next I

  ! Print
  IYET_Max_Report_Count = IYET_Max_Report_Count - 1
  if Top_Retest_Total <= IYET_Max_Report_Count then
    IYET_Max_Report_Count = Top_Retest_Total
  end if

 print IYET_Rpt2_Msg$;tab (50);IYET_Rpt3_Msg$

  for I = 0 to IYET_Max_Report_Count
    print IYET_Top_Retests$(I,1);tab (55);IYET_Top_Retests$(I,2)
  next I
subend

!##############################################################################
 sub IYET_Vacuum_Off   !IYET
 ! Edit this subroutine to match your vacuum actuation commands. Note that the
 ! delay for vacuum off is completed in the "IYET_Vacuum_On" subroutine.

 global IYET_Start_Vacuum_Off

  IYET_Start_Vacuum_Off = msec
  faoff 1.5
subend

sub IYET_Vacuum_On   !IYET####################################################
 ! Edit this subroutine to match your vacuum actuation commands. Do not
 ! comment the line:
 !
 !  question IYET_Cont_Msg$,Continue | if not Continue then stop
 !
 ! unless your fixture is approved for actuation without operator
 ! intervention.

 global IYET_Start_Vacuum_Off, IYET_Vacuum_Off_Delay, IYET_Vacuum_On_Delay
 global IYET_Cont_Msg$
 global Counter_Inc

  faon 1.5
  Counter_Inc = Counter_Inc +1
subend

!##############################################################################

sub IYET_Get_Failed_Tests (IYET_Abort)   !IYET
 ! Collect all failing tests from failure file.
 ! To save time, this is called between the vacuum off and vacuum on.

 global IYET_Failing_Tests$(*), IYET_Test_Total, IYET_File_Timeout
 global IYET_Failure_File$, IYET_Retest_Log_File$, IYET_Err_Msg$
 global Report_Printer$, Serial$, True, False

  report "S/N:"&Serial$

  report out
  report out IYET_Failure_File$; over
  report out IYET_Retest_Log_File$;append

  ! Open failure ticket and get failing tests
  assign @Ticket, Error to IYET_Failure_File$;read
  if Error then
    print IYET_Err_Msg$ & IYET_Failure_File$
    print errmlong$(Error)
    beep
    stop
  end if

  ! Read all failing tests until end of file or until IYET_File_Timeout.
  Start_Time = msec
  I = 0
  IYET_Abort = False
  loop
    Input$ = ""
    enter @Ticket,,Error;Input$
    if (not Error = 0) and (not Error = 101007) then
      print IYET_Err_Msg$ & IYET_Failure_File$
      print errmlong$(Error)
      beep
      stop
    end if

    ! Look for shorts, vectorless test failures
    if pos(Input$," Report for """) then
      End_Input = pos(Input$,""".")
      Begin_Input = pos(Input$,"""") + 1
      IYET_Failing_Tests$(I) = Input$[Begin_Input;End_Input - Begin_Input]
      I = I + 1
    end if

    ! Look for analog test failures
    if pos(Input$,"HAS FAILED") then
      IYET_Failing_Tests$(I) = Input$[1;pos(Input$,"HAS FAILED")-1]
      I = I + 1
    end if

    ! Look for compensation failures and set abort flag
    if pos(Input$,"Compensation capacitance has not been") then
      IYET_Abort = True
    end if

    exit if IYET_Abort

    exit if Error = 101007

    if (msec - Start_Time)/1000 > IYET_File_Timeout then
      print IYET_Err_Msg$ & IYET_Failure_File$
      beep
      stop
    end if
  end loop

  assign @Ticket to *
  IYET_Test_Total = I - 1

  ! Abort if no tests are found
  if IYET_Test_Total < 0 then IYET_Abort = True

  ! Clear report buffer and failures unless aborted
  if not IYET_Abort then
    report clear
    clear failures
  end if
subend

!##############################################################################
 sub IYET_Retest_Failed_Tests   !IYET
 global IYET_Failing_Tests$(*), IYET_Test_Total, IYET_Test_Msg$

  if IYET_Failing_Tests$(0) = "pins_long" or IYET_Failing_Tests$(0) = "short_stroke" then faoff 2.0
!  end if

  for I = 0 to IYET_Test_Total
    print tab(11);IYET_Test_Msg$;lwc$(IYET_Failing_Tests$(I))
    test lwc$(IYET_Failing_Tests$(I))
  next I
subend

!##############################################################################
sub IYET (TestType$, Maximum_Number_Attempts)   !IYET  !@ Revisar
 global Failed_In_Preshorts, PreshortsMsg$, Failed_In_Shorts, ShortsMsg$
 global Failed_In_Analog, AnalogMsg$
 global Failed_In_VectorlessTest, VectorlessTestMsg$
 global Using_Buffered_Reporting, Logging, True, False, Mode$
 global IYET_Fail_Msg$, IYET_Max_Msg$
 global Counter_Inc
 global Long_Pin_Msg$,Failed_Long_Pin_Test

  ! Check that maximum number of attempts is OK.
  if Maximum_Number_Attempts < 1 then
    print IYET_Max_Msg$
    beep
    stop
  end if
  Retests_Remaining = dround(Maximum_Number_Attempts,1)

   ! Force log level, will be restored by Cleanup_Flash
  if Logging then
    log level is all !none
  end if

  ! Force buffered reporting, save flag to restore at end
  if not Using_Buffered_Reporting then
    buffered reporting on
    Not_Using_Buffered_Reporting = True
  end if

  ! Call the test subroutine for the first time...
  if TestType$ = PreshortsMsg$ then
    call Pre_Shorts (Failed_In_Preshorts, Mode$ & PreshortsMsg$)
  end if

  if TestType$ = ShortsMsg$ then
    call Shorts (Failed_In_Shorts, Mode$ & ShortsMsg$)
  end if

  if TestType$ = AnalogMsg$ then
    call Analog_Tests (Failed_In_Analog, Mode$ & AnalogMsg$)
  end if

  if TestType$ = VectorlessTestMsg$ then
    call VectorlessTest (Failed_In_VectorlessTest, Mode$ & VectorlessTestMsg$)
  end if

  if TestType$ = Long_Pin_Msg$ then
    call Long_Pin_Tests (Failed_Long_Pin_Test, Mode$ & Long_Pin_Msg$)
  end if

  Retests_Remaining = Retests_Remaining - 1

  loop

    ! Exit if attempt is successful
    exit if (not boardfailed)

    ! Exit if done with re-tests
    exit if (Retests_Remaining = 0)

    !if TestType$ = Long_Pin_Msg$ then auxdisconnect 5 | wait 2

    ! Process failures during vacuum cycle time
    print tab(8);TestType$ & IYET_Fail_Msg$
    call IYET_Vacuum_Off
    call IYET_Get_Failed_Tests (IYET_Abort)
    call IYET_Vacuum_On

    ! Exit if aborted
    exit if IYET_Abort

    ! For last time through the loop, restore logging and reporting
    if Retests_Remaining = 1 then call Cleanup_Flash

    ! Re-test
    call IYET_Retest_Failed_Tests
    Retests_Remaining = Retests_Remaining - 1

  end loop

  ! Now some clean up. Could be redundant.

  ! Restore Log & Report level
  call Cleanup_Flash

  ! Restore 'unbuffered' reporting, after dumping report buffer
  if Not_Using_Buffered_Reporting then
    if boardfailed then report out
    buffered reporting off
  end if
subend


!=============================================================================
def fnCheck_sn_stop(Need_Check_sn$)

!###################################################
!# sn stop return code explain :
!# if fail to generate "sn_cycle.txt", return 6
!# "sn_cycle.txt" content format:
!# S_F#5_
!# 5 is retest count for SN
!###################################################

Input_sn$ = trim$(Need_Check_sn$)
Return_ICT_test_item$ = "C:/Agilent_ICT/sn_cycle/sn_cycle.exe"
SN_Output_path$ = "C:/Agilent_ICT/sn_cycle/"&"sn_cycle.txt"

!unlink the current output file if exist before check the line stop
unlink "C:/Agilent_ICT/sn_cycle/"&"sn_cycle.txt" ,Error
if (Error <>0) and (Error <>100009)  then  print errm$

execute  Return_ICT_test_item$ &" "& Input_sn$&"@"&SN_Output_path$&"@",Failure2
if Failure2 <>0 then print errm$

assign @Myfile ,Error to SN_Output_path$;read
enter @Myfile,,Failure;Check_result$
if Failure <> 0 then print errm$
assign @Myfile to *

if Check_result$[1;1] = "E" then
   return 6  !!if error return 6
else
   Len_bit=len(Check_result$)-5
   Fail_count=val(Check_result$[5;Len_bit])
   return Fail_count
end if

fnend
!=============================================================================

  !#############################################################################?


!###########           RUTINA OPERADORES  NEW    #############
sub Checa_operador
global Oper$

loop

P$ = "C:\Operator\Operator.txt"
assign @Ver_oper,Error to P$; read, exclusive

if Error <> 100009 then
  assign @Ver_Oper to P$; read, exclusive  !Vuelve a leer el Archivo
  enter @Ver_Oper; Oper$
  assign @Ver_Oper to *
  goto OP
end if

  print tab(16);chr$(27)&"&v4S--------------------------------------------"
  print tab(16);chr$(27)&"&v1S    -----------------------------------     "
  print tab(16);chr$(27)&"&v1S    |      NO SE PUEDE CONTINUAR      |     "
  print tab(16);chr$(27)&"&v1S    |      OPERADOR NO CERTIFICADO    |     "
  print tab(16);chr$(27)&"&v1S    -----------------------------------     "
  print tab(16);chr$(27)&"&v4S--------------------------------------------"

  print tab(21);chr$(27)&"&v6S Enter a certified Operator"

  wait 2000m
  print using "@"

end loop

OP:
subend

!*******************************************************************************
sub Get_Version   !Get operator to scan  board assembly and version that is to be tested.
   !Enter the ISO information for each version here. This will be printed
   !by sub Print_Heading just above the sub Test_Sections messages.
   !Include any optional information, variables, etc. as desired.
   global Board$, Board_Rev$, Line$
   global Option, Selection, Assembly$, Scan_Count, Dev, Devia$
   global Deviation_Log$, Num_Dev, Dev_Count
   global Assy_73$, Assy_73_Rev$, Assy_800$, Assy_800_Rev$
   global Option_short, Option_Elpd ,Option_D095428
   global MAC_Addr$
   global Red$, Blue$, Yellow$, Green$, Black$, Cyan$

   InvOn$  = chr$(27)&"&dB"&chr$(7)  ! chr$(7) rings bell
   InvOff$ = chr$(27)&"&d@"

   Choose_Board_Version:
!   print using "@"


!<***************************************************************************>
!<--------------------------------------------------------------------------->
!<----- ALL VARIABLES & OPTIONS ADDED MUST BE SET TO 0 HERE ----------------->
!<--------------------------------------------------------------------------->
!<***************************************************************************>

   Assembly$      = ""   !clear variables if program loops
   Board$         = ""
   Board_Rev$     = ""
   Deviation_Log$ = ""
   Num_Dev        = 0
   Option_short   = 0
   Option_Elpd    = 0
   Option_D095428 = 0
   MAC_Addr$      = ""

 loop
  beep
  print tab(14),Black$&"Escanea el numero de ensamble de la tarjeta "
  input " ",Assembly$
  beep
  Ens = 0
  if Assembly$ = "73-102931-03 A0" or Assembly$ = "73-102931-02 A0" then
 Assembly$ = trim$(upc$(Assembly$)) !! Elimina espacios en blanco inicio y fin
    A=len(Assembly$)   !!Captura valor del ensamble en numero de caracteres
    Board$ = Assembly$[1;A-3]
   Board_Rev$ = Assembly$[A-1;2]         !JS!
    print tab(10); Yellow$& "El UUT Type es: "& Board$
    print tab(10); Yellow$&"Cantidad de caracteres : "; A
    print tab(10); Yellow$&"La Revision es: "& Board_Rev$

    Assy_73$        =  Assembly$[1;A-3]
    Assy_73_Rev$    =  Assembly$[A-1;2]
    Assy_800$       = ""
    Assy_800_Rev$   = ""
    Ens = 1
  end if

  exit if Ens = 1
  print;Red$&"Ensamble equivocado"
  print ""
  beep
end loop
subend

!****************************************************************************
!********* add retest without send Flexflow !6 to 6 ************************
!############################   1st retry  ###################################

def fn ShouldILog(SN$)
global SILDir$
global SIL_status,True, False
SN_File$  = SILDir$&"/"&SN$
   assign @Serial_Numbers_File, Error  to SN_File$ ;read
if Error then

    SIL_status = False
    return False
 else
     SIL_status = True
    return True
end if
fnend

!############################   2nd retry  ###################################

def fn ShouldILog2(SN$)
global SIL2Dir$       !!JJSR
global SIL2_status,True, False
SN2_File$ = SIL2Dir$&"/"&SN$       !! JJSR
   assign @Serial_Numbers_File, Error2 to SN2_File$;read      !!JJSR

if Error2  then
    SIL2_status = False
    return False
 else
     SIL2_status = True
    return True
 end if

fnend
!*****************************************************************************
!############################################################################
sub Verify_Autofile
global Red$, Blue$, Yellow$, Black$
global Autofile$, Stop_Msg$, FixID$,ReadID$,Fix_Type$ ,Model_Type$,Rfid$


Model_Type$ = "Superfuzz-AC"

if Autofile$ = "2500" then
   RFID$= "0284389"
   Fix_Type$ = "Fixture_220"
   print tab(18);Black$&"Fixture Detected",Fix_Type$
   print tab(22);Black$&"RFID Detected:";Rfid$
   goto Val_auto
end if

if Autofile$ = "2501" then
   RFID$= "02843AA"
   Fix_Type$ = "Fixture_255"
   print tab(18);Black$&"Fixture Detected",Fix_Type$
   print tab(22);Black$&"RFID Detected:";Rfid$
   goto Val_auto
end if

if Autofile$ = "2502" then
  RFID$= "0284394"
  Fix_Type$ = "Fixture_256"
  print tab(18);Black$&"Fixture Detected",Fix_Type$
  print tab(22);Black$&"RFID Detected:";Rfid$
  goto Val_auto
end if

print tab(13);Red$&"***********************************************************"
print tab(13);Red$&"***** TENGA CUIDADO!!, EL PROGRAMA QUE INTENTA CARGAR *****"
print tab(13);Red$&"*****       NO ES EL INDICADO PARA ESTE FIXTURE       *****"
print tab(13);Red$&"*****     POR FAVOR CONTACE A UN ING. DE PRUEBAS      *****"
print tab(13);Red$&"***********************************************************"
stop
Val_auto:
subend

!############################################################################
sub Header
global Red$, Blue$, Yellow$, Green$, Black$, Cyan$
global LastUpdate$, Software_Rev$

print using "@,2/"
print ""
print tab(16);Blue$&"***************************************************"
print tab(16);Blue$&"*           PROJECT: C I S C O -  I N S B U       *"
print tab(16);Blue$&"*                    Name:  Superfuzz_AC          *"
print tab(16);Blue$&"*                Assembly:  73-102931-02          *"
print tab(16);Blue$&"*                     Rev:  A0                    *"
print tab(16);Blue$&"*               Developer:  FDO                   *"
print tab(16);Blue$&"*          Last Update On:  January 4th, 2023     *"
print tab(16);Blue$&"*               Test Time:  130  Sec.             *"
print tab(16);Blue$&"*             Prepared By:  FLEX TEAM             *"
print tab(16);Blue$&"***************************************************"
print tab(16);Blue$&"*                F     L     E     X              *"
print tab(16);Blue$&"***************************************************"
print ""
subend

sub Fixture_SET
  global Flex_Flow, Serial_golden$

  if Serial_golden$ = "unidad golden" then
  Flex_Flow = 0
  else
  Flex_Flow = 1
  end if

subend

sub Validation_FF
global Serial$, MAC_Addr$, Assembly$, Black$
global FF_V, SIL, SIL2,Board_Rev$,Board$, Serial_golden$

execute "> PART"
execute "> PARTREV"
Result1$ = ""
Result12$= ""


  execute "ffeticlient -INFO " & Serial$ & " > ffeticlient2.out", Error;nowait,append
  enter "ffeticlient2.out";Vali$
  if Vali$[1;2]="{O" then
      execute "grep -i 'PartNumber' ffeticlient2.out > PART"
      execute "grep -i 'PartRevision' ffeticlient2.out > PARTREV"
  end if
    if Vali$[1;2]="{E" then
       FF_V = 1
       print chr$(27)&"&v3S****** LA UNIDAD NO TIENE FLUJO **********"
       print chr$(27)&"&v3S****FAVOR DE VALIDAR EL FLUJO DE LA UNIDAD*****"
       goto End
    end if

 enter "PART" ;Result1$
 enter "PARTREV" ;Result12$
 Num = pos(Result1$,"73")
 if Num = 0 then Num=pos(Result1$,"800")
 Num2 = pos(Result12$, "=-")
 FF_V = 0

   print chr$(27)&"&v7S Valor en Flex Flow: "& Result1$[Num;11]&" "& Result12$[Num2+2;2]

 if Result1$[Num;12] = "800-46961-06" then
     Result1$ = "PartNumber=CIS-"&Board$
     Result12$[Num2+2;2] = Board_Rev$
     Num = 16
 end if

 if Result1$[Num;12] = "800-50403-05" then
     Result1$ = "PartNumber=CIS-"&Board$
     Result12$[Num2+2;2] = Board_Rev$
     Num = 16
 end if

Ensrev$ = Result1$[Num;12] &" "& Result12$[Num2+2;2]

if Ensrev$<>Assembly$  then
     print chr$(27)&"&v3S******** NUMERO DE PARTE INCORRECTO **********"
     print chr$(27)&"&v3S***EL SIGUIENTE: "&Serial$&" PERTENECE**********"
     print chr$(27)&"&v3SE*** AL NUMERO DE PARTE: "&Ensrev$&" EN FLEX FLOW"
     print chr$(27)&"&v3S*****FAVOR DE VALIDAR CON TU SUPERVISOR*************"
     FF_V = 1
     goto End
  else
      print chr$(27)&"&v2S*********  Tarjeta Valida para probar en ICT *******"
end if

GOLDEND:
End:
if Serial_golden$ = "unidad golden" then FF_V = 0
subend

sub Counter
  global Fix_Type$
 execute "C:\\counter\\counter.exe "& Fix_Type$;append
  wait 1
subend
!********************Flex_Flow INTEGRATION ****************************
sub FF_Val(Serial$, Flex_Flow)
global FL, Serial_golden$,StopLine$

Result$ = ""
StopLine$ = ""


   execute "ffeticlient -VERIFY "&Serial$, Error;nowait
   enter "ffeticlient.out";Result$
   print Result$

B=len(Result$)

if Result$[B-10;11] = "StopLineICT" then
   StopLine$ = "1"
   print ""
   print tab(5),Red$&"STOPLINE ACTIVO, VALIDA QUE LA UNIDAD SEA LA CORRECTA PARA PROBAR"
   print ""
   print tab(18),Black$&"VALIDA QUE LA UNIDAD ESTE BIEN COLOCADA"
   print ""
   goto Line
end if
           if Result$[1;2]="{O" then
              print chr$(27)&"&v2SValidacion en Flex_Flow OK"
              FL = 0
           else
              print chr$(27)&"&v1SEsta tarjeta no pertenece a esta estacion"
              FL = 1
           goto NOPE
           end if

Gold:
 FL = 0
Line:
NOPE:
if Serial_golden$ = "unidad golden" then FL = 0
if Serial_golden$ = "unidad golden" then StopLine$ = "0"

subend
!*****************************************************************************
sub Check_board
global Red$, Yellow$

 print
 print tab(13);Yellow$&"****** FAVOR DE REVISAR LA UNIDAD  *********"
 print tab(13);Yellow$&"****** ESTE COLOCADA CORRECTAMENTE ****************"
 print

subend
!#############################################################################
 !################SUB_SERIAL_VALIDATION##############
sub Verify_EEprom                                    !todas las subrutinas se mandan al final del testplan
global Serial$,Board$,Red$,Green$, Act2_Vendor$
global PMC_On
global Black$
dim Read_Data(16384)
dim Addr(8)
   !! Start read out board 1 EEprom data

   assign @EE_data1 to "Hex";write
   assign @EE_data2 to "Char";write

   safeguard cool
test Act2_Vendor$&"/u24%dump";Read_Data(*)
     for K = 0 to 511    !4096
     Char_Data$=""
     for G = 0 to 7
        B = (K * 8) + G
        Char_Data$=Char_Data$ & val$(Read_Data(B))
     next G
     Int_Data  = bti ( Char_Data$)
     Hex_Data$ = ith$(Int_Data)
     if len (Hex_Data$ ) =1 then Hex_Data$="0"&Hex_Data$

     ! Output to file
     ! EE_data1 addr and data in hex
     output @EE_data1;"   ADDR: " & ith$(K) & "='" & Hex_Data$ & "'"

     ! EE_data2 addr and data in integers and chracters
     if ((Int_Data < 123) and (Int_Data > 29)) then !!num 30-122 Char 0 to z
      output @EE_data2;"   ADDR: " & val$(K) & "='" & chr$(Int_Data) & "'"
     else
      output @EE_data2;"   ADDR: " & val$(K) & "='" & ith$(Int_Data) & "'"
     end if

   next K

      assign @EE_data1 to *
      assign @EE_data2 to *

   execute"read_pcamap.1.1.exe",Err;nowait,append
   wait 500m

!@   enter "Hex.out";Hexout$
!@if Hexout$[1;2] = "FF" or  Hexout$[1;2] = "00" then
!@   print ""
!@   print Green$&"PRIMERA VEZ QUE SE PRUEBA LA UNIDAD"
!@   log "}"
!@   log "{@D-T|0|384||0|EEPROM PRIMERA VEZ QUE SE PROGRAMARA"
!@   goto Ensa
!@end if
!@
!@if Hexout$= Assembly$ then
!@   print ""
!@   printGreen$&"EL NUMERO DE SERIE COINCIDE CON LA PCB"
!@   log "}"
!@   log "{@D-T|0|384||0|EEPROM VALIDACION P\N PASS"
!@else
!@   printRed$&"EL NUMERO PARTE NO COINCIDE CON LA PCB"
!@   printRed$&"LLAMEN AL DEPARTEMENTO DE PRUEBAS Y A SU SUPERVISOR"
!@   call Mala_Operacion
!@   stop
!@end if
!@Ensa:

   enter "Char.out";Charout$
if Charout$[1;11] = "FFFFFFFFFFF" or Charout$[1;11] = "00000000000" then
   print tab(5),Green$&"PRIMERA VEZ QUE SE PROGRAMARA"
   log "}"
   log "{@D-T|0|384||0|EEPROM PRIMERA VEZ QUE SE PROGRAMARA"
   goto Primera
end if

if Charout$= Serial$ then
   print tab(5),Green$&"EL NUMERO DE SERIE ESCANEADO COINCIDE CON EL DE LA PCB"
   log "}"
   log "{@D-T|0|384||0|EEPROM VALIDACION DE S\N PASS"
else
   print ""
   print Red$&"EL NUMERO DE SERIE ESCANEADO NO COINCIDE CON EL DE LA PCB"
   print Red$&"LLAMA AL DEPARTAMENTO DE PRUEBAS Y A SU SUPERVISOR"
   print Red$&"INFO EN LA EEPROM: "& Charout$
   call Mala_Operacion
powered
   print tab(5), Black$&"Disconnecting Power Supplies"
   cps
   sps 3,0.01,2.00;optimize  ! P12V
   sps 4,0.01,2.00;optimize  ! P12V
   sps 7,0.01,2.00;optimize  ! P12V
   sps 8,0.01,2.00;optimize  ! P12V
   sps 11,0.01,2.00;optimize ! P12V
   sps 12,0.01,2.00;optimize ! P12V
   sps 15,0.01,2.00;optimize ! P12V
   sps 16,0.01,2.00;optimize ! P12V
   sps 5,0.01,2.00;optimize  ! P3V3_STBY
   wait 3
   dps
!! wait 3        !! flex  JJSR
   test "analog/pwr_off_check"
   if PMC_On then
    ! Turn off PMC for all or selected channels here
    faon|wait 4
   auxdisconnect5|wait3|faoff
   stop
end if
end if
Primera:

subend

sub Mala_Operacion
global P$,Serial$,Charout$
global Assembly$,Oper$

P$ = "F:\Registro\Mala_Operacion.txt"
assign @Operador,Error to P$; read, exclusive

assign @Unidades to P$; write, append   !Vuelve a leer el Archivo
output @Unidades; Assembly$,Serial$,Charout$,Oper$,datetime$
assign @Unidades to *

subend

!#################################################################

